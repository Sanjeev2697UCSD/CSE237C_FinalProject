-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity correlator_correlator_Pipeline_MULTIPLE_CORRELATORS is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    acc_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    acc_V_ce0 : OUT STD_LOGIC;
    acc_V_we0 : OUT STD_LOGIC;
    acc_V_d0 : OUT STD_LOGIC_VECTOR (29 downto 0);
    acc_V_q0 : IN STD_LOGIC_VECTOR (29 downto 0);
    acc_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    acc_V_ce1 : OUT STD_LOGIC;
    acc_V_we1 : OUT STD_LOGIC;
    acc_V_d1 : OUT STD_LOGIC_VECTOR (29 downto 0);
    acc_V_q1 : IN STD_LOGIC_VECTOR (29 downto 0);
    temp_input_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    temp_input_V_ce0 : OUT STD_LOGIC;
    temp_input_V_q0 : IN STD_LOGIC_VECTOR (29 downto 0) );
end;


architecture behav of correlator_correlator_Pipeline_MULTIPLE_CORRELATORS is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (32 downto 0) := "000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (32 downto 0) := "000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (32 downto 0) := "000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (32 downto 0) := "000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (32 downto 0) := "000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (32 downto 0) := "000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (32 downto 0) := "000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (32 downto 0) := "000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (32 downto 0) := "000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (32 downto 0) := "001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (32 downto 0) := "010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (32 downto 0) := "100000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv64_20 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv64_1E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011110";
    constant ap_const_lv64_1D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011101";
    constant ap_const_lv64_1C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011100";
    constant ap_const_lv64_1B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011011";
    constant ap_const_lv64_1A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011010";
    constant ap_const_lv64_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv64_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010111";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv64_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010101";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln43_fu_921_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_block_state33_pp0_stage32_iter0 : BOOLEAN;
    signal codebook_V_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal codebook_V_0_ce0 : STD_LOGIC;
    signal codebook_V_0_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal codebook_V_1_ce0 : STD_LOGIC;
    signal codebook_V_1_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal codebook_V_2_ce0 : STD_LOGIC;
    signal codebook_V_2_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_3_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal codebook_V_3_ce0 : STD_LOGIC;
    signal codebook_V_3_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_4_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal codebook_V_4_ce0 : STD_LOGIC;
    signal codebook_V_4_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_5_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal codebook_V_5_ce0 : STD_LOGIC;
    signal codebook_V_5_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_6_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal codebook_V_6_ce0 : STD_LOGIC;
    signal codebook_V_6_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_7_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal codebook_V_7_ce0 : STD_LOGIC;
    signal codebook_V_7_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_8_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal codebook_V_8_ce0 : STD_LOGIC;
    signal codebook_V_8_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_9_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal codebook_V_9_ce0 : STD_LOGIC;
    signal codebook_V_9_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_10_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal codebook_V_10_ce0 : STD_LOGIC;
    signal codebook_V_10_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_11_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal codebook_V_11_ce0 : STD_LOGIC;
    signal codebook_V_11_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_12_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal codebook_V_12_ce0 : STD_LOGIC;
    signal codebook_V_12_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_13_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal codebook_V_13_ce0 : STD_LOGIC;
    signal codebook_V_13_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_14_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal codebook_V_14_ce0 : STD_LOGIC;
    signal codebook_V_14_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_15_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal codebook_V_15_ce0 : STD_LOGIC;
    signal codebook_V_15_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_16_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal codebook_V_16_ce0 : STD_LOGIC;
    signal codebook_V_16_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_17_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal codebook_V_17_ce0 : STD_LOGIC;
    signal codebook_V_17_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_18_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal codebook_V_18_ce0 : STD_LOGIC;
    signal codebook_V_18_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_19_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal codebook_V_19_ce0 : STD_LOGIC;
    signal codebook_V_19_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_20_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal codebook_V_20_ce0 : STD_LOGIC;
    signal codebook_V_20_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_21_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal codebook_V_21_ce0 : STD_LOGIC;
    signal codebook_V_21_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_22_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal codebook_V_22_ce0 : STD_LOGIC;
    signal codebook_V_22_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_23_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal codebook_V_23_ce0 : STD_LOGIC;
    signal codebook_V_23_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_24_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal codebook_V_24_ce0 : STD_LOGIC;
    signal codebook_V_24_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_25_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal codebook_V_25_ce0 : STD_LOGIC;
    signal codebook_V_25_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_26_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal codebook_V_26_ce0 : STD_LOGIC;
    signal codebook_V_26_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_27_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal codebook_V_27_ce0 : STD_LOGIC;
    signal codebook_V_27_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_28_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal codebook_V_28_ce0 : STD_LOGIC;
    signal codebook_V_28_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_29_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal codebook_V_29_ce0 : STD_LOGIC;
    signal codebook_V_29_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_30_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal codebook_V_30_ce0 : STD_LOGIC;
    signal codebook_V_30_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_31_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal codebook_V_31_ce0 : STD_LOGIC;
    signal codebook_V_31_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_32_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal codebook_V_32_ce0 : STD_LOGIC;
    signal codebook_V_32_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal reg_889 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_state11_pp0_stage10_iter0 : BOOLEAN;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_block_state14_pp0_stage13_iter0 : BOOLEAN;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_block_state17_pp0_stage16_iter0 : BOOLEAN;
    signal reg_893 : STD_LOGIC_VECTOR (29 downto 0);
    signal reg_897 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_block_state12_pp0_stage11_iter0 : BOOLEAN;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_block_state15_pp0_stage14_iter0 : BOOLEAN;
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_block_state18_pp0_stage17_iter0 : BOOLEAN;
    signal reg_901 : STD_LOGIC_VECTOR (29 downto 0);
    signal reg_905 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_block_state10_pp0_stage9_iter0 : BOOLEAN;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_block_state13_pp0_stage12_iter0 : BOOLEAN;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_block_state16_pp0_stage15_iter0 : BOOLEAN;
    signal reg_909 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_1_reg_2524 : STD_LOGIC_VECTOR (29 downto 0);
    signal codebook_V_0_load_reg_2529 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_1_load_reg_2534 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_2_load_reg_2539 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_3_load_reg_2544 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_4_load_reg_2549 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_5_load_reg_2554 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_6_load_reg_2559 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_7_load_reg_2564 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_8_load_reg_2569 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_9_load_reg_2574 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_10_load_reg_2579 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_11_load_reg_2584 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_12_load_reg_2589 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_13_load_reg_2594 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_14_load_reg_2599 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_15_load_reg_2604 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_16_load_reg_2609 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_17_load_reg_2614 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_18_load_reg_2619 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_19_load_reg_2624 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_20_load_reg_2629 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_21_load_reg_2634 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_22_load_reg_2639 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_23_load_reg_2644 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_24_load_reg_2649 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_25_load_reg_2654 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_26_load_reg_2659 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_27_load_reg_2664 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_28_load_reg_2669 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_29_load_reg_2674 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_30_load_reg_2679 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_31_load_reg_2684 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_32_load_reg_2689 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_V_fu_986_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_reg_2694 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_992_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1171_reg_2741 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1001_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1171_1_reg_2746 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln4_reg_2761 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln717_1_reg_2766 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1010_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1171_2_reg_2771 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1018_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1171_3_reg_2776 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln717_2_reg_2791 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln717_3_reg_2796 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1080_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1171_4_reg_2801 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1088_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1171_5_reg_2806 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln717_4_reg_2821 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln717_5_reg_2826 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1150_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1171_6_reg_2831 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1158_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1171_7_reg_2836 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln717_6_reg_2851 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln717_7_reg_2856 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1220_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1171_8_reg_2861 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1228_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1171_9_reg_2866 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln717_8_reg_2881 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln717_9_reg_2886 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1290_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1171_10_reg_2891 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1298_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1171_11_reg_2896 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln717_s_reg_2911 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln717_10_reg_2916 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1360_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1171_12_reg_2921 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1368_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1171_13_reg_2926 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln717_11_reg_2941 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln717_12_reg_2946 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1430_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1171_14_reg_2951 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1438_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1171_15_reg_2956 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln717_13_reg_2971 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln717_14_reg_2976 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1500_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1171_16_reg_2981 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1508_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1171_17_reg_2986 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln717_15_reg_3001 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln717_16_reg_3006 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1570_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1171_18_reg_3011 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1578_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1171_19_reg_3016 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln717_17_reg_3031 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln717_18_reg_3036 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1640_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1171_20_reg_3041 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1648_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1171_21_reg_3046 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln717_19_reg_3061 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln717_20_reg_3066 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1710_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1171_22_reg_3071 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1718_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1171_23_reg_3076 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln717_21_reg_3091 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln717_22_reg_3096 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1780_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1171_24_reg_3101 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1788_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1171_25_reg_3106 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln717_23_reg_3121 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln717_24_reg_3126 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1850_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1171_26_reg_3131 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1858_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1171_27_reg_3136 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln717_25_reg_3151 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln717_26_reg_3156 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1920_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1171_28_reg_3161 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1928_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1171_29_reg_3166 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln717_27_reg_3181 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_block_state19_pp0_stage18_iter0 : BOOLEAN;
    signal trunc_ln717_28_reg_3186 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1990_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1171_30_reg_3191 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1998_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1171_31_reg_3196 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln717_29_reg_3206 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_block_state20_pp0_stage19_iter0 : BOOLEAN;
    signal trunc_ln717_30_reg_3211 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_2060_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1171_32_reg_3216 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln717_31_reg_3221 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_block_state21_pp0_stage20_iter0 : BOOLEAN;
    signal p_cast_fu_976_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_cast_fu_933_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_fu_168 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_k_1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln43_fu_927_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_block_state22_pp0_stage21_iter0 : BOOLEAN;
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_block_state23_pp0_stage22_iter0 : BOOLEAN;
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_block_state24_pp0_stage23_iter0 : BOOLEAN;
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_block_state25_pp0_stage24_iter0 : BOOLEAN;
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_block_state26_pp0_stage25_iter0 : BOOLEAN;
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_block_state27_pp0_stage26_iter0 : BOOLEAN;
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_block_state28_pp0_stage27_iter0 : BOOLEAN;
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_block_state29_pp0_stage28_iter0 : BOOLEAN;
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_block_state30_pp0_stage29_iter0 : BOOLEAN;
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_block_state31_pp0_stage30_iter0 : BOOLEAN;
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_block_state32_pp0_stage31_iter0 : BOOLEAN;
    signal empty_21_fu_970_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_992_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1001_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1010_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1018_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln_fu_1023_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln1245_fu_1031_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln1245_fu_1034_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal shl_ln737_1_fu_1050_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln1245_1_fu_1058_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln1245_1_fu_1061_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_1080_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1088_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln737_2_fu_1093_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln1245_2_fu_1101_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln1245_2_fu_1104_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal shl_ln737_3_fu_1120_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln1245_3_fu_1128_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln1245_3_fu_1131_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_1150_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1158_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln737_4_fu_1163_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln1245_4_fu_1171_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln1245_4_fu_1174_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal shl_ln737_5_fu_1190_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln1245_5_fu_1198_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln1245_5_fu_1201_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_1220_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1228_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln737_6_fu_1233_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln1245_6_fu_1241_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln1245_6_fu_1244_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal shl_ln737_7_fu_1260_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln1245_7_fu_1268_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln1245_7_fu_1271_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_1290_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1298_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln737_8_fu_1303_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln1245_8_fu_1311_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln1245_8_fu_1314_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal shl_ln737_9_fu_1330_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln1245_9_fu_1338_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln1245_9_fu_1341_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_1360_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1368_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln737_s_fu_1373_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln1245_10_fu_1381_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln1245_10_fu_1384_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal shl_ln737_10_fu_1400_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln1245_11_fu_1408_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln1245_11_fu_1411_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_1430_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1438_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln737_11_fu_1443_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln1245_12_fu_1451_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln1245_12_fu_1454_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal shl_ln737_12_fu_1470_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln1245_13_fu_1478_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln1245_13_fu_1481_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_1500_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1508_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln737_13_fu_1513_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln1245_14_fu_1521_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln1245_14_fu_1524_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal shl_ln737_14_fu_1540_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln1245_15_fu_1548_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln1245_15_fu_1551_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_1570_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1578_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln737_15_fu_1583_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln1245_16_fu_1591_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln1245_16_fu_1594_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal shl_ln737_16_fu_1610_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln1245_17_fu_1618_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln1245_17_fu_1621_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_1640_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1648_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln737_17_fu_1653_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln1245_18_fu_1661_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln1245_18_fu_1664_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal shl_ln737_18_fu_1680_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln1245_19_fu_1688_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln1245_19_fu_1691_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_1710_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1718_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln737_19_fu_1723_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln1245_20_fu_1731_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln1245_20_fu_1734_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal shl_ln737_20_fu_1750_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln1245_21_fu_1758_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln1245_21_fu_1761_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_1780_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1788_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln737_21_fu_1793_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln1245_22_fu_1801_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln1245_22_fu_1804_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal shl_ln737_22_fu_1820_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln1245_23_fu_1828_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln1245_23_fu_1831_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_1850_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1858_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln737_23_fu_1863_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln1245_24_fu_1871_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln1245_24_fu_1874_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal shl_ln737_24_fu_1890_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln1245_25_fu_1898_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln1245_25_fu_1901_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_1920_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1928_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln737_25_fu_1933_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln1245_26_fu_1941_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln1245_26_fu_1944_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal shl_ln737_26_fu_1960_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln1245_27_fu_1968_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln1245_27_fu_1971_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_1990_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_1998_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln737_27_fu_2003_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln1245_28_fu_2011_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln1245_28_fu_2014_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal shl_ln737_28_fu_2030_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln1245_29_fu_2038_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln1245_29_fu_2041_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_2060_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal shl_ln737_29_fu_2065_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln1245_30_fu_2073_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln1245_30_fu_2076_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal shl_ln737_30_fu_2092_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln1245_31_fu_2100_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln1245_31_fu_2103_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal shl_ln737_31_fu_2119_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal sext_ln1245_32_fu_2127_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal add_ln1245_32_fu_2130_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component correlator_mul_30s_2s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (29 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_7 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_8 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_9 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_10 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_11 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_12 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_13 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_14 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_15 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_16 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_17 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_18 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_19 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_20 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_21 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_22 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_23 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_24 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_25 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_26 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_27 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_28 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_29 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_30 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_31 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_32 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component correlator_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    codebook_V_0_U : component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_0
    generic map (
        DataWidth => 2,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_0_address0,
        ce0 => codebook_V_0_ce0,
        q0 => codebook_V_0_q0);

    codebook_V_1_U : component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_1
    generic map (
        DataWidth => 2,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_1_address0,
        ce0 => codebook_V_1_ce0,
        q0 => codebook_V_1_q0);

    codebook_V_2_U : component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_2
    generic map (
        DataWidth => 2,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_2_address0,
        ce0 => codebook_V_2_ce0,
        q0 => codebook_V_2_q0);

    codebook_V_3_U : component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_3
    generic map (
        DataWidth => 2,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_3_address0,
        ce0 => codebook_V_3_ce0,
        q0 => codebook_V_3_q0);

    codebook_V_4_U : component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_4
    generic map (
        DataWidth => 2,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_4_address0,
        ce0 => codebook_V_4_ce0,
        q0 => codebook_V_4_q0);

    codebook_V_5_U : component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_5
    generic map (
        DataWidth => 2,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_5_address0,
        ce0 => codebook_V_5_ce0,
        q0 => codebook_V_5_q0);

    codebook_V_6_U : component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_6
    generic map (
        DataWidth => 2,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_6_address0,
        ce0 => codebook_V_6_ce0,
        q0 => codebook_V_6_q0);

    codebook_V_7_U : component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_7
    generic map (
        DataWidth => 2,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_7_address0,
        ce0 => codebook_V_7_ce0,
        q0 => codebook_V_7_q0);

    codebook_V_8_U : component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_8
    generic map (
        DataWidth => 2,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_8_address0,
        ce0 => codebook_V_8_ce0,
        q0 => codebook_V_8_q0);

    codebook_V_9_U : component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_9
    generic map (
        DataWidth => 2,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_9_address0,
        ce0 => codebook_V_9_ce0,
        q0 => codebook_V_9_q0);

    codebook_V_10_U : component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_10
    generic map (
        DataWidth => 2,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_10_address0,
        ce0 => codebook_V_10_ce0,
        q0 => codebook_V_10_q0);

    codebook_V_11_U : component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_11
    generic map (
        DataWidth => 2,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_11_address0,
        ce0 => codebook_V_11_ce0,
        q0 => codebook_V_11_q0);

    codebook_V_12_U : component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_12
    generic map (
        DataWidth => 2,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_12_address0,
        ce0 => codebook_V_12_ce0,
        q0 => codebook_V_12_q0);

    codebook_V_13_U : component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_13
    generic map (
        DataWidth => 2,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_13_address0,
        ce0 => codebook_V_13_ce0,
        q0 => codebook_V_13_q0);

    codebook_V_14_U : component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_14
    generic map (
        DataWidth => 2,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_14_address0,
        ce0 => codebook_V_14_ce0,
        q0 => codebook_V_14_q0);

    codebook_V_15_U : component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_15
    generic map (
        DataWidth => 2,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_15_address0,
        ce0 => codebook_V_15_ce0,
        q0 => codebook_V_15_q0);

    codebook_V_16_U : component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_16
    generic map (
        DataWidth => 2,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_16_address0,
        ce0 => codebook_V_16_ce0,
        q0 => codebook_V_16_q0);

    codebook_V_17_U : component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_17
    generic map (
        DataWidth => 2,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_17_address0,
        ce0 => codebook_V_17_ce0,
        q0 => codebook_V_17_q0);

    codebook_V_18_U : component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_18
    generic map (
        DataWidth => 2,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_18_address0,
        ce0 => codebook_V_18_ce0,
        q0 => codebook_V_18_q0);

    codebook_V_19_U : component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_19
    generic map (
        DataWidth => 2,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_19_address0,
        ce0 => codebook_V_19_ce0,
        q0 => codebook_V_19_q0);

    codebook_V_20_U : component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_20
    generic map (
        DataWidth => 2,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_20_address0,
        ce0 => codebook_V_20_ce0,
        q0 => codebook_V_20_q0);

    codebook_V_21_U : component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_21
    generic map (
        DataWidth => 2,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_21_address0,
        ce0 => codebook_V_21_ce0,
        q0 => codebook_V_21_q0);

    codebook_V_22_U : component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_22
    generic map (
        DataWidth => 2,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_22_address0,
        ce0 => codebook_V_22_ce0,
        q0 => codebook_V_22_q0);

    codebook_V_23_U : component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_23
    generic map (
        DataWidth => 2,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_23_address0,
        ce0 => codebook_V_23_ce0,
        q0 => codebook_V_23_q0);

    codebook_V_24_U : component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_24
    generic map (
        DataWidth => 2,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_24_address0,
        ce0 => codebook_V_24_ce0,
        q0 => codebook_V_24_q0);

    codebook_V_25_U : component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_25
    generic map (
        DataWidth => 2,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_25_address0,
        ce0 => codebook_V_25_ce0,
        q0 => codebook_V_25_q0);

    codebook_V_26_U : component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_26
    generic map (
        DataWidth => 2,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_26_address0,
        ce0 => codebook_V_26_ce0,
        q0 => codebook_V_26_q0);

    codebook_V_27_U : component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_27
    generic map (
        DataWidth => 2,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_27_address0,
        ce0 => codebook_V_27_ce0,
        q0 => codebook_V_27_q0);

    codebook_V_28_U : component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_28
    generic map (
        DataWidth => 2,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_28_address0,
        ce0 => codebook_V_28_ce0,
        q0 => codebook_V_28_q0);

    codebook_V_29_U : component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_29
    generic map (
        DataWidth => 2,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_29_address0,
        ce0 => codebook_V_29_ce0,
        q0 => codebook_V_29_q0);

    codebook_V_30_U : component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_30
    generic map (
        DataWidth => 2,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_30_address0,
        ce0 => codebook_V_30_ce0,
        q0 => codebook_V_30_q0);

    codebook_V_31_U : component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_31
    generic map (
        DataWidth => 2,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_31_address0,
        ce0 => codebook_V_31_ce0,
        q0 => codebook_V_31_q0);

    codebook_V_32_U : component correlator_correlator_Pipeline_MULTIPLE_CORRELATORS_codebook_V_32
    generic map (
        DataWidth => 2,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_32_address0,
        ce0 => codebook_V_32_ce0,
        q0 => codebook_V_32_q0);

    mul_30s_2s_32_2_1_U2 : component correlator_mul_30s_2s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_992_p0,
        din1 => codebook_V_0_load_reg_2529,
        ce => ap_const_logic_1,
        dout => grp_fu_992_p2);

    mul_30s_2s_32_2_1_U3 : component correlator_mul_30s_2s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1001_p0,
        din1 => codebook_V_1_load_reg_2534,
        ce => ap_const_logic_1,
        dout => grp_fu_1001_p2);

    mul_30s_2s_32_2_1_U4 : component correlator_mul_30s_2s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1010_p0,
        din1 => codebook_V_2_load_reg_2539,
        ce => ap_const_logic_1,
        dout => grp_fu_1010_p2);

    mul_30s_2s_32_2_1_U5 : component correlator_mul_30s_2s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1018_p0,
        din1 => codebook_V_3_load_reg_2544,
        ce => ap_const_logic_1,
        dout => grp_fu_1018_p2);

    mul_30s_2s_32_2_1_U6 : component correlator_mul_30s_2s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1080_p0,
        din1 => codebook_V_4_load_reg_2549,
        ce => ap_const_logic_1,
        dout => grp_fu_1080_p2);

    mul_30s_2s_32_2_1_U7 : component correlator_mul_30s_2s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1088_p0,
        din1 => codebook_V_5_load_reg_2554,
        ce => ap_const_logic_1,
        dout => grp_fu_1088_p2);

    mul_30s_2s_32_2_1_U8 : component correlator_mul_30s_2s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1150_p0,
        din1 => codebook_V_6_load_reg_2559,
        ce => ap_const_logic_1,
        dout => grp_fu_1150_p2);

    mul_30s_2s_32_2_1_U9 : component correlator_mul_30s_2s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1158_p0,
        din1 => codebook_V_7_load_reg_2564,
        ce => ap_const_logic_1,
        dout => grp_fu_1158_p2);

    mul_30s_2s_32_2_1_U10 : component correlator_mul_30s_2s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1220_p0,
        din1 => codebook_V_8_load_reg_2569,
        ce => ap_const_logic_1,
        dout => grp_fu_1220_p2);

    mul_30s_2s_32_2_1_U11 : component correlator_mul_30s_2s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1228_p0,
        din1 => codebook_V_9_load_reg_2574,
        ce => ap_const_logic_1,
        dout => grp_fu_1228_p2);

    mul_30s_2s_32_2_1_U12 : component correlator_mul_30s_2s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1290_p0,
        din1 => codebook_V_10_load_reg_2579,
        ce => ap_const_logic_1,
        dout => grp_fu_1290_p2);

    mul_30s_2s_32_2_1_U13 : component correlator_mul_30s_2s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1298_p0,
        din1 => codebook_V_11_load_reg_2584,
        ce => ap_const_logic_1,
        dout => grp_fu_1298_p2);

    mul_30s_2s_32_2_1_U14 : component correlator_mul_30s_2s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1360_p0,
        din1 => codebook_V_12_load_reg_2589,
        ce => ap_const_logic_1,
        dout => grp_fu_1360_p2);

    mul_30s_2s_32_2_1_U15 : component correlator_mul_30s_2s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1368_p0,
        din1 => codebook_V_13_load_reg_2594,
        ce => ap_const_logic_1,
        dout => grp_fu_1368_p2);

    mul_30s_2s_32_2_1_U16 : component correlator_mul_30s_2s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1430_p0,
        din1 => codebook_V_14_load_reg_2599,
        ce => ap_const_logic_1,
        dout => grp_fu_1430_p2);

    mul_30s_2s_32_2_1_U17 : component correlator_mul_30s_2s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1438_p0,
        din1 => codebook_V_15_load_reg_2604,
        ce => ap_const_logic_1,
        dout => grp_fu_1438_p2);

    mul_30s_2s_32_2_1_U18 : component correlator_mul_30s_2s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1500_p0,
        din1 => codebook_V_16_load_reg_2609,
        ce => ap_const_logic_1,
        dout => grp_fu_1500_p2);

    mul_30s_2s_32_2_1_U19 : component correlator_mul_30s_2s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1508_p0,
        din1 => codebook_V_17_load_reg_2614,
        ce => ap_const_logic_1,
        dout => grp_fu_1508_p2);

    mul_30s_2s_32_2_1_U20 : component correlator_mul_30s_2s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1570_p0,
        din1 => codebook_V_18_load_reg_2619,
        ce => ap_const_logic_1,
        dout => grp_fu_1570_p2);

    mul_30s_2s_32_2_1_U21 : component correlator_mul_30s_2s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1578_p0,
        din1 => codebook_V_19_load_reg_2624,
        ce => ap_const_logic_1,
        dout => grp_fu_1578_p2);

    mul_30s_2s_32_2_1_U22 : component correlator_mul_30s_2s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1640_p0,
        din1 => codebook_V_20_load_reg_2629,
        ce => ap_const_logic_1,
        dout => grp_fu_1640_p2);

    mul_30s_2s_32_2_1_U23 : component correlator_mul_30s_2s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1648_p0,
        din1 => codebook_V_21_load_reg_2634,
        ce => ap_const_logic_1,
        dout => grp_fu_1648_p2);

    mul_30s_2s_32_2_1_U24 : component correlator_mul_30s_2s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1710_p0,
        din1 => codebook_V_22_load_reg_2639,
        ce => ap_const_logic_1,
        dout => grp_fu_1710_p2);

    mul_30s_2s_32_2_1_U25 : component correlator_mul_30s_2s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1718_p0,
        din1 => codebook_V_23_load_reg_2644,
        ce => ap_const_logic_1,
        dout => grp_fu_1718_p2);

    mul_30s_2s_32_2_1_U26 : component correlator_mul_30s_2s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1780_p0,
        din1 => codebook_V_24_load_reg_2649,
        ce => ap_const_logic_1,
        dout => grp_fu_1780_p2);

    mul_30s_2s_32_2_1_U27 : component correlator_mul_30s_2s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1788_p0,
        din1 => codebook_V_25_load_reg_2654,
        ce => ap_const_logic_1,
        dout => grp_fu_1788_p2);

    mul_30s_2s_32_2_1_U28 : component correlator_mul_30s_2s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1850_p0,
        din1 => codebook_V_26_load_reg_2659,
        ce => ap_const_logic_1,
        dout => grp_fu_1850_p2);

    mul_30s_2s_32_2_1_U29 : component correlator_mul_30s_2s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1858_p0,
        din1 => codebook_V_27_load_reg_2664,
        ce => ap_const_logic_1,
        dout => grp_fu_1858_p2);

    mul_30s_2s_32_2_1_U30 : component correlator_mul_30s_2s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1920_p0,
        din1 => codebook_V_28_load_reg_2669,
        ce => ap_const_logic_1,
        dout => grp_fu_1920_p2);

    mul_30s_2s_32_2_1_U31 : component correlator_mul_30s_2s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1928_p0,
        din1 => codebook_V_29_load_reg_2674,
        ce => ap_const_logic_1,
        dout => grp_fu_1928_p2);

    mul_30s_2s_32_2_1_U32 : component correlator_mul_30s_2s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1990_p0,
        din1 => codebook_V_30_load_reg_2679,
        ce => ap_const_logic_1,
        dout => grp_fu_1990_p2);

    mul_30s_2s_32_2_1_U33 : component correlator_mul_30s_2s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1998_p0,
        din1 => codebook_V_31_load_reg_2684,
        ce => ap_const_logic_1,
        dout => grp_fu_1998_p2);

    mul_30s_2s_32_2_1_U34 : component correlator_mul_30s_2s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 30,
        din1_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_2060_p0,
        din1 => codebook_V_32_load_reg_2689,
        ce => ap_const_logic_1,
        dout => grp_fu_2060_p2);

    flow_control_loop_pipe_sequential_init_U : component correlator_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    k_fu_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then
                if ((icmp_ln43_fu_921_p2 = ap_const_lv1_0)) then 
                    k_fu_168 <= add_ln43_fu_927_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_168 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                codebook_V_0_load_reg_2529 <= codebook_V_0_q0;
                codebook_V_10_load_reg_2579 <= codebook_V_10_q0;
                codebook_V_11_load_reg_2584 <= codebook_V_11_q0;
                codebook_V_12_load_reg_2589 <= codebook_V_12_q0;
                codebook_V_13_load_reg_2594 <= codebook_V_13_q0;
                codebook_V_14_load_reg_2599 <= codebook_V_14_q0;
                codebook_V_15_load_reg_2604 <= codebook_V_15_q0;
                codebook_V_16_load_reg_2609 <= codebook_V_16_q0;
                codebook_V_17_load_reg_2614 <= codebook_V_17_q0;
                codebook_V_18_load_reg_2619 <= codebook_V_18_q0;
                codebook_V_19_load_reg_2624 <= codebook_V_19_q0;
                codebook_V_1_load_reg_2534 <= codebook_V_1_q0;
                codebook_V_20_load_reg_2629 <= codebook_V_20_q0;
                codebook_V_21_load_reg_2634 <= codebook_V_21_q0;
                codebook_V_22_load_reg_2639 <= codebook_V_22_q0;
                codebook_V_23_load_reg_2644 <= codebook_V_23_q0;
                codebook_V_24_load_reg_2649 <= codebook_V_24_q0;
                codebook_V_25_load_reg_2654 <= codebook_V_25_q0;
                codebook_V_26_load_reg_2659 <= codebook_V_26_q0;
                codebook_V_27_load_reg_2664 <= codebook_V_27_q0;
                codebook_V_28_load_reg_2669 <= codebook_V_28_q0;
                codebook_V_29_load_reg_2674 <= codebook_V_29_q0;
                codebook_V_2_load_reg_2539 <= codebook_V_2_q0;
                codebook_V_30_load_reg_2679 <= codebook_V_30_q0;
                codebook_V_31_load_reg_2684 <= codebook_V_31_q0;
                codebook_V_32_load_reg_2689 <= codebook_V_32_q0;
                codebook_V_3_load_reg_2544 <= codebook_V_3_q0;
                codebook_V_4_load_reg_2549 <= codebook_V_4_q0;
                codebook_V_5_load_reg_2554 <= codebook_V_5_q0;
                codebook_V_6_load_reg_2559 <= codebook_V_6_q0;
                codebook_V_7_load_reg_2564 <= codebook_V_7_q0;
                codebook_V_8_load_reg_2569 <= codebook_V_8_q0;
                codebook_V_9_load_reg_2574 <= codebook_V_9_q0;
                r_V_1_reg_2524 <= temp_input_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                mul_ln1171_10_reg_2891 <= grp_fu_1290_p2;
                mul_ln1171_11_reg_2896 <= grp_fu_1298_p2;
                trunc_ln717_8_reg_2881 <= add_ln1245_8_fu_1314_p2(34 downto 5);
                trunc_ln717_9_reg_2886 <= add_ln1245_9_fu_1341_p2(34 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                mul_ln1171_12_reg_2921 <= grp_fu_1360_p2;
                mul_ln1171_13_reg_2926 <= grp_fu_1368_p2;
                trunc_ln717_10_reg_2916 <= add_ln1245_11_fu_1411_p2(34 downto 5);
                trunc_ln717_s_reg_2911 <= add_ln1245_10_fu_1384_p2(34 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                mul_ln1171_14_reg_2951 <= grp_fu_1430_p2;
                mul_ln1171_15_reg_2956 <= grp_fu_1438_p2;
                trunc_ln717_11_reg_2941 <= add_ln1245_12_fu_1454_p2(34 downto 5);
                trunc_ln717_12_reg_2946 <= add_ln1245_13_fu_1481_p2(34 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                mul_ln1171_16_reg_2981 <= grp_fu_1500_p2;
                mul_ln1171_17_reg_2986 <= grp_fu_1508_p2;
                trunc_ln717_13_reg_2971 <= add_ln1245_14_fu_1524_p2(34 downto 5);
                trunc_ln717_14_reg_2976 <= add_ln1245_15_fu_1551_p2(34 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                mul_ln1171_18_reg_3011 <= grp_fu_1570_p2;
                mul_ln1171_19_reg_3016 <= grp_fu_1578_p2;
                trunc_ln717_15_reg_3001 <= add_ln1245_16_fu_1594_p2(34 downto 5);
                trunc_ln717_16_reg_3006 <= add_ln1245_17_fu_1621_p2(34 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                mul_ln1171_1_reg_2746 <= grp_fu_1001_p2;
                mul_ln1171_reg_2741 <= grp_fu_992_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                mul_ln1171_20_reg_3041 <= grp_fu_1640_p2;
                mul_ln1171_21_reg_3046 <= grp_fu_1648_p2;
                trunc_ln717_17_reg_3031 <= add_ln1245_18_fu_1664_p2(34 downto 5);
                trunc_ln717_18_reg_3036 <= add_ln1245_19_fu_1691_p2(34 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                mul_ln1171_22_reg_3071 <= grp_fu_1710_p2;
                mul_ln1171_23_reg_3076 <= grp_fu_1718_p2;
                trunc_ln717_19_reg_3061 <= add_ln1245_20_fu_1734_p2(34 downto 5);
                trunc_ln717_20_reg_3066 <= add_ln1245_21_fu_1761_p2(34 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                mul_ln1171_24_reg_3101 <= grp_fu_1780_p2;
                mul_ln1171_25_reg_3106 <= grp_fu_1788_p2;
                trunc_ln717_21_reg_3091 <= add_ln1245_22_fu_1804_p2(34 downto 5);
                trunc_ln717_22_reg_3096 <= add_ln1245_23_fu_1831_p2(34 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                mul_ln1171_26_reg_3131 <= grp_fu_1850_p2;
                mul_ln1171_27_reg_3136 <= grp_fu_1858_p2;
                trunc_ln717_23_reg_3121 <= add_ln1245_24_fu_1874_p2(34 downto 5);
                trunc_ln717_24_reg_3126 <= add_ln1245_25_fu_1901_p2(34 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                mul_ln1171_28_reg_3161 <= grp_fu_1920_p2;
                mul_ln1171_29_reg_3166 <= grp_fu_1928_p2;
                trunc_ln717_25_reg_3151 <= add_ln1245_26_fu_1944_p2(34 downto 5);
                trunc_ln717_26_reg_3156 <= add_ln1245_27_fu_1971_p2(34 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                mul_ln1171_2_reg_2771 <= grp_fu_1010_p2;
                mul_ln1171_3_reg_2776 <= grp_fu_1018_p2;
                trunc_ln4_reg_2761 <= add_ln1245_fu_1034_p2(34 downto 5);
                trunc_ln717_1_reg_2766 <= add_ln1245_1_fu_1061_p2(34 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                mul_ln1171_30_reg_3191 <= grp_fu_1990_p2;
                mul_ln1171_31_reg_3196 <= grp_fu_1998_p2;
                trunc_ln717_27_reg_3181 <= add_ln1245_28_fu_2014_p2(34 downto 5);
                trunc_ln717_28_reg_3186 <= add_ln1245_29_fu_2041_p2(34 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                mul_ln1171_32_reg_3216 <= grp_fu_2060_p2;
                trunc_ln717_29_reg_3206 <= add_ln1245_30_fu_2076_p2(34 downto 5);
                trunc_ln717_30_reg_3211 <= add_ln1245_31_fu_2103_p2(34 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                mul_ln1171_4_reg_2801 <= grp_fu_1080_p2;
                mul_ln1171_5_reg_2806 <= grp_fu_1088_p2;
                trunc_ln717_2_reg_2791 <= add_ln1245_2_fu_1104_p2(34 downto 5);
                trunc_ln717_3_reg_2796 <= add_ln1245_3_fu_1131_p2(34 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                mul_ln1171_6_reg_2831 <= grp_fu_1150_p2;
                mul_ln1171_7_reg_2836 <= grp_fu_1158_p2;
                trunc_ln717_4_reg_2821 <= add_ln1245_4_fu_1174_p2(34 downto 5);
                trunc_ln717_5_reg_2826 <= add_ln1245_5_fu_1201_p2(34 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                mul_ln1171_8_reg_2861 <= grp_fu_1220_p2;
                mul_ln1171_9_reg_2866 <= grp_fu_1228_p2;
                trunc_ln717_6_reg_2851 <= add_ln1245_6_fu_1244_p2(34 downto 5);
                trunc_ln717_7_reg_2856 <= add_ln1245_7_fu_1271_p2(34 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                r_V_reg_2694 <= r_V_fu_986_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_889 <= acc_V_q1;
                reg_893 <= acc_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_897 <= acc_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3))) then
                reg_901 <= acc_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_905 <= acc_V_q1;
                reg_909 <= acc_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                trunc_ln717_31_reg_3221 <= add_ln1245_32_fu_2130_p2(34 downto 5);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, icmp_ln43_fu_921_p2, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln43_fu_921_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    acc_V_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln43_fu_921_p2, ap_CS_fsm_state33, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            acc_V_address0 <= ap_const_lv64_20(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            acc_V_address0 <= ap_const_lv64_1E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            acc_V_address0 <= ap_const_lv64_1C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            acc_V_address0 <= ap_const_lv64_1A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            acc_V_address0 <= ap_const_lv64_18(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            acc_V_address0 <= ap_const_lv64_16(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            acc_V_address0 <= ap_const_lv64_14(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            acc_V_address0 <= ap_const_lv64_12(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            acc_V_address0 <= ap_const_lv64_10(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            acc_V_address0 <= ap_const_lv64_E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            acc_V_address0 <= ap_const_lv64_C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            acc_V_address0 <= ap_const_lv64_A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            acc_V_address0 <= ap_const_lv64_8(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            acc_V_address0 <= ap_const_lv64_6(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            acc_V_address0 <= ap_const_lv64_4(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            acc_V_address0 <= ap_const_lv64_2(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            acc_V_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            acc_V_address0 <= ap_const_lv64_1F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            acc_V_address0 <= ap_const_lv64_1D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            acc_V_address0 <= ap_const_lv64_1B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            acc_V_address0 <= ap_const_lv64_19(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            acc_V_address0 <= ap_const_lv64_17(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            acc_V_address0 <= ap_const_lv64_15(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            acc_V_address0 <= ap_const_lv64_13(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            acc_V_address0 <= ap_const_lv64_11(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            acc_V_address0 <= ap_const_lv64_F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            acc_V_address0 <= ap_const_lv64_D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            acc_V_address0 <= ap_const_lv64_B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            acc_V_address0 <= ap_const_lv64_9(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            acc_V_address0 <= ap_const_lv64_7(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            acc_V_address0 <= ap_const_lv64_5(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            acc_V_address0 <= ap_const_lv64_3(6 - 1 downto 0);
        elsif (((icmp_ln43_fu_921_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            acc_V_address0 <= ap_const_lv64_1(6 - 1 downto 0);
        else 
            acc_V_address0 <= "XXXXXX";
        end if; 
    end process;


    acc_V_address1_assign_proc : process(ap_CS_fsm_state1, icmp_ln43_fu_921_p2, ap_CS_fsm_state33, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            acc_V_address1 <= ap_const_lv64_1F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            acc_V_address1 <= ap_const_lv64_1D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            acc_V_address1 <= ap_const_lv64_1B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            acc_V_address1 <= ap_const_lv64_19(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            acc_V_address1 <= ap_const_lv64_17(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            acc_V_address1 <= ap_const_lv64_15(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            acc_V_address1 <= ap_const_lv64_13(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            acc_V_address1 <= ap_const_lv64_11(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            acc_V_address1 <= ap_const_lv64_F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            acc_V_address1 <= ap_const_lv64_D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            acc_V_address1 <= ap_const_lv64_B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            acc_V_address1 <= ap_const_lv64_9(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            acc_V_address1 <= ap_const_lv64_7(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            acc_V_address1 <= ap_const_lv64_5(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            acc_V_address1 <= ap_const_lv64_3(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            acc_V_address1 <= ap_const_lv64_1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            acc_V_address1 <= ap_const_lv64_20(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            acc_V_address1 <= ap_const_lv64_1E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            acc_V_address1 <= ap_const_lv64_1C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            acc_V_address1 <= ap_const_lv64_1A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            acc_V_address1 <= ap_const_lv64_18(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            acc_V_address1 <= ap_const_lv64_16(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            acc_V_address1 <= ap_const_lv64_14(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            acc_V_address1 <= ap_const_lv64_12(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            acc_V_address1 <= ap_const_lv64_10(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            acc_V_address1 <= ap_const_lv64_E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            acc_V_address1 <= ap_const_lv64_C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            acc_V_address1 <= ap_const_lv64_A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            acc_V_address1 <= ap_const_lv64_8(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            acc_V_address1 <= ap_const_lv64_6(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            acc_V_address1 <= ap_const_lv64_4(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            acc_V_address1 <= ap_const_lv64_2(6 - 1 downto 0);
        elsif (((icmp_ln43_fu_921_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            acc_V_address1 <= ap_const_lv64_0(6 - 1 downto 0);
        else 
            acc_V_address1 <= "XXXXXX";
        end if; 
    end process;


    acc_V_ce0_assign_proc : process(ap_CS_fsm_state1, icmp_ln43_fu_921_p2, ap_CS_fsm_state33, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((icmp_ln43_fu_921_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1)))) then 
            acc_V_ce0 <= ap_const_logic_1;
        else 
            acc_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    acc_V_ce1_assign_proc : process(ap_CS_fsm_state1, icmp_ln43_fu_921_p2, ap_CS_fsm_state33, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state14, ap_CS_fsm_state17, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state12, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((icmp_ln43_fu_921_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1)))) then 
            acc_V_ce1 <= ap_const_logic_1;
        else 
            acc_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    acc_V_d0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state17, ap_CS_fsm_state18, trunc_ln4_reg_2761, trunc_ln717_2_reg_2791, trunc_ln717_4_reg_2821, trunc_ln717_6_reg_2851, trunc_ln717_8_reg_2881, trunc_ln717_s_reg_2911, trunc_ln717_11_reg_2941, trunc_ln717_13_reg_2971, trunc_ln717_15_reg_3001, trunc_ln717_17_reg_3031, trunc_ln717_19_reg_3061, trunc_ln717_21_reg_3091, trunc_ln717_23_reg_3121, trunc_ln717_25_reg_3151, trunc_ln717_27_reg_3181, ap_CS_fsm_state19, trunc_ln717_29_reg_3206, ap_CS_fsm_state20, trunc_ln717_31_reg_3221, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            acc_V_d0 <= trunc_ln717_31_reg_3221;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            acc_V_d0 <= trunc_ln717_29_reg_3206;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            acc_V_d0 <= trunc_ln717_27_reg_3181;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            acc_V_d0 <= trunc_ln717_25_reg_3151;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            acc_V_d0 <= trunc_ln717_23_reg_3121;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            acc_V_d0 <= trunc_ln717_21_reg_3091;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            acc_V_d0 <= trunc_ln717_19_reg_3061;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            acc_V_d0 <= trunc_ln717_17_reg_3031;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            acc_V_d0 <= trunc_ln717_15_reg_3001;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            acc_V_d0 <= trunc_ln717_13_reg_2971;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            acc_V_d0 <= trunc_ln717_11_reg_2941;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            acc_V_d0 <= trunc_ln717_s_reg_2911;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            acc_V_d0 <= trunc_ln717_8_reg_2881;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            acc_V_d0 <= trunc_ln717_6_reg_2851;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            acc_V_d0 <= trunc_ln717_4_reg_2821;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            acc_V_d0 <= trunc_ln717_2_reg_2791;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            acc_V_d0 <= trunc_ln4_reg_2761;
        else 
            acc_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    acc_V_d1_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state18, trunc_ln717_1_reg_2766, trunc_ln717_3_reg_2796, trunc_ln717_5_reg_2826, trunc_ln717_7_reg_2856, trunc_ln717_9_reg_2886, trunc_ln717_10_reg_2916, trunc_ln717_12_reg_2946, trunc_ln717_14_reg_2976, trunc_ln717_16_reg_3006, trunc_ln717_18_reg_3036, trunc_ln717_20_reg_3066, trunc_ln717_22_reg_3096, trunc_ln717_24_reg_3126, trunc_ln717_26_reg_3156, ap_CS_fsm_state19, trunc_ln717_28_reg_3186, ap_CS_fsm_state20, trunc_ln717_30_reg_3211, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            acc_V_d1 <= trunc_ln717_30_reg_3211;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            acc_V_d1 <= trunc_ln717_28_reg_3186;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            acc_V_d1 <= trunc_ln717_26_reg_3156;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            acc_V_d1 <= trunc_ln717_24_reg_3126;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            acc_V_d1 <= trunc_ln717_22_reg_3096;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            acc_V_d1 <= trunc_ln717_20_reg_3066;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            acc_V_d1 <= trunc_ln717_18_reg_3036;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            acc_V_d1 <= trunc_ln717_16_reg_3006;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            acc_V_d1 <= trunc_ln717_14_reg_2976;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            acc_V_d1 <= trunc_ln717_12_reg_2946;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            acc_V_d1 <= trunc_ln717_10_reg_2916;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            acc_V_d1 <= trunc_ln717_9_reg_2886;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            acc_V_d1 <= trunc_ln717_7_reg_2856;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            acc_V_d1 <= trunc_ln717_5_reg_2826;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            acc_V_d1 <= trunc_ln717_3_reg_2796;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            acc_V_d1 <= trunc_ln717_1_reg_2766;
        else 
            acc_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    acc_V_we0_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            acc_V_we0 <= ap_const_logic_1;
        else 
            acc_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    acc_V_we1_assign_proc : process(ap_CS_fsm_state33, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            acc_V_we1 <= ap_const_logic_1;
        else 
            acc_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln1245_10_fu_1384_p2 <= std_logic_vector(unsigned(shl_ln737_s_fu_1373_p3) + unsigned(sext_ln1245_10_fu_1381_p1));
    add_ln1245_11_fu_1411_p2 <= std_logic_vector(unsigned(shl_ln737_10_fu_1400_p3) + unsigned(sext_ln1245_11_fu_1408_p1));
    add_ln1245_12_fu_1454_p2 <= std_logic_vector(unsigned(shl_ln737_11_fu_1443_p3) + unsigned(sext_ln1245_12_fu_1451_p1));
    add_ln1245_13_fu_1481_p2 <= std_logic_vector(unsigned(shl_ln737_12_fu_1470_p3) + unsigned(sext_ln1245_13_fu_1478_p1));
    add_ln1245_14_fu_1524_p2 <= std_logic_vector(unsigned(shl_ln737_13_fu_1513_p3) + unsigned(sext_ln1245_14_fu_1521_p1));
    add_ln1245_15_fu_1551_p2 <= std_logic_vector(unsigned(shl_ln737_14_fu_1540_p3) + unsigned(sext_ln1245_15_fu_1548_p1));
    add_ln1245_16_fu_1594_p2 <= std_logic_vector(unsigned(shl_ln737_15_fu_1583_p3) + unsigned(sext_ln1245_16_fu_1591_p1));
    add_ln1245_17_fu_1621_p2 <= std_logic_vector(unsigned(shl_ln737_16_fu_1610_p3) + unsigned(sext_ln1245_17_fu_1618_p1));
    add_ln1245_18_fu_1664_p2 <= std_logic_vector(unsigned(shl_ln737_17_fu_1653_p3) + unsigned(sext_ln1245_18_fu_1661_p1));
    add_ln1245_19_fu_1691_p2 <= std_logic_vector(unsigned(shl_ln737_18_fu_1680_p3) + unsigned(sext_ln1245_19_fu_1688_p1));
    add_ln1245_1_fu_1061_p2 <= std_logic_vector(unsigned(shl_ln737_1_fu_1050_p3) + unsigned(sext_ln1245_1_fu_1058_p1));
    add_ln1245_20_fu_1734_p2 <= std_logic_vector(unsigned(shl_ln737_19_fu_1723_p3) + unsigned(sext_ln1245_20_fu_1731_p1));
    add_ln1245_21_fu_1761_p2 <= std_logic_vector(unsigned(shl_ln737_20_fu_1750_p3) + unsigned(sext_ln1245_21_fu_1758_p1));
    add_ln1245_22_fu_1804_p2 <= std_logic_vector(unsigned(shl_ln737_21_fu_1793_p3) + unsigned(sext_ln1245_22_fu_1801_p1));
    add_ln1245_23_fu_1831_p2 <= std_logic_vector(unsigned(shl_ln737_22_fu_1820_p3) + unsigned(sext_ln1245_23_fu_1828_p1));
    add_ln1245_24_fu_1874_p2 <= std_logic_vector(unsigned(shl_ln737_23_fu_1863_p3) + unsigned(sext_ln1245_24_fu_1871_p1));
    add_ln1245_25_fu_1901_p2 <= std_logic_vector(unsigned(shl_ln737_24_fu_1890_p3) + unsigned(sext_ln1245_25_fu_1898_p1));
    add_ln1245_26_fu_1944_p2 <= std_logic_vector(unsigned(shl_ln737_25_fu_1933_p3) + unsigned(sext_ln1245_26_fu_1941_p1));
    add_ln1245_27_fu_1971_p2 <= std_logic_vector(unsigned(shl_ln737_26_fu_1960_p3) + unsigned(sext_ln1245_27_fu_1968_p1));
    add_ln1245_28_fu_2014_p2 <= std_logic_vector(unsigned(shl_ln737_27_fu_2003_p3) + unsigned(sext_ln1245_28_fu_2011_p1));
    add_ln1245_29_fu_2041_p2 <= std_logic_vector(unsigned(shl_ln737_28_fu_2030_p3) + unsigned(sext_ln1245_29_fu_2038_p1));
    add_ln1245_2_fu_1104_p2 <= std_logic_vector(unsigned(shl_ln737_2_fu_1093_p3) + unsigned(sext_ln1245_2_fu_1101_p1));
    add_ln1245_30_fu_2076_p2 <= std_logic_vector(unsigned(shl_ln737_29_fu_2065_p3) + unsigned(sext_ln1245_30_fu_2073_p1));
    add_ln1245_31_fu_2103_p2 <= std_logic_vector(unsigned(shl_ln737_30_fu_2092_p3) + unsigned(sext_ln1245_31_fu_2100_p1));
    add_ln1245_32_fu_2130_p2 <= std_logic_vector(unsigned(shl_ln737_31_fu_2119_p3) + unsigned(sext_ln1245_32_fu_2127_p1));
    add_ln1245_3_fu_1131_p2 <= std_logic_vector(unsigned(shl_ln737_3_fu_1120_p3) + unsigned(sext_ln1245_3_fu_1128_p1));
    add_ln1245_4_fu_1174_p2 <= std_logic_vector(unsigned(shl_ln737_4_fu_1163_p3) + unsigned(sext_ln1245_4_fu_1171_p1));
    add_ln1245_5_fu_1201_p2 <= std_logic_vector(unsigned(shl_ln737_5_fu_1190_p3) + unsigned(sext_ln1245_5_fu_1198_p1));
    add_ln1245_6_fu_1244_p2 <= std_logic_vector(unsigned(shl_ln737_6_fu_1233_p3) + unsigned(sext_ln1245_6_fu_1241_p1));
    add_ln1245_7_fu_1271_p2 <= std_logic_vector(unsigned(shl_ln737_7_fu_1260_p3) + unsigned(sext_ln1245_7_fu_1268_p1));
    add_ln1245_8_fu_1314_p2 <= std_logic_vector(unsigned(shl_ln737_8_fu_1303_p3) + unsigned(sext_ln1245_8_fu_1311_p1));
    add_ln1245_9_fu_1341_p2 <= std_logic_vector(unsigned(shl_ln737_9_fu_1330_p3) + unsigned(sext_ln1245_9_fu_1338_p1));
    add_ln1245_fu_1034_p2 <= std_logic_vector(unsigned(shl_ln_fu_1023_p3) + unsigned(sext_ln1245_fu_1031_p1));
    add_ln43_fu_927_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_k_1) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;
        ap_block_state10_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage14_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage15_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage16_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage17_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage18_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;

        ap_block_state20_pp0_stage19_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage20_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage21_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage22_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage23_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage24_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage25_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage26_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage27_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage28_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage29_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage30_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage31_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage32_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln43_fu_921_p2, ap_start_int)
    begin
        if (((icmp_ln43_fu_921_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_k_1_assign_proc : process(ap_CS_fsm_state1, k_fu_168, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_k_1 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_k_1 <= k_fu_168;
        end if; 
    end process;

    codebook_V_0_address0 <= k_cast_fu_933_p1(5 - 1 downto 0);

    codebook_V_0_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            codebook_V_0_ce0 <= ap_const_logic_1;
        else 
            codebook_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_10_address0 <= k_cast_fu_933_p1(5 - 1 downto 0);

    codebook_V_10_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            codebook_V_10_ce0 <= ap_const_logic_1;
        else 
            codebook_V_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_11_address0 <= k_cast_fu_933_p1(5 - 1 downto 0);

    codebook_V_11_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            codebook_V_11_ce0 <= ap_const_logic_1;
        else 
            codebook_V_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_12_address0 <= k_cast_fu_933_p1(5 - 1 downto 0);

    codebook_V_12_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            codebook_V_12_ce0 <= ap_const_logic_1;
        else 
            codebook_V_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_13_address0 <= k_cast_fu_933_p1(5 - 1 downto 0);

    codebook_V_13_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            codebook_V_13_ce0 <= ap_const_logic_1;
        else 
            codebook_V_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_14_address0 <= k_cast_fu_933_p1(5 - 1 downto 0);

    codebook_V_14_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            codebook_V_14_ce0 <= ap_const_logic_1;
        else 
            codebook_V_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_15_address0 <= k_cast_fu_933_p1(5 - 1 downto 0);

    codebook_V_15_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            codebook_V_15_ce0 <= ap_const_logic_1;
        else 
            codebook_V_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_16_address0 <= k_cast_fu_933_p1(5 - 1 downto 0);

    codebook_V_16_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            codebook_V_16_ce0 <= ap_const_logic_1;
        else 
            codebook_V_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_17_address0 <= k_cast_fu_933_p1(5 - 1 downto 0);

    codebook_V_17_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            codebook_V_17_ce0 <= ap_const_logic_1;
        else 
            codebook_V_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_18_address0 <= k_cast_fu_933_p1(5 - 1 downto 0);

    codebook_V_18_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            codebook_V_18_ce0 <= ap_const_logic_1;
        else 
            codebook_V_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_19_address0 <= k_cast_fu_933_p1(5 - 1 downto 0);

    codebook_V_19_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            codebook_V_19_ce0 <= ap_const_logic_1;
        else 
            codebook_V_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_1_address0 <= k_cast_fu_933_p1(5 - 1 downto 0);

    codebook_V_1_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            codebook_V_1_ce0 <= ap_const_logic_1;
        else 
            codebook_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_20_address0 <= k_cast_fu_933_p1(5 - 1 downto 0);

    codebook_V_20_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            codebook_V_20_ce0 <= ap_const_logic_1;
        else 
            codebook_V_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_21_address0 <= k_cast_fu_933_p1(5 - 1 downto 0);

    codebook_V_21_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            codebook_V_21_ce0 <= ap_const_logic_1;
        else 
            codebook_V_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_22_address0 <= k_cast_fu_933_p1(5 - 1 downto 0);

    codebook_V_22_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            codebook_V_22_ce0 <= ap_const_logic_1;
        else 
            codebook_V_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_23_address0 <= k_cast_fu_933_p1(5 - 1 downto 0);

    codebook_V_23_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            codebook_V_23_ce0 <= ap_const_logic_1;
        else 
            codebook_V_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_24_address0 <= k_cast_fu_933_p1(5 - 1 downto 0);

    codebook_V_24_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            codebook_V_24_ce0 <= ap_const_logic_1;
        else 
            codebook_V_24_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_25_address0 <= k_cast_fu_933_p1(5 - 1 downto 0);

    codebook_V_25_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            codebook_V_25_ce0 <= ap_const_logic_1;
        else 
            codebook_V_25_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_26_address0 <= k_cast_fu_933_p1(5 - 1 downto 0);

    codebook_V_26_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            codebook_V_26_ce0 <= ap_const_logic_1;
        else 
            codebook_V_26_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_27_address0 <= k_cast_fu_933_p1(5 - 1 downto 0);

    codebook_V_27_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            codebook_V_27_ce0 <= ap_const_logic_1;
        else 
            codebook_V_27_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_28_address0 <= k_cast_fu_933_p1(5 - 1 downto 0);

    codebook_V_28_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            codebook_V_28_ce0 <= ap_const_logic_1;
        else 
            codebook_V_28_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_29_address0 <= k_cast_fu_933_p1(5 - 1 downto 0);

    codebook_V_29_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            codebook_V_29_ce0 <= ap_const_logic_1;
        else 
            codebook_V_29_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_2_address0 <= k_cast_fu_933_p1(5 - 1 downto 0);

    codebook_V_2_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            codebook_V_2_ce0 <= ap_const_logic_1;
        else 
            codebook_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_30_address0 <= k_cast_fu_933_p1(5 - 1 downto 0);

    codebook_V_30_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            codebook_V_30_ce0 <= ap_const_logic_1;
        else 
            codebook_V_30_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_31_address0 <= k_cast_fu_933_p1(5 - 1 downto 0);

    codebook_V_31_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            codebook_V_31_ce0 <= ap_const_logic_1;
        else 
            codebook_V_31_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_32_address0 <= k_cast_fu_933_p1(5 - 1 downto 0);

    codebook_V_32_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            codebook_V_32_ce0 <= ap_const_logic_1;
        else 
            codebook_V_32_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_3_address0 <= k_cast_fu_933_p1(5 - 1 downto 0);

    codebook_V_3_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            codebook_V_3_ce0 <= ap_const_logic_1;
        else 
            codebook_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_4_address0 <= k_cast_fu_933_p1(5 - 1 downto 0);

    codebook_V_4_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            codebook_V_4_ce0 <= ap_const_logic_1;
        else 
            codebook_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_5_address0 <= k_cast_fu_933_p1(5 - 1 downto 0);

    codebook_V_5_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            codebook_V_5_ce0 <= ap_const_logic_1;
        else 
            codebook_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_6_address0 <= k_cast_fu_933_p1(5 - 1 downto 0);

    codebook_V_6_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            codebook_V_6_ce0 <= ap_const_logic_1;
        else 
            codebook_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_7_address0 <= k_cast_fu_933_p1(5 - 1 downto 0);

    codebook_V_7_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            codebook_V_7_ce0 <= ap_const_logic_1;
        else 
            codebook_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_8_address0 <= k_cast_fu_933_p1(5 - 1 downto 0);

    codebook_V_8_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            codebook_V_8_ce0 <= ap_const_logic_1;
        else 
            codebook_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_9_address0 <= k_cast_fu_933_p1(5 - 1 downto 0);

    codebook_V_9_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            codebook_V_9_ce0 <= ap_const_logic_1;
        else 
            codebook_V_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_21_fu_970_p2 <= std_logic_vector(signed(ap_const_lv5_1E) - signed(ap_sig_allocacmp_k_1));
    grp_fu_1001_p0 <= r_V_fu_986_p1(30 - 1 downto 0);
    grp_fu_1010_p0 <= r_V_reg_2694(30 - 1 downto 0);
    grp_fu_1018_p0 <= r_V_reg_2694(30 - 1 downto 0);
    grp_fu_1080_p0 <= r_V_reg_2694(30 - 1 downto 0);
    grp_fu_1088_p0 <= r_V_reg_2694(30 - 1 downto 0);
    grp_fu_1150_p0 <= r_V_reg_2694(30 - 1 downto 0);
    grp_fu_1158_p0 <= r_V_reg_2694(30 - 1 downto 0);
    grp_fu_1220_p0 <= r_V_reg_2694(30 - 1 downto 0);
    grp_fu_1228_p0 <= r_V_reg_2694(30 - 1 downto 0);
    grp_fu_1290_p0 <= r_V_reg_2694(30 - 1 downto 0);
    grp_fu_1298_p0 <= r_V_reg_2694(30 - 1 downto 0);
    grp_fu_1360_p0 <= r_V_reg_2694(30 - 1 downto 0);
    grp_fu_1368_p0 <= r_V_reg_2694(30 - 1 downto 0);
    grp_fu_1430_p0 <= r_V_reg_2694(30 - 1 downto 0);
    grp_fu_1438_p0 <= r_V_reg_2694(30 - 1 downto 0);
    grp_fu_1500_p0 <= r_V_reg_2694(30 - 1 downto 0);
    grp_fu_1508_p0 <= r_V_reg_2694(30 - 1 downto 0);
    grp_fu_1570_p0 <= r_V_reg_2694(30 - 1 downto 0);
    grp_fu_1578_p0 <= r_V_reg_2694(30 - 1 downto 0);
    grp_fu_1640_p0 <= r_V_reg_2694(30 - 1 downto 0);
    grp_fu_1648_p0 <= r_V_reg_2694(30 - 1 downto 0);
    grp_fu_1710_p0 <= r_V_reg_2694(30 - 1 downto 0);
    grp_fu_1718_p0 <= r_V_reg_2694(30 - 1 downto 0);
    grp_fu_1780_p0 <= r_V_reg_2694(30 - 1 downto 0);
    grp_fu_1788_p0 <= r_V_reg_2694(30 - 1 downto 0);
    grp_fu_1850_p0 <= r_V_reg_2694(30 - 1 downto 0);
    grp_fu_1858_p0 <= r_V_reg_2694(30 - 1 downto 0);
    grp_fu_1920_p0 <= r_V_reg_2694(30 - 1 downto 0);
    grp_fu_1928_p0 <= r_V_reg_2694(30 - 1 downto 0);
    grp_fu_1990_p0 <= r_V_reg_2694(30 - 1 downto 0);
    grp_fu_1998_p0 <= r_V_reg_2694(30 - 1 downto 0);
    grp_fu_2060_p0 <= r_V_reg_2694(30 - 1 downto 0);
    grp_fu_992_p0 <= r_V_fu_986_p1(30 - 1 downto 0);
    icmp_ln43_fu_921_p2 <= "1" when (ap_sig_allocacmp_k_1 = ap_const_lv5_1F) else "0";
    k_cast_fu_933_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_k_1),64));
    p_cast_fu_976_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_21_fu_970_p2),64));
        r_V_fu_986_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_1_reg_2524),32));

        sext_ln1245_10_fu_1381_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1171_10_reg_2891),35));

        sext_ln1245_11_fu_1408_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1171_11_reg_2896),35));

        sext_ln1245_12_fu_1451_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1171_12_reg_2921),35));

        sext_ln1245_13_fu_1478_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1171_13_reg_2926),35));

        sext_ln1245_14_fu_1521_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1171_14_reg_2951),35));

        sext_ln1245_15_fu_1548_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1171_15_reg_2956),35));

        sext_ln1245_16_fu_1591_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1171_16_reg_2981),35));

        sext_ln1245_17_fu_1618_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1171_17_reg_2986),35));

        sext_ln1245_18_fu_1661_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1171_18_reg_3011),35));

        sext_ln1245_19_fu_1688_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1171_19_reg_3016),35));

        sext_ln1245_1_fu_1058_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1171_1_reg_2746),35));

        sext_ln1245_20_fu_1731_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1171_20_reg_3041),35));

        sext_ln1245_21_fu_1758_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1171_21_reg_3046),35));

        sext_ln1245_22_fu_1801_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1171_22_reg_3071),35));

        sext_ln1245_23_fu_1828_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1171_23_reg_3076),35));

        sext_ln1245_24_fu_1871_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1171_24_reg_3101),35));

        sext_ln1245_25_fu_1898_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1171_25_reg_3106),35));

        sext_ln1245_26_fu_1941_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1171_26_reg_3131),35));

        sext_ln1245_27_fu_1968_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1171_27_reg_3136),35));

        sext_ln1245_28_fu_2011_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1171_28_reg_3161),35));

        sext_ln1245_29_fu_2038_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1171_29_reg_3166),35));

        sext_ln1245_2_fu_1101_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1171_2_reg_2771),35));

        sext_ln1245_30_fu_2073_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1171_30_reg_3191),35));

        sext_ln1245_31_fu_2100_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1171_31_reg_3196),35));

        sext_ln1245_32_fu_2127_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1171_32_reg_3216),35));

        sext_ln1245_3_fu_1128_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1171_3_reg_2776),35));

        sext_ln1245_4_fu_1171_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1171_4_reg_2801),35));

        sext_ln1245_5_fu_1198_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1171_5_reg_2806),35));

        sext_ln1245_6_fu_1241_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1171_6_reg_2831),35));

        sext_ln1245_7_fu_1268_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1171_7_reg_2836),35));

        sext_ln1245_8_fu_1311_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1171_8_reg_2861),35));

        sext_ln1245_9_fu_1338_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1171_9_reg_2866),35));

        sext_ln1245_fu_1031_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1171_reg_2741),35));

    shl_ln737_10_fu_1400_p3 <= (reg_909 & ap_const_lv5_0);
    shl_ln737_11_fu_1443_p3 <= (reg_889 & ap_const_lv5_0);
    shl_ln737_12_fu_1470_p3 <= (reg_893 & ap_const_lv5_0);
    shl_ln737_13_fu_1513_p3 <= (reg_897 & ap_const_lv5_0);
    shl_ln737_14_fu_1540_p3 <= (reg_901 & ap_const_lv5_0);
    shl_ln737_15_fu_1583_p3 <= (reg_905 & ap_const_lv5_0);
    shl_ln737_16_fu_1610_p3 <= (reg_909 & ap_const_lv5_0);
    shl_ln737_17_fu_1653_p3 <= (reg_889 & ap_const_lv5_0);
    shl_ln737_18_fu_1680_p3 <= (reg_893 & ap_const_lv5_0);
    shl_ln737_19_fu_1723_p3 <= (reg_897 & ap_const_lv5_0);
    shl_ln737_1_fu_1050_p3 <= (reg_893 & ap_const_lv5_0);
    shl_ln737_20_fu_1750_p3 <= (reg_901 & ap_const_lv5_0);
    shl_ln737_21_fu_1793_p3 <= (reg_905 & ap_const_lv5_0);
    shl_ln737_22_fu_1820_p3 <= (reg_909 & ap_const_lv5_0);
    shl_ln737_23_fu_1863_p3 <= (reg_889 & ap_const_lv5_0);
    shl_ln737_24_fu_1890_p3 <= (reg_893 & ap_const_lv5_0);
    shl_ln737_25_fu_1933_p3 <= (reg_897 & ap_const_lv5_0);
    shl_ln737_26_fu_1960_p3 <= (reg_901 & ap_const_lv5_0);
    shl_ln737_27_fu_2003_p3 <= (reg_905 & ap_const_lv5_0);
    shl_ln737_28_fu_2030_p3 <= (reg_909 & ap_const_lv5_0);
    shl_ln737_29_fu_2065_p3 <= (reg_889 & ap_const_lv5_0);
    shl_ln737_2_fu_1093_p3 <= (reg_897 & ap_const_lv5_0);
    shl_ln737_30_fu_2092_p3 <= (reg_893 & ap_const_lv5_0);
    shl_ln737_31_fu_2119_p3 <= (reg_897 & ap_const_lv5_0);
    shl_ln737_3_fu_1120_p3 <= (reg_901 & ap_const_lv5_0);
    shl_ln737_4_fu_1163_p3 <= (reg_905 & ap_const_lv5_0);
    shl_ln737_5_fu_1190_p3 <= (reg_909 & ap_const_lv5_0);
    shl_ln737_6_fu_1233_p3 <= (reg_889 & ap_const_lv5_0);
    shl_ln737_7_fu_1260_p3 <= (reg_893 & ap_const_lv5_0);
    shl_ln737_8_fu_1303_p3 <= (reg_897 & ap_const_lv5_0);
    shl_ln737_9_fu_1330_p3 <= (reg_901 & ap_const_lv5_0);
    shl_ln737_s_fu_1373_p3 <= (reg_905 & ap_const_lv5_0);
    shl_ln_fu_1023_p3 <= (reg_889 & ap_const_lv5_0);
    temp_input_V_address0 <= p_cast_fu_976_p1(5 - 1 downto 0);

    temp_input_V_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start_int = ap_const_logic_1))) then 
            temp_input_V_ce0 <= ap_const_logic_1;
        else 
            temp_input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
