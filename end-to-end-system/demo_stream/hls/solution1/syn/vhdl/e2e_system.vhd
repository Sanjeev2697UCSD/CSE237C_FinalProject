-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity e2e_system is
generic (
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    output_signal_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_signal_TVALID : OUT STD_LOGIC;
    output_signal_TREADY : IN STD_LOGIC;
    output_signal_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_signal_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_signal_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    input_signal_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_signal_TVALID : IN STD_LOGIC;
    input_signal_TREADY : OUT STD_LOGIC;
    input_signal_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    input_signal_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    input_signal_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of e2e_system is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "e2e_system_e2e_system,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.299083,HLS_SYN_LAT=10032,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=19110,HLS_SYN_LUT=10386,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv9_154 : STD_LOGIC_VECTOR (8 downto 0) := "101010100";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_21 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv6_39 : STD_LOGIC_VECTOR (5 downto 0) := "111001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal output_data_keep_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal output_data_keep_V_ce0 : STD_LOGIC;
    signal output_data_keep_V_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_strb_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal output_data_strb_V_ce0 : STD_LOGIC;
    signal output_data_strb_V_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_data_last_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal output_data_last_V_ce0 : STD_LOGIC;
    signal output_data_last_V_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_signal_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal icmp_ln78_reg_1333 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp5_iter2 : STD_LOGIC := '0';
    signal icmp_ln78_reg_1333_pp5_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal input_signal_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln34_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_503 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_3_reg_525 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_4_reg_536 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_5_reg_547 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln34_fu_736_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal icmp_ln40_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_1185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state4_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal add_ln40_fu_790_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal i_1_cast_fu_796_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_cast_reg_1194 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln45_fu_816_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln61_fu_827_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_reg_1212 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state10_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_state13_pp3_stage0_iter3 : BOOLEAN;
    signal ap_block_state14_pp3_stage0_iter4 : BOOLEAN;
    signal ap_block_state15_pp3_stage0_iter5 : BOOLEAN;
    signal ap_block_state16_pp3_stage0_iter6 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal icmp_ln61_reg_1212_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_reg_1212_pp3_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_reg_1212_pp3_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_reg_1212_pp3_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_reg_1212_pp3_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln61_fu_833_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal i_5_cast_fu_839_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_5_cast_reg_1221 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_5_cast_reg_1221_pp3_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_5_cast_reg_1221_pp3_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_5_cast_reg_1221_pp3_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_5_cast_reg_1221_pp3_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_5_cast_reg_1221_pp3_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal correlators_output_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_reg_1231 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal p_Result_8_reg_1237 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_8_reg_1237_pp3_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_8_reg_1237_pp3_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_8_reg_1237_pp3_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln939_fu_852_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln939_reg_1243 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln935_fu_858_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_1248 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_1248_pp3_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_1248_pp3_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal m_5_fu_863_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_5_reg_1253 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_5_reg_1253_pp3_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_fu_886_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_reg_1260 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_reg_1260_pp3_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln947_fu_892_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln947_reg_1267 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln943_fu_896_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_1272 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_1272_pp3_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_1272_pp3_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lsb_index_fu_900_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_reg_1277 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln946_fu_915_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln946_reg_1283 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln949_fu_953_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln949_reg_1288 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln958_fu_959_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln958_reg_1293 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_6_reg_1299 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_6_reg_1304 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln63_fu_1115_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln63_reg_1309 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln66_fu_1122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_reg_1314 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_block_state18_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state19_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal add_ln66_fu_1128_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal i_6_cast_fu_1134_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_6_cast_reg_1323 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln78_fu_1139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state21_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state22_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_state22_io : BOOLEAN;
    signal ap_block_state23_pp5_stage0_iter2 : BOOLEAN;
    signal ap_block_state23_io : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal add_ln78_fu_1145_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal output_data_data_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_dataflow_parent_loop_proc_fu_558_ap_ready : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_558_ap_done : STD_LOGIC;
    signal ap_sync_grp_dataflow_parent_loop_proc_fu_558_ap_ready : STD_LOGIC;
    signal ap_sync_grp_dataflow_parent_loop_proc_fu_558_ap_done : STD_LOGIC;
    signal ap_block_state9_on_subcall_done : BOOLEAN;
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state10 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter6 : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state18 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state21 : STD_LOGIC;
    signal temp_data_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal temp_data_ce0 : STD_LOGIC;
    signal temp_data_we0 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_data_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal temp_data_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal temp_output_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal temp_output_ce0 : STD_LOGIC;
    signal temp_output_we0 : STD_LOGIC;
    signal temp_output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_data_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal input_data_ce0 : STD_LOGIC;
    signal input_data_we0 : STD_LOGIC;
    signal input_data_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_data_ce1 : STD_LOGIC;
    signal input_data_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal correlators_output_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal correlators_output_V_ce0 : STD_LOGIC;
    signal correlators_output_V_we0 : STD_LOGIC;
    signal correlators_output_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal correlators_output_V_ce1 : STD_LOGIC;
    signal correlators_output_V_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_data_data_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal output_data_data_V_ce0 : STD_LOGIC;
    signal output_data_data_V_we0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_558_input_data_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_558_input_data_ce0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_558_input_data_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_558_input_data_we0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_558_input_data_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_558_input_data_ce1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_558_input_data_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_558_input_data_we1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_ce0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_we0 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_ce1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_we1 : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_558_ap_start : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_558_ap_idle : STD_LOGIC;
    signal grp_dataflow_parent_loop_proc_fu_558_ap_continue : STD_LOGIC;
    signal i_reg_492 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_2_reg_514 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln45_fu_810_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_dataflow_parent_loop_proc_fu_558_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_sync_reg_grp_dataflow_parent_loop_proc_fu_558_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_dataflow_parent_loop_proc_fu_558_ap_done : STD_LOGIC := '0';
    signal zext_ln324_fu_758_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal i_2_cast_fu_822_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal i_7_cast_fu_1151_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp5_stage0_01001 : BOOLEAN;
    signal tmp_fu_763_p7 : STD_LOGIC_VECTOR (48 downto 0);
    signal trunc_ln42_fu_801_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_868_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_878_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_905_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln947_fu_921_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln947_fu_926_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln947_fu_930_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln949_fu_936_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln949_1_fu_942_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln949_fu_948_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_965_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_9_fu_978_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_fu_972_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln959_fu_990_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln959_1_fu_999_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln959_fu_995_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln958_fu_1014_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln958_fu_1019_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln946_fu_1008_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_1_fu_984_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln958_fu_1023_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln959_fu_1002_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln958_fu_1029_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln961_fu_1043_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_fu_1036_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_2_fu_1047_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln964_fu_1081_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln943_fu_1074_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_fu_1086_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln962_fu_1071_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_1092_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_10_fu_1099_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln743_fu_1111_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal regslice_both_output_signal_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal output_signal_TVALID_int_regslice : STD_LOGIC;
    signal output_signal_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_output_signal_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_signal_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal output_signal_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_output_signal_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_signal_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_signal_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal output_signal_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_output_signal_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_signal_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_signal_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_signal_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_signal_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_signal_V_data_V_U_apdone_blk : STD_LOGIC;
    signal input_signal_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal input_signal_TVALID_int_regslice : STD_LOGIC;
    signal input_signal_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_input_signal_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_signal_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal input_signal_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_input_signal_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_signal_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_signal_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal input_signal_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_input_signal_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_signal_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_input_signal_V_last_V_U_apdone_blk : STD_LOGIC;
    signal input_signal_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_input_signal_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_input_signal_V_last_V_U_ack_in : STD_LOGIC;

    component e2e_system_dataflow_parent_loop_proc IS
    port (
        input_data_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_data_ce0 : OUT STD_LOGIC;
        input_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_data_we0 : OUT STD_LOGIC;
        input_data_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_data_ce1 : OUT STD_LOGIC;
        input_data_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_data_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_data_we1 : OUT STD_LOGIC;
        correlators_output_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        correlators_output_V_ce0 : OUT STD_LOGIC;
        correlators_output_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        correlators_output_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        correlators_output_V_we0 : OUT STD_LOGIC;
        correlators_output_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        correlators_output_V_ce1 : OUT STD_LOGIC;
        correlators_output_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        correlators_output_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        correlators_output_V_we1 : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component e2e_system_output_data_keep_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component e2e_system_output_data_last_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component e2e_system_temp_data IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC_VECTOR (7 downto 0);
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component e2e_system_temp_output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component e2e_system_input_data IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component e2e_system_correlators_output_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component e2e_system_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    output_data_keep_V_U : component e2e_system_output_data_keep_V
    generic map (
        DataWidth => 1,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => output_data_keep_V_address0,
        ce0 => output_data_keep_V_ce0,
        q0 => output_data_keep_V_q0);

    output_data_strb_V_U : component e2e_system_output_data_keep_V
    generic map (
        DataWidth => 1,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => output_data_strb_V_address0,
        ce0 => output_data_strb_V_ce0,
        q0 => output_data_strb_V_q0);

    output_data_last_V_U : component e2e_system_output_data_last_V
    generic map (
        DataWidth => 1,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => output_data_last_V_address0,
        ce0 => output_data_last_V_ce0,
        q0 => output_data_last_V_q0);

    CTRL_s_axi_U : component e2e_system_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    temp_data_U : component e2e_system_temp_data
    generic map (
        DataWidth => 64,
        AddressRange => 340,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => temp_data_address0,
        ce0 => temp_data_ce0,
        we0 => temp_data_we0,
        d0 => temp_data_d0,
        q0 => temp_data_q0);

    temp_output_U : component e2e_system_temp_output
    generic map (
        DataWidth => 32,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => temp_output_address0,
        ce0 => temp_output_ce0,
        we0 => temp_output_we0,
        d0 => select_ln63_reg_1309,
        q0 => temp_output_q0);

    input_data_U : component e2e_system_input_data
    generic map (
        DataWidth => 32,
        AddressRange => 340,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => input_data_address0,
        ce0 => input_data_ce0,
        we0 => input_data_we0,
        d0 => input_data_d0,
        q0 => input_data_q0,
        address1 => grp_dataflow_parent_loop_proc_fu_558_input_data_address1,
        ce1 => input_data_ce1,
        q1 => input_data_q1);

    correlators_output_V_U : component e2e_system_correlators_output_V
    generic map (
        DataWidth => 32,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => correlators_output_V_address0,
        ce0 => correlators_output_V_ce0,
        we0 => correlators_output_V_we0,
        d0 => correlators_output_V_d0,
        q0 => correlators_output_V_q0,
        address1 => grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_address1,
        ce1 => correlators_output_V_ce1,
        q1 => correlators_output_V_q1);

    output_data_data_V_U : component e2e_system_temp_output
    generic map (
        DataWidth => 32,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => output_data_data_V_address0,
        ce0 => output_data_data_V_ce0,
        we0 => output_data_data_V_we0,
        d0 => temp_output_q0,
        q0 => output_data_data_V_q0);

    grp_dataflow_parent_loop_proc_fu_558 : component e2e_system_dataflow_parent_loop_proc
    port map (
        input_data_address0 => grp_dataflow_parent_loop_proc_fu_558_input_data_address0,
        input_data_ce0 => grp_dataflow_parent_loop_proc_fu_558_input_data_ce0,
        input_data_d0 => grp_dataflow_parent_loop_proc_fu_558_input_data_d0,
        input_data_q0 => input_data_q0,
        input_data_we0 => grp_dataflow_parent_loop_proc_fu_558_input_data_we0,
        input_data_address1 => grp_dataflow_parent_loop_proc_fu_558_input_data_address1,
        input_data_ce1 => grp_dataflow_parent_loop_proc_fu_558_input_data_ce1,
        input_data_d1 => grp_dataflow_parent_loop_proc_fu_558_input_data_d1,
        input_data_q1 => input_data_q1,
        input_data_we1 => grp_dataflow_parent_loop_proc_fu_558_input_data_we1,
        correlators_output_V_address0 => grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_address0,
        correlators_output_V_ce0 => grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_ce0,
        correlators_output_V_d0 => grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_d0,
        correlators_output_V_q0 => ap_const_lv32_0,
        correlators_output_V_we0 => grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_we0,
        correlators_output_V_address1 => grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_address1,
        correlators_output_V_ce1 => grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_ce1,
        correlators_output_V_d1 => grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_d1,
        correlators_output_V_q1 => correlators_output_V_q1,
        correlators_output_V_we1 => grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_we1,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_dataflow_parent_loop_proc_fu_558_ap_start,
        ap_done => grp_dataflow_parent_loop_proc_fu_558_ap_done,
        ap_ready => grp_dataflow_parent_loop_proc_fu_558_ap_ready,
        ap_idle => grp_dataflow_parent_loop_proc_fu_558_ap_idle,
        ap_continue => grp_dataflow_parent_loop_proc_fu_558_ap_continue);

    regslice_both_output_signal_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_data_data_V_q0,
        vld_in => output_signal_TVALID_int_regslice,
        ack_in => output_signal_TREADY_int_regslice,
        data_out => output_signal_TDATA,
        vld_out => regslice_both_output_signal_V_data_V_U_vld_out,
        ack_out => output_signal_TREADY,
        apdone_blk => regslice_both_output_signal_V_data_V_U_apdone_blk);

    regslice_both_output_signal_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_signal_TKEEP_int_regslice,
        vld_in => output_signal_TVALID_int_regslice,
        ack_in => regslice_both_output_signal_V_keep_V_U_ack_in_dummy,
        data_out => output_signal_TKEEP,
        vld_out => regslice_both_output_signal_V_keep_V_U_vld_out,
        ack_out => output_signal_TREADY,
        apdone_blk => regslice_both_output_signal_V_keep_V_U_apdone_blk);

    regslice_both_output_signal_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_signal_TSTRB_int_regslice,
        vld_in => output_signal_TVALID_int_regslice,
        ack_in => regslice_both_output_signal_V_strb_V_U_ack_in_dummy,
        data_out => output_signal_TSTRB,
        vld_out => regslice_both_output_signal_V_strb_V_U_vld_out,
        ack_out => output_signal_TREADY,
        apdone_blk => regslice_both_output_signal_V_strb_V_U_apdone_blk);

    regslice_both_output_signal_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_data_last_V_q0,
        vld_in => output_signal_TVALID_int_regslice,
        ack_in => regslice_both_output_signal_V_last_V_U_ack_in_dummy,
        data_out => output_signal_TLAST,
        vld_out => regslice_both_output_signal_V_last_V_U_vld_out,
        ack_out => output_signal_TREADY,
        apdone_blk => regslice_both_output_signal_V_last_V_U_apdone_blk);

    regslice_both_input_signal_V_data_V_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_signal_TDATA,
        vld_in => input_signal_TVALID,
        ack_in => regslice_both_input_signal_V_data_V_U_ack_in,
        data_out => input_signal_TDATA_int_regslice,
        vld_out => input_signal_TVALID_int_regslice,
        ack_out => input_signal_TREADY_int_regslice,
        apdone_blk => regslice_both_input_signal_V_data_V_U_apdone_blk);

    regslice_both_input_signal_V_keep_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_signal_TKEEP,
        vld_in => input_signal_TVALID,
        ack_in => regslice_both_input_signal_V_keep_V_U_ack_in,
        data_out => input_signal_TKEEP_int_regslice,
        vld_out => regslice_both_input_signal_V_keep_V_U_vld_out,
        ack_out => input_signal_TREADY_int_regslice,
        apdone_blk => regslice_both_input_signal_V_keep_V_U_apdone_blk);

    regslice_both_input_signal_V_strb_V_U : component regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_signal_TSTRB,
        vld_in => input_signal_TVALID,
        ack_in => regslice_both_input_signal_V_strb_V_U_ack_in,
        data_out => input_signal_TSTRB_int_regslice,
        vld_out => regslice_both_input_signal_V_strb_V_U_vld_out,
        ack_out => input_signal_TREADY_int_regslice,
        apdone_blk => regslice_both_input_signal_V_strb_V_U_apdone_blk);

    regslice_both_input_signal_V_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_signal_TLAST,
        vld_in => input_signal_TVALID,
        ack_in => regslice_both_input_signal_V_last_V_U_ack_in,
        data_out => input_signal_TLAST_int_regslice,
        vld_out => regslice_both_input_signal_V_last_V_U_vld_out,
        ack_out => input_signal_TREADY_int_regslice,
        apdone_blk => regslice_both_input_signal_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state4))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state4);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state10) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state10)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state10);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp3_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
                elsif (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    ap_enable_reg_pp3_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state18) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state18))) then 
                    ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state18);
                elsif ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state21))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp5_exit_iter0_state21)) then 
                        ap_enable_reg_pp5_iter1 <= (ap_const_logic_1 xor ap_condition_pp5_exit_iter0_state21);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_558_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_dataflow_parent_loop_proc_fu_558_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_558_ap_done <= ap_const_logic_0;
                elsif ((grp_dataflow_parent_loop_proc_fu_558_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_558_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_558_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_dataflow_parent_loop_proc_fu_558_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_558_ap_ready <= ap_const_logic_0;
                elsif ((grp_dataflow_parent_loop_proc_fu_558_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_558_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_dataflow_parent_loop_proc_fu_558_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_dataflow_parent_loop_proc_fu_558_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_sync_grp_dataflow_parent_loop_proc_fu_558_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
                    grp_dataflow_parent_loop_proc_fu_558_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dataflow_parent_loop_proc_fu_558_ap_ready = ap_const_logic_1)) then 
                    grp_dataflow_parent_loop_proc_fu_558_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_503_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_1_reg_503 <= ap_const_lv9_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln40_fu_784_p2 = ap_const_lv1_0))) then 
                i_1_reg_503 <= add_ln40_fu_790_p2;
            end if; 
        end if;
    end process;

    i_2_reg_514_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_2_reg_514 <= ap_const_lv6_0;
            elsif (((icmp_ln45_fu_810_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_2_reg_514 <= add_ln45_fu_816_p2;
            end if; 
        end if;
    end process;

    i_3_reg_525_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i_3_reg_525 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln61_fu_827_p2 = ap_const_lv1_0))) then 
                i_3_reg_525 <= add_ln61_fu_833_p2;
            end if; 
        end if;
    end process;

    i_4_reg_536_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                i_4_reg_536 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (icmp_ln66_fu_1122_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                i_4_reg_536 <= add_ln66_fu_1128_p2;
            end if; 
        end if;
    end process;

    i_5_reg_547_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                i_5_reg_547 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (icmp_ln78_fu_1139_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
                i_5_reg_547 <= add_ln78_fu_1145_p2;
            end if; 
        end if;
    end process;

    i_reg_492_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_492 <= ap_const_lv9_0;
            elsif ((not(((icmp_ln34_fu_730_p2 = ap_const_lv1_0) and (input_signal_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln34_fu_730_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_492 <= add_ln34_fu_736_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln40_fu_784_p2 = ap_const_lv1_0))) then
                    i_1_cast_reg_1194(8 downto 0) <= i_1_cast_fu_796_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln61_fu_827_p2 = ap_const_lv1_0))) then
                    i_5_cast_reg_1221(5 downto 0) <= i_5_cast_fu_839_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                    i_5_cast_reg_1221_pp3_iter1_reg(5 downto 0) <= i_5_cast_reg_1221(5 downto 0);
                icmp_ln61_reg_1212 <= icmp_ln61_fu_827_p2;
                icmp_ln61_reg_1212_pp3_iter1_reg <= icmp_ln61_reg_1212;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp3_stage0_11001)) then
                    i_5_cast_reg_1221_pp3_iter2_reg(5 downto 0) <= i_5_cast_reg_1221_pp3_iter1_reg(5 downto 0);
                    i_5_cast_reg_1221_pp3_iter3_reg(5 downto 0) <= i_5_cast_reg_1221_pp3_iter2_reg(5 downto 0);
                    i_5_cast_reg_1221_pp3_iter4_reg(5 downto 0) <= i_5_cast_reg_1221_pp3_iter3_reg(5 downto 0);
                    i_5_cast_reg_1221_pp3_iter5_reg(5 downto 0) <= i_5_cast_reg_1221_pp3_iter4_reg(5 downto 0);
                icmp_ln61_reg_1212_pp3_iter2_reg <= icmp_ln61_reg_1212_pp3_iter1_reg;
                icmp_ln61_reg_1212_pp3_iter3_reg <= icmp_ln61_reg_1212_pp3_iter2_reg;
                icmp_ln61_reg_1212_pp3_iter4_reg <= icmp_ln61_reg_1212_pp3_iter3_reg;
                icmp_ln61_reg_1212_pp3_iter5_reg <= icmp_ln61_reg_1212_pp3_iter4_reg;
                icmp_ln935_reg_1248_pp3_iter3_reg <= icmp_ln935_reg_1248;
                icmp_ln935_reg_1248_pp3_iter4_reg <= icmp_ln935_reg_1248_pp3_iter3_reg;
                m_5_reg_1253_pp3_iter3_reg <= m_5_reg_1253;
                p_Result_8_reg_1237_pp3_iter2_reg <= p_Result_8_reg_1237;
                p_Result_8_reg_1237_pp3_iter3_reg <= p_Result_8_reg_1237_pp3_iter2_reg;
                p_Result_8_reg_1237_pp3_iter4_reg <= p_Result_8_reg_1237_pp3_iter3_reg;
                sub_ln944_reg_1260_pp3_iter3_reg <= sub_ln944_reg_1260;
                trunc_ln943_reg_1272_pp3_iter3_reg <= trunc_ln943_reg_1272;
                trunc_ln943_reg_1272_pp3_iter4_reg <= trunc_ln943_reg_1272_pp3_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln66_fu_1122_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                    i_6_cast_reg_1323(5 downto 0) <= i_6_cast_fu_1134_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln40_reg_1185 <= icmp_ln40_fu_784_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                icmp_ln66_reg_1314 <= icmp_ln66_fu_1122_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                icmp_ln78_reg_1333 <= icmp_ln78_fu_1139_p2;
                icmp_ln78_reg_1333_pp5_iter1_reg <= icmp_ln78_reg_1333;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln61_reg_1212_pp3_iter1_reg = ap_const_lv1_0))) then
                icmp_ln935_reg_1248 <= icmp_ln935_fu_858_p2;
                m_5_reg_1253 <= m_5_fu_863_p3;
                sub_ln944_reg_1260 <= sub_ln944_fu_886_p2;
                trunc_ln943_reg_1272 <= trunc_ln943_fu_896_p1;
                trunc_ln947_reg_1267 <= trunc_ln947_fu_892_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln935_reg_1248 = ap_const_lv1_0) and (icmp_ln61_reg_1212_pp3_iter2_reg = ap_const_lv1_0))) then
                icmp_ln946_reg_1283 <= icmp_ln946_fu_915_p2;
                icmp_ln949_reg_1288 <= icmp_ln949_fu_953_p2;
                icmp_ln958_reg_1293 <= icmp_ln958_fu_959_p2;
                lsb_index_reg_1277 <= lsb_index_fu_900_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln935_reg_1248_pp3_iter3_reg = ap_const_lv1_0) and (icmp_ln61_reg_1212_pp3_iter3_reg = ap_const_lv1_0))) then
                m_6_reg_1299 <= m_2_fu_1047_p2(63 downto 1);
                p_Result_6_reg_1304 <= m_2_fu_1047_p2(25 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln61_reg_1212 = ap_const_lv1_0))) then
                p_Result_8_reg_1237 <= correlators_output_V_q0(31 downto 31);
                sub_ln939_reg_1243 <= sub_ln939_fu_852_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln61_reg_1212 = ap_const_lv1_0))) then
                p_Val2_s_reg_1231 <= correlators_output_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (icmp_ln61_reg_1212_pp3_iter4_reg = ap_const_lv1_0))) then
                select_ln63_reg_1309 <= select_ln63_fu_1115_p3;
            end if;
        end if;
    end process;
    i_1_cast_reg_1194(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    i_5_cast_reg_1221(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    i_5_cast_reg_1221_pp3_iter1_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    i_5_cast_reg_1221_pp3_iter2_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    i_5_cast_reg_1221_pp3_iter3_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    i_5_cast_reg_1221_pp3_iter4_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    i_5_cast_reg_1221_pp3_iter5_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    i_6_cast_reg_1323(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter2, ap_CS_fsm_state2, icmp_ln34_fu_730_p2, icmp_ln40_fu_784_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_state7, icmp_ln61_fu_827_p2, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, icmp_ln66_fu_1122_p2, ap_enable_reg_pp4_iter0, icmp_ln78_fu_1139_p2, ap_enable_reg_pp5_iter0, ap_block_pp1_stage0_subdone, ap_CS_fsm_state9, ap_block_state9_on_subcall_done, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter5, ap_enable_reg_pp3_iter6, ap_block_pp4_stage0_subdone, ap_block_pp5_stage0_subdone, icmp_ln45_fu_810_p2, ap_CS_fsm_state24, regslice_both_output_signal_V_data_V_U_apdone_blk, input_signal_TVALID_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln34_fu_730_p2 = ap_const_lv1_0) and (input_signal_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln34_fu_730_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((icmp_ln34_fu_730_p2 = ap_const_lv1_0) and (input_signal_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln34_fu_730_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln40_fu_784_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln40_fu_784_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln45_fu_810_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln61_fu_827_p2 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter6 = ap_const_logic_1) and (ap_enable_reg_pp3_iter5 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter6 = ap_const_logic_1) and (ap_enable_reg_pp3_iter5 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln61_fu_827_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
            when ap_ST_fsm_pp4_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (icmp_ln66_fu_1122_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (icmp_ln66_fu_1122_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
            when ap_ST_fsm_pp5_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (icmp_ln78_fu_1139_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif ((((ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (icmp_ln78_fu_1139_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (regslice_both_output_signal_V_data_V_U_apdone_blk = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln34_fu_736_p2 <= std_logic_vector(unsigned(i_reg_492) + unsigned(ap_const_lv9_1));
    add_ln40_fu_790_p2 <= std_logic_vector(unsigned(i_1_reg_503) + unsigned(ap_const_lv9_1));
    add_ln45_fu_816_p2 <= std_logic_vector(unsigned(i_2_reg_514) + unsigned(ap_const_lv6_1));
    add_ln61_fu_833_p2 <= std_logic_vector(unsigned(i_3_reg_525) + unsigned(ap_const_lv6_1));
    add_ln66_fu_1128_p2 <= std_logic_vector(unsigned(i_4_reg_536) + unsigned(ap_const_lv6_1));
    add_ln78_fu_1145_p2 <= std_logic_vector(unsigned(i_5_reg_547) + unsigned(ap_const_lv6_1));
    add_ln958_fu_1014_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE7) + signed(sub_ln944_reg_1260_pp3_iter3_reg));
    add_ln964_fu_1086_p2 <= std_logic_vector(unsigned(sub_ln964_fu_1081_p2) + unsigned(select_ln943_fu_1074_p3));
    and_ln949_1_fu_984_p2 <= (xor_ln949_fu_972_p2 and p_Result_9_fu_978_p3);
    and_ln949_fu_948_p2 <= (or_ln949_1_fu_942_p2 and m_5_reg_1253);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(10);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state17 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(11);
    ap_CS_fsm_state24 <= ap_CS_fsm(13);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp5_stage0_11001_assign_proc : process(ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter2, ap_block_state22_io, ap_block_state23_io)
    begin
                ap_block_pp5_stage0_11001 <= (((ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state23_io)) or ((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state22_io)));
    end process;


    ap_block_pp5_stage0_subdone_assign_proc : process(ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter2, ap_block_state22_io, ap_block_state23_io)
    begin
                ap_block_pp5_stage0_subdone <= (((ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state23_io)) or ((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state22_io)));
    end process;

        ap_block_state10_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp3_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp3_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp3_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp3_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_assign_proc : process(icmp_ln34_fu_730_p2, input_signal_TVALID_int_regslice)
    begin
                ap_block_state2 <= ((icmp_ln34_fu_730_p2 = ap_const_lv1_0) and (input_signal_TVALID_int_regslice = ap_const_logic_0));
    end process;

        ap_block_state21_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state22_io_assign_proc : process(icmp_ln78_reg_1333, output_signal_TREADY_int_regslice)
    begin
                ap_block_state22_io <= ((icmp_ln78_reg_1333 = ap_const_lv1_0) and (output_signal_TREADY_int_regslice = ap_const_logic_0));
    end process;

        ap_block_state22_pp5_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state23_io_assign_proc : process(icmp_ln78_reg_1333_pp5_iter1_reg, output_signal_TREADY_int_regslice)
    begin
                ap_block_state23_io <= ((icmp_ln78_reg_1333_pp5_iter1_reg = ap_const_lv1_0) and (output_signal_TREADY_int_regslice = ap_const_logic_0));
    end process;

        ap_block_state23_pp5_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_on_subcall_done_assign_proc : process(ap_sync_grp_dataflow_parent_loop_proc_fu_558_ap_ready, ap_sync_grp_dataflow_parent_loop_proc_fu_558_ap_done)
    begin
                ap_block_state9_on_subcall_done <= ((ap_sync_grp_dataflow_parent_loop_proc_fu_558_ap_ready and ap_sync_grp_dataflow_parent_loop_proc_fu_558_ap_done) = ap_const_logic_0);
    end process;


    ap_condition_pp1_exit_iter0_state4_assign_proc : process(icmp_ln40_fu_784_p2)
    begin
        if ((icmp_ln40_fu_784_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state10_assign_proc : process(icmp_ln61_fu_827_p2)
    begin
        if ((icmp_ln61_fu_827_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state18_assign_proc : process(icmp_ln66_fu_1122_p2)
    begin
        if ((icmp_ln66_fu_1122_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state18 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter0_state21_assign_proc : process(icmp_ln78_fu_1139_p2)
    begin
        if ((icmp_ln78_fu_1139_p2 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state21 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state24, regslice_both_output_signal_V_data_V_U_apdone_blk)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) and (regslice_both_output_signal_V_data_V_U_apdone_blk = ap_const_logic_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_enable_reg_pp3_iter3, ap_enable_reg_pp3_iter4, ap_enable_reg_pp3_iter5, ap_enable_reg_pp3_iter6)
    begin
        if (((ap_enable_reg_pp3_iter6 = ap_const_logic_0) and (ap_enable_reg_pp3_iter5 = ap_const_logic_0) and (ap_enable_reg_pp3_iter4 = ap_const_logic_0) and (ap_enable_reg_pp3_iter3 = ap_const_logic_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter2, ap_enable_reg_pp5_iter0)
    begin
        if (((ap_enable_reg_pp5_iter2 = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state24, regslice_both_output_signal_V_data_V_U_apdone_blk)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) and (regslice_both_output_signal_V_data_V_U_apdone_blk = ap_const_logic_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_grp_dataflow_parent_loop_proc_fu_558_ap_done <= (grp_dataflow_parent_loop_proc_fu_558_ap_done or ap_sync_reg_grp_dataflow_parent_loop_proc_fu_558_ap_done);
    ap_sync_grp_dataflow_parent_loop_proc_fu_558_ap_ready <= (grp_dataflow_parent_loop_proc_fu_558_ap_ready or ap_sync_reg_grp_dataflow_parent_loop_proc_fu_558_ap_ready);

    correlators_output_V_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, i_5_cast_fu_839_p1, ap_CS_fsm_state9, grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_address0, i_2_cast_fu_822_p1, ap_block_pp3_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            correlators_output_V_address0 <= i_5_cast_fu_839_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            correlators_output_V_address0 <= i_2_cast_fu_822_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            correlators_output_V_address0 <= grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_address0;
        else 
            correlators_output_V_address0 <= "XXXXXX";
        end if; 
    end process;


    correlators_output_V_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0, ap_CS_fsm_state9, grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then 
            correlators_output_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            correlators_output_V_ce0 <= grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_ce0;
        else 
            correlators_output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    correlators_output_V_ce1_assign_proc : process(ap_CS_fsm_state9, grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            correlators_output_V_ce1 <= grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_ce1;
        else 
            correlators_output_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    correlators_output_V_d0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state9, grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_d0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            correlators_output_V_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            correlators_output_V_d0 <= grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_d0;
        else 
            correlators_output_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    correlators_output_V_we0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state9, grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_we0, icmp_ln45_fu_810_p2)
    begin
        if (((icmp_ln45_fu_810_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            correlators_output_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            correlators_output_V_we0 <= grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_we0;
        else 
            correlators_output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_dataflow_parent_loop_proc_fu_558_ap_continue_assign_proc : process(ap_CS_fsm_state9, ap_block_state9_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state9_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_dataflow_parent_loop_proc_fu_558_ap_continue <= ap_const_logic_1;
        else 
            grp_dataflow_parent_loop_proc_fu_558_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_dataflow_parent_loop_proc_fu_558_ap_start <= grp_dataflow_parent_loop_proc_fu_558_ap_start_reg;
    i_1_cast_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_503),64));
    i_2_cast_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_514),64));
    i_5_cast_fu_839_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_525),64));
    i_6_cast_fu_1134_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_536),64));
    i_7_cast_fu_1151_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_547),64));
    icmp_ln34_fu_730_p2 <= "1" when (i_reg_492 = ap_const_lv9_154) else "0";
    icmp_ln40_fu_784_p2 <= "1" when (i_1_reg_503 = ap_const_lv9_154) else "0";
    icmp_ln45_fu_810_p2 <= "1" when (i_2_reg_514 = ap_const_lv6_21) else "0";
    icmp_ln61_fu_827_p2 <= "1" when (i_3_reg_525 = ap_const_lv6_21) else "0";
    icmp_ln66_fu_1122_p2 <= "1" when (i_4_reg_536 = ap_const_lv6_21) else "0";
    icmp_ln78_fu_1139_p2 <= "1" when (i_5_reg_547 = ap_const_lv6_21) else "0";
    icmp_ln935_fu_858_p2 <= "1" when (p_Val2_s_reg_1231 = ap_const_lv32_0) else "0";
    icmp_ln946_fu_915_p2 <= "1" when (signed(tmp_19_fu_905_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln949_fu_953_p2 <= "0" when (and_ln949_fu_948_p2 = ap_const_lv32_0) else "1";
    icmp_ln958_fu_959_p2 <= "1" when (signed(lsb_index_fu_900_p2) > signed(ap_const_lv32_0)) else "0";

    input_data_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, i_1_cast_reg_1194, ap_enable_reg_pp1_iter1, ap_CS_fsm_state9, grp_dataflow_parent_loop_proc_fu_558_input_data_address0, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            input_data_address0 <= i_1_cast_reg_1194(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_data_address0 <= grp_dataflow_parent_loop_proc_fu_558_input_data_address0;
        else 
            input_data_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    input_data_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1, ap_CS_fsm_state9, grp_dataflow_parent_loop_proc_fu_558_input_data_ce0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            input_data_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_data_ce0 <= grp_dataflow_parent_loop_proc_fu_558_input_data_ce0;
        else 
            input_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_data_ce1_assign_proc : process(ap_CS_fsm_state9, grp_dataflow_parent_loop_proc_fu_558_input_data_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_data_ce1 <= grp_dataflow_parent_loop_proc_fu_558_input_data_ce1;
        else 
            input_data_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    input_data_d0 <= trunc_ln42_fu_801_p1;

    input_data_we0_assign_proc : process(icmp_ln40_reg_1185, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln40_reg_1185 = ap_const_lv1_0))) then 
            input_data_we0 <= ap_const_logic_1;
        else 
            input_data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    input_signal_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, icmp_ln34_fu_730_p2, input_signal_TVALID_int_regslice)
    begin
        if (((icmp_ln34_fu_730_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            input_signal_TDATA_blk_n <= input_signal_TVALID_int_regslice;
        else 
            input_signal_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    input_signal_TREADY <= regslice_both_input_signal_V_data_V_U_ack_in;

    input_signal_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state2, icmp_ln34_fu_730_p2, input_signal_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln34_fu_730_p2 = ap_const_lv1_0) and (input_signal_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln34_fu_730_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            input_signal_TREADY_int_regslice <= ap_const_logic_1;
        else 
            input_signal_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    
    l_fu_878_p3_proc : process(p_Result_s_fu_868_p4)
    begin
        l_fu_878_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_s_fu_868_p4(i) = '1' then
                l_fu_878_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lsb_index_fu_900_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE8) + signed(sub_ln944_reg_1260));
    lshr_ln947_fu_930_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln947_fu_926_p1(31-1 downto 0)))));
    lshr_ln958_fu_1023_p2 <= std_logic_vector(shift_right(unsigned(zext_ln959_1_fu_999_p1),to_integer(unsigned('0' & zext_ln958_fu_1019_p1(31-1 downto 0)))));
    m_2_fu_1047_p2 <= std_logic_vector(unsigned(zext_ln961_fu_1043_p1) + unsigned(m_fu_1036_p3));
    m_5_fu_863_p3 <= 
        sub_ln939_reg_1243 when (p_Result_8_reg_1237(0) = '1') else 
        p_Val2_s_reg_1231;
    m_fu_1036_p3 <= 
        lshr_ln958_fu_1023_p2 when (icmp_ln958_reg_1293(0) = '1') else 
        shl_ln959_fu_1002_p2;
    or_ln949_1_fu_942_p2 <= (shl_ln949_fu_936_p2 or lshr_ln947_fu_930_p2);

    output_data_data_V_address0_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0, ap_CS_fsm_pp4_stage0, i_6_cast_reg_1323, ap_enable_reg_pp5_iter0, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0, i_7_cast_fu_1151_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            output_data_data_V_address0 <= i_7_cast_fu_1151_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            output_data_data_V_address0 <= i_6_cast_reg_1323(6 - 1 downto 0);
        else 
            output_data_data_V_address0 <= "XXXXXX";
        end if; 
    end process;


    output_data_data_V_ce0_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter0, ap_enable_reg_pp4_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)))) then 
            output_data_data_V_ce0 <= ap_const_logic_1;
        else 
            output_data_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_data_data_V_we0_assign_proc : process(icmp_ln66_reg_1314, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (icmp_ln66_reg_1314 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            output_data_data_V_we0 <= ap_const_logic_1;
        else 
            output_data_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    output_data_keep_V_address0 <= i_7_cast_fu_1151_p1(6 - 1 downto 0);

    output_data_keep_V_ce0_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            output_data_keep_V_ce0 <= ap_const_logic_1;
        else 
            output_data_keep_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_data_last_V_address0 <= i_7_cast_fu_1151_p1(6 - 1 downto 0);

    output_data_last_V_ce0_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            output_data_last_V_ce0 <= ap_const_logic_1;
        else 
            output_data_last_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_data_strb_V_address0 <= i_7_cast_fu_1151_p1(6 - 1 downto 0);

    output_data_strb_V_ce0_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            output_data_strb_V_ce0 <= ap_const_logic_1;
        else 
            output_data_strb_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_signal_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, ap_block_pp5_stage0, icmp_ln78_reg_1333, ap_enable_reg_pp5_iter2, icmp_ln78_reg_1333_pp5_iter1_reg, output_signal_TREADY_int_regslice)
    begin
        if ((((icmp_ln78_reg_1333_pp5_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp5_stage0)) or ((icmp_ln78_reg_1333 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)))) then 
            output_signal_TDATA_blk_n <= output_signal_TREADY_int_regslice;
        else 
            output_signal_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_signal_TKEEP_int_regslice <= 
        ap_const_lv4_F when (output_data_keep_V_q0(0) = '1') else 
        ap_const_lv4_0;
    output_signal_TSTRB_int_regslice <= 
        ap_const_lv4_F when (output_data_strb_V_q0(0) = '1') else 
        ap_const_lv4_0;
    output_signal_TVALID <= regslice_both_output_signal_V_data_V_U_vld_out;

    output_signal_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, icmp_ln78_reg_1333, ap_block_pp5_stage0_11001)
    begin
        if (((icmp_ln78_reg_1333 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            output_signal_TVALID_int_regslice <= ap_const_logic_1;
        else 
            output_signal_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_10_fu_1099_p5 <= (zext_ln962_fu_1071_p1(63 downto 32) & tmp_2_fu_1092_p3 & zext_ln962_fu_1071_p1(22 downto 0));
    p_Result_9_fu_978_p3 <= m_5_reg_1253_pp3_iter3_reg(to_integer(unsigned(lsb_index_reg_1277)) downto to_integer(unsigned(lsb_index_reg_1277))) when (to_integer(unsigned(lsb_index_reg_1277))>= 0 and to_integer(unsigned(lsb_index_reg_1277))<=31) else "-";
    
    p_Result_s_fu_868_p4_proc : process(m_5_fu_863_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(32+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable p_Result_s_fu_868_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(32 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(5 - 1 downto 0) := ap_const_lv32_1F(5 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(5 - 1 downto 0) := ap_const_lv32_0(5 - 1 downto 0);
        v0_cpy := m_5_fu_863_p3;
        if (vlo_cpy(5 - 1 downto 0) > vhi_cpy(5 - 1 downto 0)) then
            vhi_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_0(5-1 downto 0)));
            vlo_cpy(5-1 downto 0) := std_logic_vector(32-1-unsigned(ap_const_lv32_1F(5-1 downto 0)));
            for p_Result_s_fu_868_p4_i in 0 to 32-1 loop
                v0_cpy(p_Result_s_fu_868_p4_i) := m_5_fu_863_p3(32-1-p_Result_s_fu_868_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(5-1 downto 0)))));

        section := (others=>'0');
        section(5-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(5-1 downto 0)) - unsigned(vlo_cpy(5-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(32-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_868_p4 <= resvalue(32-1 downto 0);
    end process;

    select_ln63_fu_1115_p3 <= 
        ap_const_lv32_0 when (icmp_ln935_reg_1248_pp3_iter4_reg(0) = '1') else 
        trunc_ln743_fu_1111_p1;
    select_ln943_fu_1074_p3 <= 
        ap_const_lv8_7F when (p_Result_6_reg_1304(0) = '1') else 
        ap_const_lv8_7E;
    select_ln946_fu_1008_p3 <= 
        icmp_ln949_reg_1288 when (icmp_ln946_reg_1283(0) = '1') else 
        p_Result_9_fu_978_p3;
    select_ln958_fu_1029_p3 <= 
        select_ln946_fu_1008_p3 when (icmp_ln958_reg_1293(0) = '1') else 
        and_ln949_1_fu_984_p2;
    shl_ln949_fu_936_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & lsb_index_fu_900_p2(31-1 downto 0)))));
    shl_ln959_fu_1002_p2 <= std_logic_vector(shift_left(unsigned(zext_ln959_1_fu_999_p1),to_integer(unsigned('0' & zext_ln959_fu_995_p1(31-1 downto 0)))));
    sub_ln939_fu_852_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(correlators_output_V_q0));
    sub_ln944_fu_886_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) - unsigned(l_fu_878_p3));
    sub_ln947_fu_921_p2 <= std_logic_vector(signed(ap_const_lv6_39) - signed(trunc_ln947_reg_1267));
    sub_ln959_fu_990_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_reg_1260_pp3_iter3_reg));
    sub_ln964_fu_1081_p2 <= std_logic_vector(unsigned(ap_const_lv8_8) - unsigned(trunc_ln943_reg_1272_pp3_iter4_reg));

    temp_data_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, i_1_cast_fu_796_p1, zext_ln324_fu_758_p1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            temp_data_address0 <= i_1_cast_fu_796_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            temp_data_address0 <= zext_ln324_fu_758_p1(9 - 1 downto 0);
        else 
            temp_data_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    temp_data_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln34_fu_730_p2, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, input_signal_TVALID_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)) or (not(((icmp_ln34_fu_730_p2 = ap_const_lv1_0) and (input_signal_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            temp_data_ce0 <= ap_const_logic_1;
        else 
            temp_data_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_data_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_763_p7),64));

    temp_data_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln34_fu_730_p2, input_signal_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln34_fu_730_p2 = ap_const_lv1_0) and (input_signal_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln34_fu_730_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            temp_data_we0 <= ap_const_lv8_7F;
        else 
            temp_data_we0 <= ap_const_lv8_0;
        end if; 
    end process;


    temp_output_address0_assign_proc : process(i_5_cast_reg_1221_pp3_iter5_reg, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, i_6_cast_fu_1134_p1, ap_enable_reg_pp3_iter6, ap_block_pp3_stage0, ap_block_pp4_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            temp_output_address0 <= i_6_cast_fu_1134_p1(6 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter6 = ap_const_logic_1))) then 
            temp_output_address0 <= i_5_cast_reg_1221_pp3_iter5_reg(6 - 1 downto 0);
        else 
            temp_output_address0 <= "XXXXXX";
        end if; 
    end process;


    temp_output_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter0, ap_enable_reg_pp3_iter6)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter6 = ap_const_logic_1)))) then 
            temp_output_ce0 <= ap_const_logic_1;
        else 
            temp_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_output_we0_assign_proc : process(ap_block_pp3_stage0_11001, icmp_ln61_reg_1212_pp3_iter5_reg, ap_enable_reg_pp3_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter6 = ap_const_logic_1) and (icmp_ln61_reg_1212_pp3_iter5_reg = ap_const_lv1_0))) then 
            temp_output_we0 <= ap_const_logic_1;
        else 
            temp_output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_19_fu_905_p4 <= lsb_index_fu_900_p2(31 downto 1);
    tmp_20_fu_965_p3 <= lsb_index_reg_1277(31 downto 31);
    tmp_2_fu_1092_p3 <= (p_Result_8_reg_1237_pp3_iter4_reg & add_ln964_fu_1086_p2);
    tmp_fu_763_p7 <= (((((input_signal_TLAST_int_regslice & ap_const_lv4_0) & input_signal_TSTRB_int_regslice) & ap_const_lv4_0) & input_signal_TKEEP_int_regslice) & input_signal_TDATA_int_regslice);
    trunc_ln42_fu_801_p1 <= temp_data_q0(32 - 1 downto 0);
    trunc_ln743_fu_1111_p1 <= p_Result_10_fu_1099_p5(32 - 1 downto 0);
    trunc_ln943_fu_896_p1 <= l_fu_878_p3(8 - 1 downto 0);
    trunc_ln947_fu_892_p1 <= sub_ln944_fu_886_p2(6 - 1 downto 0);
    xor_ln949_fu_972_p2 <= (tmp_20_fu_965_p3 xor ap_const_lv1_1);
    zext_ln324_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_492),64));
    zext_ln947_fu_926_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_fu_921_p2),32));
    zext_ln958_fu_1019_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln958_fu_1014_p2),64));
    zext_ln959_1_fu_999_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_5_reg_1253_pp3_iter3_reg),64));
    zext_ln959_fu_995_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln959_fu_990_p2),64));
    zext_ln961_fu_1043_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln958_fu_1029_p3),64));
    zext_ln962_fu_1071_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_6_reg_1299),64));
end behav;
