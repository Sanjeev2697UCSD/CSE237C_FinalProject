// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="e2e_system_e2e_system,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.299083,HLS_SYN_LAT=10032,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=19110,HLS_SYN_LUT=10386,HLS_VERSION=2020_1}" *)

module e2e_system (
        ap_clk,
        ap_rst_n,
        output_signal_TDATA,
        output_signal_TVALID,
        output_signal_TREADY,
        output_signal_TKEEP,
        output_signal_TSTRB,
        output_signal_TLAST,
        input_signal_TDATA,
        input_signal_TVALID,
        input_signal_TREADY,
        input_signal_TKEEP,
        input_signal_TSTRB,
        input_signal_TLAST,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_pp1_stage0 = 14'd8;
parameter    ap_ST_fsm_state6 = 14'd16;
parameter    ap_ST_fsm_state7 = 14'd32;
parameter    ap_ST_fsm_state8 = 14'd64;
parameter    ap_ST_fsm_state9 = 14'd128;
parameter    ap_ST_fsm_pp3_stage0 = 14'd256;
parameter    ap_ST_fsm_state17 = 14'd512;
parameter    ap_ST_fsm_pp4_stage0 = 14'd1024;
parameter    ap_ST_fsm_state20 = 14'd2048;
parameter    ap_ST_fsm_pp5_stage0 = 14'd4096;
parameter    ap_ST_fsm_state24 = 14'd8192;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [31:0] output_signal_TDATA;
output   output_signal_TVALID;
input   output_signal_TREADY;
output  [3:0] output_signal_TKEEP;
output  [3:0] output_signal_TSTRB;
output  [0:0] output_signal_TLAST;
input  [31:0] input_signal_TDATA;
input   input_signal_TVALID;
output   input_signal_TREADY;
input  [3:0] input_signal_TKEEP;
input  [3:0] input_signal_TSTRB;
input  [0:0] input_signal_TLAST;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [5:0] output_data_keep_V_address0;
reg    output_data_keep_V_ce0;
wire   [0:0] output_data_keep_V_q0;
wire   [5:0] output_data_strb_V_address0;
reg    output_data_strb_V_ce0;
wire   [0:0] output_data_strb_V_q0;
wire   [5:0] output_data_last_V_address0;
reg    output_data_last_V_ce0;
wire   [0:0] output_data_last_V_q0;
reg    output_signal_TDATA_blk_n;
wire    ap_CS_fsm_pp5_stage0;
reg    ap_enable_reg_pp5_iter1;
wire    ap_block_pp5_stage0;
reg   [0:0] icmp_ln78_reg_1333;
reg    ap_enable_reg_pp5_iter2;
reg   [0:0] icmp_ln78_reg_1333_pp5_iter1_reg;
reg    input_signal_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln34_fu_730_p2;
reg   [8:0] i_1_reg_503;
reg   [5:0] i_3_reg_525;
reg   [5:0] i_4_reg_536;
reg   [5:0] i_5_reg_547;
wire   [8:0] add_ln34_fu_736_p2;
reg    ap_block_state2;
wire   [0:0] icmp_ln40_fu_784_p2;
reg   [0:0] icmp_ln40_reg_1185;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state4_pp1_stage0_iter0;
wire    ap_block_state5_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [8:0] add_ln40_fu_790_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [63:0] i_1_cast_fu_796_p1;
reg   [63:0] i_1_cast_reg_1194;
wire   [5:0] add_ln45_fu_816_p2;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln61_fu_827_p2;
reg   [0:0] icmp_ln61_reg_1212;
wire    ap_CS_fsm_pp3_stage0;
wire    ap_block_state10_pp3_stage0_iter0;
wire    ap_block_state11_pp3_stage0_iter1;
wire    ap_block_state12_pp3_stage0_iter2;
wire    ap_block_state13_pp3_stage0_iter3;
wire    ap_block_state14_pp3_stage0_iter4;
wire    ap_block_state15_pp3_stage0_iter5;
wire    ap_block_state16_pp3_stage0_iter6;
wire    ap_block_pp3_stage0_11001;
reg   [0:0] icmp_ln61_reg_1212_pp3_iter1_reg;
reg   [0:0] icmp_ln61_reg_1212_pp3_iter2_reg;
reg   [0:0] icmp_ln61_reg_1212_pp3_iter3_reg;
reg   [0:0] icmp_ln61_reg_1212_pp3_iter4_reg;
reg   [0:0] icmp_ln61_reg_1212_pp3_iter5_reg;
wire   [5:0] add_ln61_fu_833_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [63:0] i_5_cast_fu_839_p1;
reg   [63:0] i_5_cast_reg_1221;
reg   [63:0] i_5_cast_reg_1221_pp3_iter1_reg;
reg   [63:0] i_5_cast_reg_1221_pp3_iter2_reg;
reg   [63:0] i_5_cast_reg_1221_pp3_iter3_reg;
reg   [63:0] i_5_cast_reg_1221_pp3_iter4_reg;
reg   [63:0] i_5_cast_reg_1221_pp3_iter5_reg;
wire   [31:0] correlators_output_V_q0;
reg   [31:0] p_Val2_s_reg_1231;
reg    ap_enable_reg_pp3_iter1;
reg   [0:0] p_Result_8_reg_1237;
reg   [0:0] p_Result_8_reg_1237_pp3_iter2_reg;
reg   [0:0] p_Result_8_reg_1237_pp3_iter3_reg;
reg   [0:0] p_Result_8_reg_1237_pp3_iter4_reg;
wire   [31:0] sub_ln939_fu_852_p2;
reg   [31:0] sub_ln939_reg_1243;
wire   [0:0] icmp_ln935_fu_858_p2;
reg   [0:0] icmp_ln935_reg_1248;
reg   [0:0] icmp_ln935_reg_1248_pp3_iter3_reg;
reg   [0:0] icmp_ln935_reg_1248_pp3_iter4_reg;
wire   [31:0] m_5_fu_863_p3;
reg   [31:0] m_5_reg_1253;
reg   [31:0] m_5_reg_1253_pp3_iter3_reg;
wire   [31:0] sub_ln944_fu_886_p2;
reg   [31:0] sub_ln944_reg_1260;
reg   [31:0] sub_ln944_reg_1260_pp3_iter3_reg;
wire   [5:0] trunc_ln947_fu_892_p1;
reg   [5:0] trunc_ln947_reg_1267;
wire   [7:0] trunc_ln943_fu_896_p1;
reg   [7:0] trunc_ln943_reg_1272;
reg   [7:0] trunc_ln943_reg_1272_pp3_iter3_reg;
reg   [7:0] trunc_ln943_reg_1272_pp3_iter4_reg;
wire   [31:0] lsb_index_fu_900_p2;
reg   [31:0] lsb_index_reg_1277;
wire   [0:0] icmp_ln946_fu_915_p2;
reg   [0:0] icmp_ln946_reg_1283;
wire   [0:0] icmp_ln949_fu_953_p2;
reg   [0:0] icmp_ln949_reg_1288;
wire   [0:0] icmp_ln958_fu_959_p2;
reg   [0:0] icmp_ln958_reg_1293;
reg   [62:0] m_6_reg_1299;
reg   [0:0] p_Result_6_reg_1304;
wire   [31:0] select_ln63_fu_1115_p3;
reg   [31:0] select_ln63_reg_1309;
wire   [0:0] icmp_ln66_fu_1122_p2;
reg   [0:0] icmp_ln66_reg_1314;
wire    ap_CS_fsm_pp4_stage0;
wire    ap_block_state18_pp4_stage0_iter0;
wire    ap_block_state19_pp4_stage0_iter1;
wire    ap_block_pp4_stage0_11001;
wire   [5:0] add_ln66_fu_1128_p2;
reg    ap_enable_reg_pp4_iter0;
wire   [63:0] i_6_cast_fu_1134_p1;
reg   [63:0] i_6_cast_reg_1323;
wire   [0:0] icmp_ln78_fu_1139_p2;
wire    ap_block_state21_pp5_stage0_iter0;
wire    ap_block_state22_pp5_stage0_iter1;
reg    ap_block_state22_io;
wire    ap_block_state23_pp5_stage0_iter2;
reg    ap_block_state23_io;
reg    ap_block_pp5_stage0_11001;
wire   [5:0] add_ln78_fu_1145_p2;
reg    ap_enable_reg_pp5_iter0;
wire   [31:0] output_data_data_V_q0;
wire    ap_CS_fsm_state3;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state4;
reg    ap_enable_reg_pp1_iter1;
wire    ap_CS_fsm_state9;
wire    grp_dataflow_parent_loop_proc_fu_558_ap_ready;
wire    grp_dataflow_parent_loop_proc_fu_558_ap_done;
wire    ap_sync_grp_dataflow_parent_loop_proc_fu_558_ap_ready;
wire    ap_sync_grp_dataflow_parent_loop_proc_fu_558_ap_done;
reg    ap_block_state9_on_subcall_done;
wire    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state10;
reg    ap_enable_reg_pp3_iter2;
reg    ap_enable_reg_pp3_iter3;
reg    ap_enable_reg_pp3_iter4;
reg    ap_enable_reg_pp3_iter5;
reg    ap_enable_reg_pp3_iter6;
wire    ap_CS_fsm_state17;
wire    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state18;
reg    ap_enable_reg_pp4_iter1;
wire    ap_CS_fsm_state20;
reg    ap_block_pp5_stage0_subdone;
reg    ap_condition_pp5_exit_iter0_state21;
reg   [8:0] temp_data_address0;
reg    temp_data_ce0;
reg   [7:0] temp_data_we0;
wire   [63:0] temp_data_d0;
wire   [63:0] temp_data_q0;
reg   [5:0] temp_output_address0;
reg    temp_output_ce0;
reg    temp_output_we0;
wire   [31:0] temp_output_q0;
reg   [8:0] input_data_address0;
reg    input_data_ce0;
reg    input_data_we0;
wire   [31:0] input_data_d0;
wire   [31:0] input_data_q0;
reg    input_data_ce1;
wire   [31:0] input_data_q1;
reg   [5:0] correlators_output_V_address0;
reg    correlators_output_V_ce0;
reg    correlators_output_V_we0;
reg   [31:0] correlators_output_V_d0;
reg    correlators_output_V_ce1;
wire   [31:0] correlators_output_V_q1;
reg   [5:0] output_data_data_V_address0;
reg    output_data_data_V_ce0;
reg    output_data_data_V_we0;
wire   [8:0] grp_dataflow_parent_loop_proc_fu_558_input_data_address0;
wire    grp_dataflow_parent_loop_proc_fu_558_input_data_ce0;
wire   [31:0] grp_dataflow_parent_loop_proc_fu_558_input_data_d0;
wire    grp_dataflow_parent_loop_proc_fu_558_input_data_we0;
wire   [8:0] grp_dataflow_parent_loop_proc_fu_558_input_data_address1;
wire    grp_dataflow_parent_loop_proc_fu_558_input_data_ce1;
wire   [31:0] grp_dataflow_parent_loop_proc_fu_558_input_data_d1;
wire    grp_dataflow_parent_loop_proc_fu_558_input_data_we1;
wire   [5:0] grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_address0;
wire    grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_ce0;
wire   [31:0] grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_d0;
wire    grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_we0;
wire   [5:0] grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_address1;
wire    grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_ce1;
wire   [31:0] grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_d1;
wire    grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_we1;
wire    grp_dataflow_parent_loop_proc_fu_558_ap_start;
wire    grp_dataflow_parent_loop_proc_fu_558_ap_idle;
reg    grp_dataflow_parent_loop_proc_fu_558_ap_continue;
reg   [8:0] i_reg_492;
reg   [5:0] i_2_reg_514;
wire   [0:0] icmp_ln45_fu_810_p2;
wire    ap_CS_fsm_state6;
reg    grp_dataflow_parent_loop_proc_fu_558_ap_start_reg;
wire    ap_CS_fsm_state8;
reg    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_558_ap_ready;
reg    ap_sync_reg_grp_dataflow_parent_loop_proc_fu_558_ap_done;
wire   [63:0] zext_ln324_fu_758_p1;
wire    ap_block_pp1_stage0;
wire   [63:0] i_2_cast_fu_822_p1;
wire    ap_block_pp3_stage0;
wire    ap_block_pp4_stage0;
wire   [63:0] i_7_cast_fu_1151_p1;
wire    ap_block_pp5_stage0_01001;
wire   [48:0] tmp_fu_763_p7;
wire   [31:0] trunc_ln42_fu_801_p1;
reg   [31:0] p_Result_s_fu_868_p4;
reg   [31:0] l_fu_878_p3;
wire   [30:0] tmp_19_fu_905_p4;
wire   [5:0] sub_ln947_fu_921_p2;
wire   [31:0] zext_ln947_fu_926_p1;
wire   [31:0] lshr_ln947_fu_930_p2;
wire   [31:0] shl_ln949_fu_936_p2;
wire   [31:0] or_ln949_1_fu_942_p2;
wire   [31:0] and_ln949_fu_948_p2;
wire   [0:0] tmp_20_fu_965_p3;
wire   [0:0] p_Result_9_fu_978_p3;
wire   [0:0] xor_ln949_fu_972_p2;
wire   [31:0] sub_ln959_fu_990_p2;
wire   [63:0] zext_ln959_1_fu_999_p1;
wire   [63:0] zext_ln959_fu_995_p1;
wire   [31:0] add_ln958_fu_1014_p2;
wire   [63:0] zext_ln958_fu_1019_p1;
wire   [0:0] select_ln946_fu_1008_p3;
wire   [0:0] and_ln949_1_fu_984_p2;
wire   [63:0] lshr_ln958_fu_1023_p2;
wire   [63:0] shl_ln959_fu_1002_p2;
wire   [0:0] select_ln958_fu_1029_p3;
wire   [63:0] zext_ln961_fu_1043_p1;
wire   [63:0] m_fu_1036_p3;
wire   [63:0] m_2_fu_1047_p2;
wire   [7:0] sub_ln964_fu_1081_p2;
wire   [7:0] select_ln943_fu_1074_p3;
wire   [7:0] add_ln964_fu_1086_p2;
wire   [63:0] zext_ln962_fu_1071_p1;
wire   [8:0] tmp_2_fu_1092_p3;
wire   [63:0] p_Result_10_fu_1099_p5;
wire   [31:0] trunc_ln743_fu_1111_p1;
wire    ap_CS_fsm_state24;
wire    regslice_both_output_signal_V_data_V_U_apdone_blk;
reg   [13:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
reg    ap_idle_pp5;
wire    ap_enable_pp5;
reg    output_signal_TVALID_int_regslice;
wire    output_signal_TREADY_int_regslice;
wire    regslice_both_output_signal_V_data_V_U_vld_out;
wire    regslice_both_output_signal_V_keep_V_U_apdone_blk;
wire   [3:0] output_signal_TKEEP_int_regslice;
wire    regslice_both_output_signal_V_keep_V_U_ack_in_dummy;
wire    regslice_both_output_signal_V_keep_V_U_vld_out;
wire    regslice_both_output_signal_V_strb_V_U_apdone_blk;
wire   [3:0] output_signal_TSTRB_int_regslice;
wire    regslice_both_output_signal_V_strb_V_U_ack_in_dummy;
wire    regslice_both_output_signal_V_strb_V_U_vld_out;
wire    regslice_both_output_signal_V_last_V_U_apdone_blk;
wire    regslice_both_output_signal_V_last_V_U_ack_in_dummy;
wire    regslice_both_output_signal_V_last_V_U_vld_out;
wire    regslice_both_input_signal_V_data_V_U_apdone_blk;
wire   [31:0] input_signal_TDATA_int_regslice;
wire    input_signal_TVALID_int_regslice;
reg    input_signal_TREADY_int_regslice;
wire    regslice_both_input_signal_V_data_V_U_ack_in;
wire    regslice_both_input_signal_V_keep_V_U_apdone_blk;
wire   [3:0] input_signal_TKEEP_int_regslice;
wire    regslice_both_input_signal_V_keep_V_U_vld_out;
wire    regslice_both_input_signal_V_keep_V_U_ack_in;
wire    regslice_both_input_signal_V_strb_V_U_apdone_blk;
wire   [3:0] input_signal_TSTRB_int_regslice;
wire    regslice_both_input_signal_V_strb_V_U_vld_out;
wire    regslice_both_input_signal_V_strb_V_U_ack_in;
wire    regslice_both_input_signal_V_last_V_U_apdone_blk;
wire   [0:0] input_signal_TLAST_int_regslice;
wire    regslice_both_input_signal_V_last_V_U_vld_out;
wire    regslice_both_input_signal_V_last_V_U_ack_in;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
#0 ap_enable_reg_pp5_iter1 = 1'b0;
#0 ap_enable_reg_pp5_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp5_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter3 = 1'b0;
#0 ap_enable_reg_pp3_iter4 = 1'b0;
#0 ap_enable_reg_pp3_iter5 = 1'b0;
#0 ap_enable_reg_pp3_iter6 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 grp_dataflow_parent_loop_proc_fu_558_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_dataflow_parent_loop_proc_fu_558_ap_ready = 1'b0;
#0 ap_sync_reg_grp_dataflow_parent_loop_proc_fu_558_ap_done = 1'b0;
end

e2e_system_output_data_keep_V #(
    .DataWidth( 1 ),
    .AddressRange( 33 ),
    .AddressWidth( 6 ))
output_data_keep_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_data_keep_V_address0),
    .ce0(output_data_keep_V_ce0),
    .q0(output_data_keep_V_q0)
);

e2e_system_output_data_keep_V #(
    .DataWidth( 1 ),
    .AddressRange( 33 ),
    .AddressWidth( 6 ))
output_data_strb_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_data_strb_V_address0),
    .ce0(output_data_strb_V_ce0),
    .q0(output_data_strb_V_q0)
);

e2e_system_output_data_last_V #(
    .DataWidth( 1 ),
    .AddressRange( 33 ),
    .AddressWidth( 6 ))
output_data_last_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_data_last_V_address0),
    .ce0(output_data_last_V_ce0),
    .q0(output_data_last_V_q0)
);

e2e_system_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

e2e_system_temp_data #(
    .DataWidth( 64 ),
    .AddressRange( 340 ),
    .AddressWidth( 9 ))
temp_data_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(temp_data_address0),
    .ce0(temp_data_ce0),
    .we0(temp_data_we0),
    .d0(temp_data_d0),
    .q0(temp_data_q0)
);

e2e_system_temp_output #(
    .DataWidth( 32 ),
    .AddressRange( 33 ),
    .AddressWidth( 6 ))
temp_output_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(temp_output_address0),
    .ce0(temp_output_ce0),
    .we0(temp_output_we0),
    .d0(select_ln63_reg_1309),
    .q0(temp_output_q0)
);

e2e_system_input_data #(
    .DataWidth( 32 ),
    .AddressRange( 340 ),
    .AddressWidth( 9 ))
input_data_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(input_data_address0),
    .ce0(input_data_ce0),
    .we0(input_data_we0),
    .d0(input_data_d0),
    .q0(input_data_q0),
    .address1(grp_dataflow_parent_loop_proc_fu_558_input_data_address1),
    .ce1(input_data_ce1),
    .q1(input_data_q1)
);

e2e_system_correlators_output_V #(
    .DataWidth( 32 ),
    .AddressRange( 33 ),
    .AddressWidth( 6 ))
correlators_output_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(correlators_output_V_address0),
    .ce0(correlators_output_V_ce0),
    .we0(correlators_output_V_we0),
    .d0(correlators_output_V_d0),
    .q0(correlators_output_V_q0),
    .address1(grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_address1),
    .ce1(correlators_output_V_ce1),
    .q1(correlators_output_V_q1)
);

e2e_system_temp_output #(
    .DataWidth( 32 ),
    .AddressRange( 33 ),
    .AddressWidth( 6 ))
output_data_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(output_data_data_V_address0),
    .ce0(output_data_data_V_ce0),
    .we0(output_data_data_V_we0),
    .d0(temp_output_q0),
    .q0(output_data_data_V_q0)
);

e2e_system_dataflow_parent_loop_proc grp_dataflow_parent_loop_proc_fu_558(
    .input_data_address0(grp_dataflow_parent_loop_proc_fu_558_input_data_address0),
    .input_data_ce0(grp_dataflow_parent_loop_proc_fu_558_input_data_ce0),
    .input_data_d0(grp_dataflow_parent_loop_proc_fu_558_input_data_d0),
    .input_data_q0(input_data_q0),
    .input_data_we0(grp_dataflow_parent_loop_proc_fu_558_input_data_we0),
    .input_data_address1(grp_dataflow_parent_loop_proc_fu_558_input_data_address1),
    .input_data_ce1(grp_dataflow_parent_loop_proc_fu_558_input_data_ce1),
    .input_data_d1(grp_dataflow_parent_loop_proc_fu_558_input_data_d1),
    .input_data_q1(input_data_q1),
    .input_data_we1(grp_dataflow_parent_loop_proc_fu_558_input_data_we1),
    .correlators_output_V_address0(grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_address0),
    .correlators_output_V_ce0(grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_ce0),
    .correlators_output_V_d0(grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_d0),
    .correlators_output_V_q0(32'd0),
    .correlators_output_V_we0(grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_we0),
    .correlators_output_V_address1(grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_address1),
    .correlators_output_V_ce1(grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_ce1),
    .correlators_output_V_d1(grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_d1),
    .correlators_output_V_q1(correlators_output_V_q1),
    .correlators_output_V_we1(grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_we1),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_dataflow_parent_loop_proc_fu_558_ap_start),
    .ap_done(grp_dataflow_parent_loop_proc_fu_558_ap_done),
    .ap_ready(grp_dataflow_parent_loop_proc_fu_558_ap_ready),
    .ap_idle(grp_dataflow_parent_loop_proc_fu_558_ap_idle),
    .ap_continue(grp_dataflow_parent_loop_proc_fu_558_ap_continue)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_output_signal_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_data_data_V_q0),
    .vld_in(output_signal_TVALID_int_regslice),
    .ack_in(output_signal_TREADY_int_regslice),
    .data_out(output_signal_TDATA),
    .vld_out(regslice_both_output_signal_V_data_V_U_vld_out),
    .ack_out(output_signal_TREADY),
    .apdone_blk(regslice_both_output_signal_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_output_signal_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_signal_TKEEP_int_regslice),
    .vld_in(output_signal_TVALID_int_regslice),
    .ack_in(regslice_both_output_signal_V_keep_V_U_ack_in_dummy),
    .data_out(output_signal_TKEEP),
    .vld_out(regslice_both_output_signal_V_keep_V_U_vld_out),
    .ack_out(output_signal_TREADY),
    .apdone_blk(regslice_both_output_signal_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_output_signal_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_signal_TSTRB_int_regslice),
    .vld_in(output_signal_TVALID_int_regslice),
    .ack_in(regslice_both_output_signal_V_strb_V_U_ack_in_dummy),
    .data_out(output_signal_TSTRB),
    .vld_out(regslice_both_output_signal_V_strb_V_U_vld_out),
    .ack_out(output_signal_TREADY),
    .apdone_blk(regslice_both_output_signal_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_output_signal_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_data_last_V_q0),
    .vld_in(output_signal_TVALID_int_regslice),
    .ack_in(regslice_both_output_signal_V_last_V_U_ack_in_dummy),
    .data_out(output_signal_TLAST),
    .vld_out(regslice_both_output_signal_V_last_V_U_vld_out),
    .ack_out(output_signal_TREADY),
    .apdone_blk(regslice_both_output_signal_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_input_signal_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_signal_TDATA),
    .vld_in(input_signal_TVALID),
    .ack_in(regslice_both_input_signal_V_data_V_U_ack_in),
    .data_out(input_signal_TDATA_int_regslice),
    .vld_out(input_signal_TVALID_int_regslice),
    .ack_out(input_signal_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_signal_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_input_signal_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_signal_TKEEP),
    .vld_in(input_signal_TVALID),
    .ack_in(regslice_both_input_signal_V_keep_V_U_ack_in),
    .data_out(input_signal_TKEEP_int_regslice),
    .vld_out(regslice_both_input_signal_V_keep_V_U_vld_out),
    .ack_out(input_signal_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_signal_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 4 ))
regslice_both_input_signal_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_signal_TSTRB),
    .vld_in(input_signal_TVALID),
    .ack_in(regslice_both_input_signal_V_strb_V_U_ack_in),
    .data_out(input_signal_TSTRB_int_regslice),
    .vld_out(regslice_both_input_signal_V_strb_V_U_vld_out),
    .ack_out(input_signal_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_signal_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_input_signal_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_signal_TLAST),
    .vld_in(input_signal_TVALID),
    .ack_in(regslice_both_input_signal_V_last_V_U_ack_in),
    .data_out(input_signal_TLAST_int_regslice),
    .vld_out(regslice_both_input_signal_V_last_V_U_vld_out),
    .ack_out(input_signal_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_signal_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state4))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state4);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state10) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if (((1'b0 == ap_block_state9_on_subcall_done) & (1'b1 == ap_CS_fsm_state9))) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state10)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state10);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter3 <= ap_enable_reg_pp3_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter4 <= ap_enable_reg_pp3_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter5 <= ap_enable_reg_pp3_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp3_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter6 <= ap_enable_reg_pp3_iter5;
        end else if (((1'b0 == ap_block_state9_on_subcall_done) & (1'b1 == ap_CS_fsm_state9))) begin
            ap_enable_reg_pp3_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_condition_pp4_exit_iter0_state18) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_condition_pp4_exit_iter0_state18))) begin
            ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state18);
        end else if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_enable_reg_pp4_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp5_stage0_subdone) & (1'b1 == ap_CS_fsm_pp5_stage0) & (1'b1 == ap_condition_pp5_exit_iter0_state21))) begin
            ap_enable_reg_pp5_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp5_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp5_exit_iter0_state21)) begin
                ap_enable_reg_pp5_iter1 <= (1'b1 ^ ap_condition_pp5_exit_iter0_state21);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp5_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp5_stage0_subdone)) begin
            ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_enable_reg_pp5_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_dataflow_parent_loop_proc_fu_558_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state9_on_subcall_done) & (1'b1 == ap_CS_fsm_state9))) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc_fu_558_ap_done <= 1'b0;
        end else if ((grp_dataflow_parent_loop_proc_fu_558_ap_done == 1'b1)) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc_fu_558_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_dataflow_parent_loop_proc_fu_558_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state9_on_subcall_done) & (1'b1 == ap_CS_fsm_state9))) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc_fu_558_ap_ready <= 1'b0;
        end else if ((grp_dataflow_parent_loop_proc_fu_558_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_dataflow_parent_loop_proc_fu_558_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_dataflow_parent_loop_proc_fu_558_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state8) | ((ap_sync_grp_dataflow_parent_loop_proc_fu_558_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state9)))) begin
            grp_dataflow_parent_loop_proc_fu_558_ap_start_reg <= 1'b1;
        end else if ((grp_dataflow_parent_loop_proc_fu_558_ap_ready == 1'b1)) begin
            grp_dataflow_parent_loop_proc_fu_558_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_reg_503 <= 9'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln40_fu_784_p2 == 1'd0))) begin
        i_1_reg_503 <= add_ln40_fu_790_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_2_reg_514 <= 6'd0;
    end else if (((icmp_ln45_fu_810_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        i_2_reg_514 <= add_ln45_fu_816_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state9_on_subcall_done) & (1'b1 == ap_CS_fsm_state9))) begin
        i_3_reg_525 <= 6'd0;
    end else if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln61_fu_827_p2 == 1'd0))) begin
        i_3_reg_525 <= add_ln61_fu_833_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        i_4_reg_536 <= 6'd0;
    end else if (((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (icmp_ln66_fu_1122_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        i_4_reg_536 <= add_ln66_fu_1128_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        i_5_reg_547 <= 6'd0;
    end else if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter0 == 1'b1) & (icmp_ln78_fu_1139_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        i_5_reg_547 <= add_ln78_fu_1145_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_492 <= 9'd0;
    end else if ((~((icmp_ln34_fu_730_p2 == 1'd0) & (input_signal_TVALID_int_regslice == 1'b0)) & (icmp_ln34_fu_730_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_492 <= add_ln34_fu_736_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln40_fu_784_p2 == 1'd0))) begin
        i_1_cast_reg_1194[8 : 0] <= i_1_cast_fu_796_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln61_fu_827_p2 == 1'd0))) begin
        i_5_cast_reg_1221[5 : 0] <= i_5_cast_fu_839_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        i_5_cast_reg_1221_pp3_iter1_reg[5 : 0] <= i_5_cast_reg_1221[5 : 0];
        icmp_ln61_reg_1212 <= icmp_ln61_fu_827_p2;
        icmp_ln61_reg_1212_pp3_iter1_reg <= icmp_ln61_reg_1212;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp3_stage0_11001)) begin
        i_5_cast_reg_1221_pp3_iter2_reg[5 : 0] <= i_5_cast_reg_1221_pp3_iter1_reg[5 : 0];
        i_5_cast_reg_1221_pp3_iter3_reg[5 : 0] <= i_5_cast_reg_1221_pp3_iter2_reg[5 : 0];
        i_5_cast_reg_1221_pp3_iter4_reg[5 : 0] <= i_5_cast_reg_1221_pp3_iter3_reg[5 : 0];
        i_5_cast_reg_1221_pp3_iter5_reg[5 : 0] <= i_5_cast_reg_1221_pp3_iter4_reg[5 : 0];
        icmp_ln61_reg_1212_pp3_iter2_reg <= icmp_ln61_reg_1212_pp3_iter1_reg;
        icmp_ln61_reg_1212_pp3_iter3_reg <= icmp_ln61_reg_1212_pp3_iter2_reg;
        icmp_ln61_reg_1212_pp3_iter4_reg <= icmp_ln61_reg_1212_pp3_iter3_reg;
        icmp_ln61_reg_1212_pp3_iter5_reg <= icmp_ln61_reg_1212_pp3_iter4_reg;
        icmp_ln935_reg_1248_pp3_iter3_reg <= icmp_ln935_reg_1248;
        icmp_ln935_reg_1248_pp3_iter4_reg <= icmp_ln935_reg_1248_pp3_iter3_reg;
        m_5_reg_1253_pp3_iter3_reg <= m_5_reg_1253;
        p_Result_8_reg_1237_pp3_iter2_reg <= p_Result_8_reg_1237;
        p_Result_8_reg_1237_pp3_iter3_reg <= p_Result_8_reg_1237_pp3_iter2_reg;
        p_Result_8_reg_1237_pp3_iter4_reg <= p_Result_8_reg_1237_pp3_iter3_reg;
        sub_ln944_reg_1260_pp3_iter3_reg <= sub_ln944_reg_1260;
        trunc_ln943_reg_1272_pp3_iter3_reg <= trunc_ln943_reg_1272;
        trunc_ln943_reg_1272_pp3_iter4_reg <= trunc_ln943_reg_1272_pp3_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (icmp_ln66_fu_1122_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        i_6_cast_reg_1323[5 : 0] <= i_6_cast_fu_1134_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln40_reg_1185 <= icmp_ln40_fu_784_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        icmp_ln66_reg_1314 <= icmp_ln66_fu_1122_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        icmp_ln78_reg_1333 <= icmp_ln78_fu_1139_p2;
        icmp_ln78_reg_1333_pp5_iter1_reg <= icmp_ln78_reg_1333;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln61_reg_1212_pp3_iter1_reg == 1'd0))) begin
        icmp_ln935_reg_1248 <= icmp_ln935_fu_858_p2;
        m_5_reg_1253 <= m_5_fu_863_p3;
        sub_ln944_reg_1260 <= sub_ln944_fu_886_p2;
        trunc_ln943_reg_1272 <= trunc_ln943_fu_896_p1;
        trunc_ln947_reg_1267 <= trunc_ln947_fu_892_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln935_reg_1248 == 1'd0) & (icmp_ln61_reg_1212_pp3_iter2_reg == 1'd0))) begin
        icmp_ln946_reg_1283 <= icmp_ln946_fu_915_p2;
        icmp_ln949_reg_1288 <= icmp_ln949_fu_953_p2;
        icmp_ln958_reg_1293 <= icmp_ln958_fu_959_p2;
        lsb_index_reg_1277 <= lsb_index_fu_900_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln935_reg_1248_pp3_iter3_reg == 1'd0) & (icmp_ln61_reg_1212_pp3_iter3_reg == 1'd0))) begin
        m_6_reg_1299 <= {{m_2_fu_1047_p2[63:1]}};
        p_Result_6_reg_1304 <= m_2_fu_1047_p2[32'd25];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln61_reg_1212 == 1'd0))) begin
        p_Result_8_reg_1237 <= correlators_output_V_q0[32'd31];
        sub_ln939_reg_1243 <= sub_ln939_fu_852_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (icmp_ln61_reg_1212 == 1'd0))) begin
        p_Val2_s_reg_1231 <= correlators_output_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (icmp_ln61_reg_1212_pp3_iter4_reg == 1'd0))) begin
        select_ln63_reg_1309 <= select_ln63_fu_1115_p3;
    end
end

always @ (*) begin
    if ((icmp_ln40_fu_784_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln61_fu_827_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln66_fu_1122_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state18 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state18 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln78_fu_1139_p2 == 1'd1)) begin
        ap_condition_pp5_exit_iter0_state21 = 1'b1;
    end else begin
        ap_condition_pp5_exit_iter0_state21 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) & (regslice_both_output_signal_V_data_V_U_apdone_blk == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter6 == 1'b0) & (ap_enable_reg_pp3_iter5 == 1'b0) & (ap_enable_reg_pp3_iter4 == 1'b0) & (ap_enable_reg_pp3_iter3 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp5_iter2 == 1'b0) & (ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b0))) begin
        ap_idle_pp5 = 1'b1;
    end else begin
        ap_idle_pp5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) & (regslice_both_output_signal_V_data_V_U_apdone_blk == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        correlators_output_V_address0 = i_5_cast_fu_839_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        correlators_output_V_address0 = i_2_cast_fu_822_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        correlators_output_V_address0 = grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_address0;
    end else begin
        correlators_output_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        correlators_output_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        correlators_output_V_ce0 = grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_ce0;
    end else begin
        correlators_output_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        correlators_output_V_ce1 = grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_ce1;
    end else begin
        correlators_output_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        correlators_output_V_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        correlators_output_V_d0 = grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_d0;
    end else begin
        correlators_output_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln45_fu_810_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        correlators_output_V_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        correlators_output_V_we0 = grp_dataflow_parent_loop_proc_fu_558_correlators_output_V_we0;
    end else begin
        correlators_output_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state9_on_subcall_done) & (1'b1 == ap_CS_fsm_state9))) begin
        grp_dataflow_parent_loop_proc_fu_558_ap_continue = 1'b1;
    end else begin
        grp_dataflow_parent_loop_proc_fu_558_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        input_data_address0 = i_1_cast_reg_1194;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        input_data_address0 = grp_dataflow_parent_loop_proc_fu_558_input_data_address0;
    end else begin
        input_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        input_data_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        input_data_ce0 = grp_dataflow_parent_loop_proc_fu_558_input_data_ce0;
    end else begin
        input_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        input_data_ce1 = grp_dataflow_parent_loop_proc_fu_558_input_data_ce1;
    end else begin
        input_data_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln40_reg_1185 == 1'd0))) begin
        input_data_we0 = 1'b1;
    end else begin
        input_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln34_fu_730_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        input_signal_TDATA_blk_n = input_signal_TVALID_int_regslice;
    end else begin
        input_signal_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln34_fu_730_p2 == 1'd0) & (input_signal_TVALID_int_regslice == 1'b0)) & (icmp_ln34_fu_730_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        input_signal_TREADY_int_regslice = 1'b1;
    end else begin
        input_signal_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        output_data_data_V_address0 = i_7_cast_fu_1151_p1;
    end else if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        output_data_data_V_address0 = i_6_cast_reg_1323;
    end else begin
        output_data_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0)) | ((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)))) begin
        output_data_data_V_ce0 = 1'b1;
    end else begin
        output_data_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter1 == 1'b1) & (icmp_ln66_reg_1314 == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        output_data_data_V_we0 = 1'b1;
    end else begin
        output_data_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        output_data_keep_V_ce0 = 1'b1;
    end else begin
        output_data_keep_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        output_data_last_V_ce0 = 1'b1;
    end else begin
        output_data_last_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        output_data_strb_V_ce0 = 1'b1;
    end else begin
        output_data_strb_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln78_reg_1333_pp5_iter1_reg == 1'd0) & (ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0)) | ((icmp_ln78_reg_1333 == 1'd0) & (1'b0 == ap_block_pp5_stage0) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0)))) begin
        output_signal_TDATA_blk_n = output_signal_TREADY_int_regslice;
    end else begin
        output_signal_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln78_reg_1333 == 1'd0) & (1'b0 == ap_block_pp5_stage0_11001) & (ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp5_stage0))) begin
        output_signal_TVALID_int_regslice = 1'b1;
    end else begin
        output_signal_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        temp_data_address0 = i_1_cast_fu_796_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        temp_data_address0 = zext_ln324_fu_758_p1;
    end else begin
        temp_data_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | (~((icmp_ln34_fu_730_p2 == 1'd0) & (input_signal_TVALID_int_regslice == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        temp_data_ce0 = 1'b1;
    end else begin
        temp_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln34_fu_730_p2 == 1'd0) & (input_signal_TVALID_int_regslice == 1'b0)) & (icmp_ln34_fu_730_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        temp_data_we0 = 8'd127;
    end else begin
        temp_data_we0 = 8'd0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp4_stage0) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        temp_output_address0 = i_6_cast_fu_1134_p1;
    end else if (((1'b0 == ap_block_pp3_stage0) & (ap_enable_reg_pp3_iter6 == 1'b1))) begin
        temp_output_address0 = i_5_cast_reg_1221_pp3_iter5_reg;
    end else begin
        temp_output_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter6 == 1'b1)))) begin
        temp_output_ce0 = 1'b1;
    end else begin
        temp_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter6 == 1'b1) & (icmp_ln61_reg_1212_pp3_iter5_reg == 1'd0))) begin
        temp_output_we0 = 1'b1;
    end else begin
        temp_output_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln34_fu_730_p2 == 1'd0) & (input_signal_TVALID_int_regslice == 1'b0)) & (icmp_ln34_fu_730_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((icmp_ln34_fu_730_p2 == 1'd0) & (input_signal_TVALID_int_regslice == 1'b0)) & (icmp_ln34_fu_730_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln40_fu_784_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln40_fu_784_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln45_fu_810_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b0 == ap_block_state9_on_subcall_done) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln61_fu_827_p2 == 1'd1)) & ~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter6 == 1'b1) & (ap_enable_reg_pp3_iter5 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter6 == 1'b1) & (ap_enable_reg_pp3_iter5 == 1'b0)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter1 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln61_fu_827_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_pp4_stage0;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if (~((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter0 == 1'b1) & (icmp_ln66_fu_1122_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if (((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter0 == 1'b1) & (icmp_ln66_fu_1122_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_pp5_stage0;
        end
        ap_ST_fsm_pp5_stage0 : begin
            if ((~((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (icmp_ln78_fu_1139_p2 == 1'd1)) & ~((ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end else if ((((ap_enable_reg_pp5_iter2 == 1'b1) & (1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0)) | ((1'b0 == ap_block_pp5_stage0_subdone) & (ap_enable_reg_pp5_iter1 == 1'b0) & (ap_enable_reg_pp5_iter0 == 1'b1) & (icmp_ln78_fu_1139_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp5_stage0;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (regslice_both_output_signal_V_data_V_U_apdone_blk == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln34_fu_736_p2 = (i_reg_492 + 9'd1);

assign add_ln40_fu_790_p2 = (i_1_reg_503 + 9'd1);

assign add_ln45_fu_816_p2 = (i_2_reg_514 + 6'd1);

assign add_ln61_fu_833_p2 = (i_3_reg_525 + 6'd1);

assign add_ln66_fu_1128_p2 = (i_4_reg_536 + 6'd1);

assign add_ln78_fu_1145_p2 = (i_5_reg_547 + 6'd1);

assign add_ln958_fu_1014_p2 = ($signed(32'd4294967271) + $signed(sub_ln944_reg_1260_pp3_iter3_reg));

assign add_ln964_fu_1086_p2 = (sub_ln964_fu_1081_p2 + select_ln943_fu_1074_p3);

assign and_ln949_1_fu_984_p2 = (xor_ln949_fu_972_p2 & p_Result_9_fu_978_p3);

assign and_ln949_fu_948_p2 = (or_ln949_1_fu_942_p2 & m_5_reg_1253);

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp5_stage0 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp5_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp5_stage0_11001 = (((ap_enable_reg_pp5_iter2 == 1'b1) & (1'b1 == ap_block_state23_io)) | ((ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_block_state22_io)));
end

always @ (*) begin
    ap_block_pp5_stage0_subdone = (((ap_enable_reg_pp5_iter2 == 1'b1) & (1'b1 == ap_block_state23_io)) | ((ap_enable_reg_pp5_iter1 == 1'b1) & (1'b1 == ap_block_state22_io)));
end

assign ap_block_state10_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp3_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp3_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp3_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp3_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2 = ((icmp_ln34_fu_730_p2 == 1'd0) & (input_signal_TVALID_int_regslice == 1'b0));
end

assign ap_block_state21_pp5_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state22_io = ((icmp_ln78_reg_1333 == 1'd0) & (output_signal_TREADY_int_regslice == 1'b0));
end

assign ap_block_state22_pp5_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state23_io = ((icmp_ln78_reg_1333_pp5_iter1_reg == 1'd0) & (output_signal_TREADY_int_regslice == 1'b0));
end

assign ap_block_state23_pp5_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_on_subcall_done = ((ap_sync_grp_dataflow_parent_loop_proc_fu_558_ap_ready & ap_sync_grp_dataflow_parent_loop_proc_fu_558_ap_done) == 1'b0);
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ap_enable_pp5 = (ap_idle_pp5 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_dataflow_parent_loop_proc_fu_558_ap_done = (grp_dataflow_parent_loop_proc_fu_558_ap_done | ap_sync_reg_grp_dataflow_parent_loop_proc_fu_558_ap_done);

assign ap_sync_grp_dataflow_parent_loop_proc_fu_558_ap_ready = (grp_dataflow_parent_loop_proc_fu_558_ap_ready | ap_sync_reg_grp_dataflow_parent_loop_proc_fu_558_ap_ready);

assign grp_dataflow_parent_loop_proc_fu_558_ap_start = grp_dataflow_parent_loop_proc_fu_558_ap_start_reg;

assign i_1_cast_fu_796_p1 = i_1_reg_503;

assign i_2_cast_fu_822_p1 = i_2_reg_514;

assign i_5_cast_fu_839_p1 = i_3_reg_525;

assign i_6_cast_fu_1134_p1 = i_4_reg_536;

assign i_7_cast_fu_1151_p1 = i_5_reg_547;

assign icmp_ln34_fu_730_p2 = ((i_reg_492 == 9'd340) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_784_p2 = ((i_1_reg_503 == 9'd340) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_810_p2 = ((i_2_reg_514 == 6'd33) ? 1'b1 : 1'b0);

assign icmp_ln61_fu_827_p2 = ((i_3_reg_525 == 6'd33) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_1122_p2 = ((i_4_reg_536 == 6'd33) ? 1'b1 : 1'b0);

assign icmp_ln78_fu_1139_p2 = ((i_5_reg_547 == 6'd33) ? 1'b1 : 1'b0);

assign icmp_ln935_fu_858_p2 = ((p_Val2_s_reg_1231 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln946_fu_915_p2 = (($signed(tmp_19_fu_905_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln949_fu_953_p2 = ((and_ln949_fu_948_p2 != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln958_fu_959_p2 = (($signed(lsb_index_fu_900_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign input_data_d0 = trunc_ln42_fu_801_p1;

assign input_signal_TREADY = regslice_both_input_signal_V_data_V_U_ack_in;


always @ (p_Result_s_fu_868_p4) begin
    if (p_Result_s_fu_868_p4[0] == 1'b1) begin
        l_fu_878_p3 = 32'd0;
    end else if (p_Result_s_fu_868_p4[1] == 1'b1) begin
        l_fu_878_p3 = 32'd1;
    end else if (p_Result_s_fu_868_p4[2] == 1'b1) begin
        l_fu_878_p3 = 32'd2;
    end else if (p_Result_s_fu_868_p4[3] == 1'b1) begin
        l_fu_878_p3 = 32'd3;
    end else if (p_Result_s_fu_868_p4[4] == 1'b1) begin
        l_fu_878_p3 = 32'd4;
    end else if (p_Result_s_fu_868_p4[5] == 1'b1) begin
        l_fu_878_p3 = 32'd5;
    end else if (p_Result_s_fu_868_p4[6] == 1'b1) begin
        l_fu_878_p3 = 32'd6;
    end else if (p_Result_s_fu_868_p4[7] == 1'b1) begin
        l_fu_878_p3 = 32'd7;
    end else if (p_Result_s_fu_868_p4[8] == 1'b1) begin
        l_fu_878_p3 = 32'd8;
    end else if (p_Result_s_fu_868_p4[9] == 1'b1) begin
        l_fu_878_p3 = 32'd9;
    end else if (p_Result_s_fu_868_p4[10] == 1'b1) begin
        l_fu_878_p3 = 32'd10;
    end else if (p_Result_s_fu_868_p4[11] == 1'b1) begin
        l_fu_878_p3 = 32'd11;
    end else if (p_Result_s_fu_868_p4[12] == 1'b1) begin
        l_fu_878_p3 = 32'd12;
    end else if (p_Result_s_fu_868_p4[13] == 1'b1) begin
        l_fu_878_p3 = 32'd13;
    end else if (p_Result_s_fu_868_p4[14] == 1'b1) begin
        l_fu_878_p3 = 32'd14;
    end else if (p_Result_s_fu_868_p4[15] == 1'b1) begin
        l_fu_878_p3 = 32'd15;
    end else if (p_Result_s_fu_868_p4[16] == 1'b1) begin
        l_fu_878_p3 = 32'd16;
    end else if (p_Result_s_fu_868_p4[17] == 1'b1) begin
        l_fu_878_p3 = 32'd17;
    end else if (p_Result_s_fu_868_p4[18] == 1'b1) begin
        l_fu_878_p3 = 32'd18;
    end else if (p_Result_s_fu_868_p4[19] == 1'b1) begin
        l_fu_878_p3 = 32'd19;
    end else if (p_Result_s_fu_868_p4[20] == 1'b1) begin
        l_fu_878_p3 = 32'd20;
    end else if (p_Result_s_fu_868_p4[21] == 1'b1) begin
        l_fu_878_p3 = 32'd21;
    end else if (p_Result_s_fu_868_p4[22] == 1'b1) begin
        l_fu_878_p3 = 32'd22;
    end else if (p_Result_s_fu_868_p4[23] == 1'b1) begin
        l_fu_878_p3 = 32'd23;
    end else if (p_Result_s_fu_868_p4[24] == 1'b1) begin
        l_fu_878_p3 = 32'd24;
    end else if (p_Result_s_fu_868_p4[25] == 1'b1) begin
        l_fu_878_p3 = 32'd25;
    end else if (p_Result_s_fu_868_p4[26] == 1'b1) begin
        l_fu_878_p3 = 32'd26;
    end else if (p_Result_s_fu_868_p4[27] == 1'b1) begin
        l_fu_878_p3 = 32'd27;
    end else if (p_Result_s_fu_868_p4[28] == 1'b1) begin
        l_fu_878_p3 = 32'd28;
    end else if (p_Result_s_fu_868_p4[29] == 1'b1) begin
        l_fu_878_p3 = 32'd29;
    end else if (p_Result_s_fu_868_p4[30] == 1'b1) begin
        l_fu_878_p3 = 32'd30;
    end else if (p_Result_s_fu_868_p4[31] == 1'b1) begin
        l_fu_878_p3 = 32'd31;
    end else begin
        l_fu_878_p3 = 32'd32;
    end
end

assign lsb_index_fu_900_p2 = ($signed(32'd4294967272) + $signed(sub_ln944_reg_1260));

assign lshr_ln947_fu_930_p2 = 32'd4294967295 >> zext_ln947_fu_926_p1;

assign lshr_ln958_fu_1023_p2 = zext_ln959_1_fu_999_p1 >> zext_ln958_fu_1019_p1;

assign m_2_fu_1047_p2 = (zext_ln961_fu_1043_p1 + m_fu_1036_p3);

assign m_5_fu_863_p3 = ((p_Result_8_reg_1237[0:0] === 1'b1) ? sub_ln939_reg_1243 : p_Val2_s_reg_1231);

assign m_fu_1036_p3 = ((icmp_ln958_reg_1293[0:0] === 1'b1) ? lshr_ln958_fu_1023_p2 : shl_ln959_fu_1002_p2);

assign or_ln949_1_fu_942_p2 = (shl_ln949_fu_936_p2 | lshr_ln947_fu_930_p2);

assign output_data_keep_V_address0 = i_7_cast_fu_1151_p1;

assign output_data_last_V_address0 = i_7_cast_fu_1151_p1;

assign output_data_strb_V_address0 = i_7_cast_fu_1151_p1;

assign output_signal_TKEEP_int_regslice = ((output_data_keep_V_q0[0:0] === 1'b1) ? 4'd15 : 4'd0);

assign output_signal_TSTRB_int_regslice = ((output_data_strb_V_q0[0:0] === 1'b1) ? 4'd15 : 4'd0);

assign output_signal_TVALID = regslice_both_output_signal_V_data_V_U_vld_out;

assign p_Result_10_fu_1099_p5 = {{zext_ln962_fu_1071_p1[63:32]}, {tmp_2_fu_1092_p3}, {zext_ln962_fu_1071_p1[22:0]}};

assign p_Result_9_fu_978_p3 = m_5_reg_1253_pp3_iter3_reg[lsb_index_reg_1277];

integer ap_tvar_int_0;

always @ (m_5_fu_863_p3) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            p_Result_s_fu_868_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_s_fu_868_p4[ap_tvar_int_0] = m_5_fu_863_p3[31 - ap_tvar_int_0];
        end
    end
end

assign select_ln63_fu_1115_p3 = ((icmp_ln935_reg_1248_pp3_iter4_reg[0:0] === 1'b1) ? 32'd0 : trunc_ln743_fu_1111_p1);

assign select_ln943_fu_1074_p3 = ((p_Result_6_reg_1304[0:0] === 1'b1) ? 8'd127 : 8'd126);

assign select_ln946_fu_1008_p3 = ((icmp_ln946_reg_1283[0:0] === 1'b1) ? icmp_ln949_reg_1288 : p_Result_9_fu_978_p3);

assign select_ln958_fu_1029_p3 = ((icmp_ln958_reg_1293[0:0] === 1'b1) ? select_ln946_fu_1008_p3 : and_ln949_1_fu_984_p2);

assign shl_ln949_fu_936_p2 = 32'd1 << lsb_index_fu_900_p2;

assign shl_ln959_fu_1002_p2 = zext_ln959_1_fu_999_p1 << zext_ln959_fu_995_p1;

assign sub_ln939_fu_852_p2 = (32'd0 - correlators_output_V_q0);

assign sub_ln944_fu_886_p2 = (32'd32 - l_fu_878_p3);

assign sub_ln947_fu_921_p2 = ($signed(6'd57) - $signed(trunc_ln947_reg_1267));

assign sub_ln959_fu_990_p2 = (32'd25 - sub_ln944_reg_1260_pp3_iter3_reg);

assign sub_ln964_fu_1081_p2 = (8'd8 - trunc_ln943_reg_1272_pp3_iter4_reg);

assign temp_data_d0 = tmp_fu_763_p7;

assign tmp_19_fu_905_p4 = {{lsb_index_fu_900_p2[31:1]}};

assign tmp_20_fu_965_p3 = lsb_index_reg_1277[32'd31];

assign tmp_2_fu_1092_p3 = {{p_Result_8_reg_1237_pp3_iter4_reg}, {add_ln964_fu_1086_p2}};

assign tmp_fu_763_p7 = {{{{{{input_signal_TLAST_int_regslice}, {4'd0}}, {input_signal_TSTRB_int_regslice}}, {4'd0}}, {input_signal_TKEEP_int_regslice}}, {input_signal_TDATA_int_regslice}};

assign trunc_ln42_fu_801_p1 = temp_data_q0[31:0];

assign trunc_ln743_fu_1111_p1 = p_Result_10_fu_1099_p5[31:0];

assign trunc_ln943_fu_896_p1 = l_fu_878_p3[7:0];

assign trunc_ln947_fu_892_p1 = sub_ln944_fu_886_p2[5:0];

assign xor_ln949_fu_972_p2 = (tmp_20_fu_965_p3 ^ 1'd1);

assign zext_ln324_fu_758_p1 = i_reg_492;

assign zext_ln947_fu_926_p1 = sub_ln947_fu_921_p2;

assign zext_ln958_fu_1019_p1 = add_ln958_fu_1014_p2;

assign zext_ln959_1_fu_999_p1 = m_5_reg_1253_pp3_iter3_reg;

assign zext_ln959_fu_995_p1 = sub_ln959_fu_990_p2;

assign zext_ln961_fu_1043_p1 = select_ln958_fu_1029_p3;

assign zext_ln962_fu_1071_p1 = m_6_reg_1299;

always @ (posedge ap_clk) begin
    i_1_cast_reg_1194[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    i_5_cast_reg_1221[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    i_5_cast_reg_1221_pp3_iter1_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    i_5_cast_reg_1221_pp3_iter2_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    i_5_cast_reg_1221_pp3_iter3_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    i_5_cast_reg_1221_pp3_iter4_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    i_5_cast_reg_1221_pp3_iter5_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    i_6_cast_reg_1323[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //e2e_system
