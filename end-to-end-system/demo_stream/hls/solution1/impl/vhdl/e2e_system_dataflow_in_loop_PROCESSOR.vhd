-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity e2e_system_dataflow_in_loop_PROCESSOR is
port (
    input_data_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input_data_ce0 : OUT STD_LOGIC;
    input_data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_data_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_data_we0 : OUT STD_LOGIC;
    input_data_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input_data_ce1 : OUT STD_LOGIC;
    input_data_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_data_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_data_we1 : OUT STD_LOGIC;
    i_3 : IN STD_LOGIC_VECTOR (7 downto 0);
    correlators_output_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    correlators_output_V_ce0 : OUT STD_LOGIC;
    correlators_output_V_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    correlators_output_V_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    correlators_output_V_we0 : OUT STD_LOGIC;
    correlators_output_V_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    correlators_output_V_ce1 : OUT STD_LOGIC;
    correlators_output_V_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    correlators_output_V_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    correlators_output_V_we1 : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    i_3_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of e2e_system_dataflow_in_loop_PROCESSOR is 
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal Block_entry_proc_proc14_U0_ap_start : STD_LOGIC;
    signal Block_entry_proc_proc14_U0_ap_done : STD_LOGIC;
    signal Block_entry_proc_proc14_U0_ap_continue : STD_LOGIC;
    signal Block_entry_proc_proc14_U0_ap_idle : STD_LOGIC;
    signal Block_entry_proc_proc14_U0_ap_ready : STD_LOGIC;
    signal Block_entry_proc_proc14_U0_i_3_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Block_entry_proc_proc14_U0_i_3_out_write : STD_LOGIC;
    signal filter_U0_ap_start : STD_LOGIC;
    signal filter_U0_ap_done : STD_LOGIC;
    signal filter_U0_ap_continue : STD_LOGIC;
    signal filter_U0_ap_idle : STD_LOGIC;
    signal filter_U0_ap_ready : STD_LOGIC;
    signal filter_U0_input_r_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal filter_U0_input_r_ce0 : STD_LOGIC;
    signal filter_U0_input_r_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal filter_U0_input_r_ce1 : STD_LOGIC;
    signal filter_U0_i_read : STD_LOGIC;
    signal filter_U0_output_signal_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal filter_U0_output_signal_out_write : STD_LOGIC;
    signal correlator_U0_ap_start : STD_LOGIC;
    signal correlator_U0_ap_done : STD_LOGIC;
    signal correlator_U0_ap_continue : STD_LOGIC;
    signal correlator_U0_ap_idle : STD_LOGIC;
    signal correlator_U0_ap_ready : STD_LOGIC;
    signal correlator_U0_output_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal correlator_U0_output_r_ce0 : STD_LOGIC;
    signal correlator_U0_output_r_we0 : STD_LOGIC;
    signal correlator_U0_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal correlator_U0_output_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal correlator_U0_output_r_ce1 : STD_LOGIC;
    signal correlator_U0_input_r_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal i_3_c_full_n : STD_LOGIC;
    signal i_3_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal i_3_c_empty_n : STD_LOGIC;
    signal temp_output_V1_c_full_n : STD_LOGIC;
    signal temp_output_V1_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_output_V1_c_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_Block_entry_proc_proc14_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Block_entry_proc_proc14_U0_ap_ready : STD_LOGIC;
    signal Block_entry_proc_proc14_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_filter_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_filter_U0_ap_ready : STD_LOGIC;
    signal filter_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_correlator_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_correlator_U0_ap_ready : STD_LOGIC;
    signal correlator_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal Block_entry_proc_proc14_U0_start_full_n : STD_LOGIC;
    signal Block_entry_proc_proc14_U0_start_write : STD_LOGIC;
    signal filter_U0_start_full_n : STD_LOGIC;
    signal filter_U0_start_write : STD_LOGIC;
    signal correlator_U0_start_full_n : STD_LOGIC;
    signal correlator_U0_start_write : STD_LOGIC;

    component e2e_system_Block_entry_proc_proc14 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        i_3 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_3_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        i_3_out_full_n : IN STD_LOGIC;
        i_3_out_write : OUT STD_LOGIC );
    end component;


    component e2e_system_filter IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        i_empty_n : IN STD_LOGIC;
        i_read : OUT STD_LOGIC;
        output_signal_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_signal_out_full_n : IN STD_LOGIC;
        output_signal_out_write : OUT STD_LOGIC );
    end component;


    component e2e_system_correlator IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        output_r_ce1 : OUT STD_LOGIC;
        output_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_r_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        input_r_empty_n : IN STD_LOGIC;
        input_r_read : OUT STD_LOGIC );
    end component;


    component e2e_system_fifo_w8_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component e2e_system_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    Block_entry_proc_proc14_U0 : component e2e_system_Block_entry_proc_proc14
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_entry_proc_proc14_U0_ap_start,
        ap_done => Block_entry_proc_proc14_U0_ap_done,
        ap_continue => Block_entry_proc_proc14_U0_ap_continue,
        ap_idle => Block_entry_proc_proc14_U0_ap_idle,
        ap_ready => Block_entry_proc_proc14_U0_ap_ready,
        i_3 => i_3,
        i_3_out_din => Block_entry_proc_proc14_U0_i_3_out_din,
        i_3_out_full_n => i_3_c_full_n,
        i_3_out_write => Block_entry_proc_proc14_U0_i_3_out_write);

    filter_U0 : component e2e_system_filter
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => filter_U0_ap_start,
        ap_done => filter_U0_ap_done,
        ap_continue => filter_U0_ap_continue,
        ap_idle => filter_U0_ap_idle,
        ap_ready => filter_U0_ap_ready,
        input_r_address0 => filter_U0_input_r_address0,
        input_r_ce0 => filter_U0_input_r_ce0,
        input_r_q0 => input_data_q0,
        input_r_address1 => filter_U0_input_r_address1,
        input_r_ce1 => filter_U0_input_r_ce1,
        input_r_q1 => input_data_q1,
        i_dout => i_3_c_dout,
        i_empty_n => i_3_c_empty_n,
        i_read => filter_U0_i_read,
        output_signal_out_din => filter_U0_output_signal_out_din,
        output_signal_out_full_n => temp_output_V1_c_full_n,
        output_signal_out_write => filter_U0_output_signal_out_write);

    correlator_U0 : component e2e_system_correlator
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => correlator_U0_ap_start,
        ap_done => correlator_U0_ap_done,
        ap_continue => correlator_U0_ap_continue,
        ap_idle => correlator_U0_ap_idle,
        ap_ready => correlator_U0_ap_ready,
        output_r_address0 => correlator_U0_output_r_address0,
        output_r_ce0 => correlator_U0_output_r_ce0,
        output_r_we0 => correlator_U0_output_r_we0,
        output_r_d0 => correlator_U0_output_r_d0,
        output_r_address1 => correlator_U0_output_r_address1,
        output_r_ce1 => correlator_U0_output_r_ce1,
        output_r_q1 => correlators_output_V_q1,
        input_r_dout => temp_output_V1_c_dout,
        input_r_empty_n => temp_output_V1_c_empty_n,
        input_r_read => correlator_U0_input_r_read);

    i_3_c_U : component e2e_system_fifo_w8_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_entry_proc_proc14_U0_i_3_out_din,
        if_full_n => i_3_c_full_n,
        if_write => Block_entry_proc_proc14_U0_i_3_out_write,
        if_dout => i_3_c_dout,
        if_empty_n => i_3_c_empty_n,
        if_read => filter_U0_i_read);

    temp_output_V1_c_U : component e2e_system_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => filter_U0_output_signal_out_din,
        if_full_n => temp_output_V1_c_full_n,
        if_write => filter_U0_output_signal_out_write,
        if_dout => temp_output_V1_c_dout,
        if_empty_n => temp_output_V1_c_empty_n,
        if_read => correlator_U0_input_r_read);





    ap_sync_reg_Block_entry_proc_proc14_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_Block_entry_proc_proc14_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Block_entry_proc_proc14_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Block_entry_proc_proc14_U0_ap_ready <= ap_sync_Block_entry_proc_proc14_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_correlator_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_correlator_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_correlator_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_correlator_U0_ap_ready <= ap_sync_correlator_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_filter_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_filter_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_filter_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_filter_U0_ap_ready <= ap_sync_filter_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    Block_entry_proc_proc14_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = Block_entry_proc_proc14_U0_ap_ready) and (ap_sync_ready = ap_const_logic_1))) then 
                Block_entry_proc_proc14_U0_ap_ready_count <= std_logic_vector(unsigned(Block_entry_proc_proc14_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = Block_entry_proc_proc14_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                Block_entry_proc_proc14_U0_ap_ready_count <= std_logic_vector(unsigned(Block_entry_proc_proc14_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    correlator_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((correlator_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                correlator_U0_ap_ready_count <= std_logic_vector(unsigned(correlator_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((correlator_U0_ap_ready = ap_const_logic_1) and (ap_sync_ready = ap_const_logic_0))) then 
                correlator_U0_ap_ready_count <= std_logic_vector(unsigned(correlator_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    filter_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((filter_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                filter_U0_ap_ready_count <= std_logic_vector(unsigned(filter_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((filter_U0_ap_ready = ap_const_logic_1) and (ap_sync_ready = ap_const_logic_0))) then 
                filter_U0_ap_ready_count <= std_logic_vector(unsigned(filter_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    Block_entry_proc_proc14_U0_ap_continue <= ap_const_logic_1;
    Block_entry_proc_proc14_U0_ap_start <= ((ap_sync_reg_Block_entry_proc_proc14_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Block_entry_proc_proc14_U0_start_full_n <= ap_const_logic_1;
    Block_entry_proc_proc14_U0_start_write <= ap_const_logic_0;
    ap_done <= correlator_U0_ap_done;
    ap_idle <= (filter_U0_ap_idle and correlator_U0_ap_idle and Block_entry_proc_proc14_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_Block_entry_proc_proc14_U0_ap_ready <= (ap_sync_reg_Block_entry_proc_proc14_U0_ap_ready or Block_entry_proc_proc14_U0_ap_ready);
    ap_sync_continue <= ap_continue;
    ap_sync_correlator_U0_ap_ready <= (correlator_U0_ap_ready or ap_sync_reg_correlator_U0_ap_ready);
    ap_sync_done <= correlator_U0_ap_done;
    ap_sync_filter_U0_ap_ready <= (filter_U0_ap_ready or ap_sync_reg_filter_U0_ap_ready);
    ap_sync_ready <= (ap_sync_filter_U0_ap_ready and ap_sync_correlator_U0_ap_ready and ap_sync_Block_entry_proc_proc14_U0_ap_ready);
    correlator_U0_ap_continue <= ap_continue;
    correlator_U0_ap_start <= ((ap_sync_reg_correlator_U0_ap_ready xor ap_const_logic_1) and ap_start);
    correlator_U0_start_full_n <= ap_const_logic_1;
    correlator_U0_start_write <= ap_const_logic_0;
    correlators_output_V_address0 <= correlator_U0_output_r_address0;
    correlators_output_V_address1 <= correlator_U0_output_r_address1;
    correlators_output_V_ce0 <= correlator_U0_output_r_ce0;
    correlators_output_V_ce1 <= correlator_U0_output_r_ce1;
    correlators_output_V_d0 <= correlator_U0_output_r_d0;
    correlators_output_V_d1 <= ap_const_lv32_0;
    correlators_output_V_we0 <= correlator_U0_output_r_we0;
    correlators_output_V_we1 <= ap_const_logic_0;
    filter_U0_ap_continue <= ap_const_logic_1;
    filter_U0_ap_start <= ((ap_sync_reg_filter_U0_ap_ready xor ap_const_logic_1) and ap_start);
    filter_U0_start_full_n <= ap_const_logic_1;
    filter_U0_start_write <= ap_const_logic_0;
    input_data_address0 <= filter_U0_input_r_address0;
    input_data_address1 <= filter_U0_input_r_address1;
    input_data_ce0 <= filter_U0_input_r_ce0;
    input_data_ce1 <= filter_U0_input_r_ce1;
    input_data_d0 <= ap_const_lv32_0;
    input_data_d1 <= ap_const_lv32_0;
    input_data_we0 <= ap_const_logic_0;
    input_data_we1 <= ap_const_logic_0;
end behav;
