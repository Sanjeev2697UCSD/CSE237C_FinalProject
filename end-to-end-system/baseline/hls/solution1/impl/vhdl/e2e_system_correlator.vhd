-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity e2e_system_correlator is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_V_ce0 : OUT STD_LOGIC;
    input_V_q0 : IN STD_LOGIC_VECTOR (35 downto 0) );
end;


architecture behav of e2e_system_correlator is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (36 downto 0) := "0000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (36 downto 0) := "0000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (36 downto 0) := "0000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (36 downto 0) := "0000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (36 downto 0) := "0000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (36 downto 0) := "0000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (36 downto 0) := "0001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (36 downto 0) := "0010000000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (36 downto 0) := "0100000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (36 downto 0) := "1000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011101";
    constant ap_const_lv64_1E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011110";
    constant ap_const_lv64_1C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011100";
    constant ap_const_lv64_1B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011011";
    constant ap_const_lv64_1A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011010";
    constant ap_const_lv64_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv64_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010111";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv64_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010101";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv36_0 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv6_21 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_AA : STD_LOGIC_VECTOR (7 downto 0) := "10101010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv28_FFFFFFF : STD_LOGIC_VECTOR (27 downto 0) := "1111111111111111111111111111";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv6_3D : STD_LOGIC_VECTOR (5 downto 0) := "111101";
    constant ap_const_lv36_FFFFFFFFF : STD_LOGIC_VECTOR (35 downto 0) := "111111111111111111111111111111111111";
    constant ap_const_lv36_1 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal codebook_V_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal codebook_V_0_ce0 : STD_LOGIC;
    signal codebook_V_0_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal codebook_V_1_ce0 : STD_LOGIC;
    signal codebook_V_1_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal codebook_V_2_ce0 : STD_LOGIC;
    signal codebook_V_2_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_3_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal codebook_V_3_ce0 : STD_LOGIC;
    signal codebook_V_3_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_4_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal codebook_V_4_ce0 : STD_LOGIC;
    signal codebook_V_4_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_5_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal codebook_V_5_ce0 : STD_LOGIC;
    signal codebook_V_5_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_6_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal codebook_V_6_ce0 : STD_LOGIC;
    signal codebook_V_6_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_7_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal codebook_V_7_ce0 : STD_LOGIC;
    signal codebook_V_7_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_8_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal codebook_V_8_ce0 : STD_LOGIC;
    signal codebook_V_8_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_9_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal codebook_V_9_ce0 : STD_LOGIC;
    signal codebook_V_9_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_10_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal codebook_V_10_ce0 : STD_LOGIC;
    signal codebook_V_10_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_11_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal codebook_V_11_ce0 : STD_LOGIC;
    signal codebook_V_11_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_12_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal codebook_V_12_ce0 : STD_LOGIC;
    signal codebook_V_12_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_13_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal codebook_V_13_ce0 : STD_LOGIC;
    signal codebook_V_13_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_14_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal codebook_V_14_ce0 : STD_LOGIC;
    signal codebook_V_14_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_15_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal codebook_V_15_ce0 : STD_LOGIC;
    signal codebook_V_15_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_16_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal codebook_V_16_ce0 : STD_LOGIC;
    signal codebook_V_16_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_17_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal codebook_V_17_ce0 : STD_LOGIC;
    signal codebook_V_17_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_18_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal codebook_V_18_ce0 : STD_LOGIC;
    signal codebook_V_18_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_19_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal codebook_V_19_ce0 : STD_LOGIC;
    signal codebook_V_19_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_20_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal codebook_V_20_ce0 : STD_LOGIC;
    signal codebook_V_20_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_21_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal codebook_V_21_ce0 : STD_LOGIC;
    signal codebook_V_21_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_22_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal codebook_V_22_ce0 : STD_LOGIC;
    signal codebook_V_22_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_23_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal codebook_V_23_ce0 : STD_LOGIC;
    signal codebook_V_23_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_24_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal codebook_V_24_ce0 : STD_LOGIC;
    signal codebook_V_24_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_25_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal codebook_V_25_ce0 : STD_LOGIC;
    signal codebook_V_25_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_26_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal codebook_V_26_ce0 : STD_LOGIC;
    signal codebook_V_26_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_27_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal codebook_V_27_ce0 : STD_LOGIC;
    signal codebook_V_27_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_28_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal codebook_V_28_ce0 : STD_LOGIC;
    signal codebook_V_28_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_29_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal codebook_V_29_ce0 : STD_LOGIC;
    signal codebook_V_29_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_30_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal codebook_V_30_ce0 : STD_LOGIC;
    signal codebook_V_30_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_999 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln93_fu_1016_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln96_fu_1033_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln101_fu_1050_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln101_reg_2739 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal temp_input_V_q1 : STD_LOGIC_VECTOR (35 downto 0);
    signal temp_input_V_load_reg_2744 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal temp_input_V_q0 : STD_LOGIC_VECTOR (35 downto 0);
    signal temp_input_V_load_1_reg_2750 : STD_LOGIC_VECTOR (35 downto 0);
    signal temp_input_V_load_2_reg_2756 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal temp_input_V_load_3_reg_2762 : STD_LOGIC_VECTOR (35 downto 0);
    signal temp_input_V_load_4_reg_2768 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal temp_input_V_load_5_reg_2774 : STD_LOGIC_VECTOR (35 downto 0);
    signal temp_input_V_load_6_reg_2780 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal temp_input_V_load_7_reg_2786 : STD_LOGIC_VECTOR (35 downto 0);
    signal temp_input_V_load_8_reg_2792 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal temp_input_V_load_9_reg_2798 : STD_LOGIC_VECTOR (35 downto 0);
    signal temp_input_V_load_10_reg_2804 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal temp_input_V_load_11_reg_2810 : STD_LOGIC_VECTOR (35 downto 0);
    signal temp_input_V_load_12_reg_2816 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal temp_input_V_load_13_reg_2822 : STD_LOGIC_VECTOR (35 downto 0);
    signal temp_input_V_load_14_reg_2828 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal temp_input_V_load_15_reg_2834 : STD_LOGIC_VECTOR (35 downto 0);
    signal temp_input_V_load_16_reg_2840 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal temp_input_V_load_17_reg_2846 : STD_LOGIC_VECTOR (35 downto 0);
    signal temp_input_V_load_18_reg_2852 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal temp_input_V_load_19_reg_2858 : STD_LOGIC_VECTOR (35 downto 0);
    signal temp_input_V_load_20_reg_2864 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal temp_input_V_load_21_reg_2870 : STD_LOGIC_VECTOR (35 downto 0);
    signal temp_input_V_load_22_reg_2876 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal temp_input_V_load_23_reg_2882 : STD_LOGIC_VECTOR (35 downto 0);
    signal temp_input_V_load_24_reg_2888 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal temp_input_V_load_25_reg_2894 : STD_LOGIC_VECTOR (35 downto 0);
    signal temp_input_V_load_26_reg_2905 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal temp_input_V_load_27_reg_2911 : STD_LOGIC_VECTOR (35 downto 0);
    signal input_V_load_reg_2917 : STD_LOGIC_VECTOR (35 downto 0);
    signal temp_input_V_load_28_reg_2922 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal temp_input_V_load_29_reg_2928 : STD_LOGIC_VECTOR (35 downto 0);
    signal sext_ln1116_fu_1061_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_reg_2934 : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal sext_ln1116_1_fu_1064_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_1_reg_2939 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_2_fu_1067_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_2_reg_2944 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_3_fu_1070_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_3_reg_2949 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_4_fu_1073_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_4_reg_2954 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_5_fu_1076_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_5_reg_2959 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_6_fu_1079_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_6_reg_2964 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_7_fu_1082_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_7_reg_2969 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_8_fu_1085_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_8_reg_2974 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_9_fu_1088_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_9_reg_2979 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_10_fu_1091_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_10_reg_2984 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_11_fu_1094_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_11_reg_2989 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_12_fu_1097_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_12_reg_2994 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_13_fu_1100_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_13_reg_2999 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_14_fu_1103_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_14_reg_3004 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_15_fu_1106_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_15_reg_3009 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_16_fu_1109_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_16_reg_3014 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_17_fu_1112_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_17_reg_3019 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_18_fu_1115_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_18_reg_3024 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_19_fu_1118_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_19_reg_3029 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_20_fu_1121_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_20_reg_3034 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_21_fu_1124_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_21_reg_3039 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_22_fu_1127_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_22_reg_3044 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_23_fu_1130_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_23_reg_3049 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_24_fu_1133_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_24_reg_3054 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_25_fu_1136_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_25_reg_3059 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_26_fu_1139_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_26_reg_3064 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_27_fu_1142_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_27_reg_3069 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_28_fu_1145_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_28_reg_3074 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_29_fu_1148_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_29_reg_3079 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_30_fu_1151_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln1116_30_reg_3084 : STD_LOGIC_VECTOR (37 downto 0);
    signal icmp_ln113_fu_1154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state36_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state37_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state38_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state39_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state40_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_state41_pp2_stage0_iter5 : BOOLEAN;
    signal ap_block_state42_pp2_stage0_iter6 : BOOLEAN;
    signal ap_block_state43_pp2_stage0_iter7 : BOOLEAN;
    signal ap_block_state44_pp2_stage0_iter8 : BOOLEAN;
    signal ap_block_state45_pp2_stage0_iter9 : BOOLEAN;
    signal ap_block_state46_pp2_stage0_iter10 : BOOLEAN;
    signal ap_block_state47_pp2_stage0_iter11 : BOOLEAN;
    signal ap_block_state48_pp2_stage0_iter12 : BOOLEAN;
    signal ap_block_state49_pp2_stage0_iter13 : BOOLEAN;
    signal ap_block_state50_pp2_stage0_iter14 : BOOLEAN;
    signal ap_block_state51_pp2_stage0_iter15 : BOOLEAN;
    signal ap_block_state52_pp2_stage0_iter16 : BOOLEAN;
    signal ap_block_state53_pp2_stage0_iter17 : BOOLEAN;
    signal ap_block_state54_pp2_stage0_iter18 : BOOLEAN;
    signal ap_block_state55_pp2_stage0_iter19 : BOOLEAN;
    signal ap_block_state56_pp2_stage0_iter20 : BOOLEAN;
    signal ap_block_state57_pp2_stage0_iter21 : BOOLEAN;
    signal ap_block_state58_pp2_stage0_iter22 : BOOLEAN;
    signal ap_block_state59_pp2_stage0_iter23 : BOOLEAN;
    signal ap_block_state60_pp2_stage0_iter24 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal add_ln113_fu_1160_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal i_2_cast_fu_1166_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast_reg_3098 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast_reg_3098_pp2_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast_reg_3098_pp2_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast_reg_3098_pp2_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast_reg_3098_pp2_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast_reg_3098_pp2_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast_reg_3098_pp2_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast_reg_3098_pp2_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast_reg_3098_pp2_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast_reg_3098_pp2_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast_reg_3098_pp2_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast_reg_3098_pp2_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast_reg_3098_pp2_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast_reg_3098_pp2_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast_reg_3098_pp2_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast_reg_3098_pp2_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast_reg_3098_pp2_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast_reg_3098_pp2_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast_reg_3098_pp2_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast_reg_3098_pp2_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast_reg_3098_pp2_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast_reg_3098_pp2_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast_reg_3098_pp2_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast_reg_3098_pp2_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal codebook_V_0_load_reg_3147 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_1_load_reg_3152 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_2_load_reg_3157 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_3_load_reg_3187 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_4_load_reg_3192 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1184_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln1118_1_reg_3207 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_s_reg_3212 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_1192_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln1118_2_reg_3217 : STD_LOGIC_VECTOR (37 downto 0);
    signal codebook_V_5_load_reg_3232 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_6_load_reg_3237 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1210_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln1118_3_reg_3252 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_41_reg_3257 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_1218_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln1118_4_reg_3262 : STD_LOGIC_VECTOR (37 downto 0);
    signal codebook_V_7_load_reg_3277 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_8_load_reg_3282 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1287_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln1118_5_reg_3297 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_4_reg_3302 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_1295_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln1118_6_reg_3307 : STD_LOGIC_VECTOR (37 downto 0);
    signal codebook_V_9_load_reg_3322 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_10_load_reg_3327 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1360_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln1118_7_reg_3342 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_6_reg_3347 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_1368_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln1118_8_reg_3352 : STD_LOGIC_VECTOR (37 downto 0);
    signal codebook_V_11_load_reg_3367 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_12_load_reg_3372 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1429_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln1118_9_reg_3387 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_8_reg_3392 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_1437_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln1118_10_reg_3397 : STD_LOGIC_VECTOR (37 downto 0);
    signal codebook_V_13_load_reg_3412 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_14_load_reg_3417 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1498_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln1118_11_reg_3432 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_10_reg_3437 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_1506_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln1118_12_reg_3442 : STD_LOGIC_VECTOR (37 downto 0);
    signal codebook_V_15_load_reg_3457 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_16_load_reg_3462 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1567_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln1118_13_reg_3477 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_12_reg_3482 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_1575_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln1118_14_reg_3487 : STD_LOGIC_VECTOR (37 downto 0);
    signal codebook_V_17_load_reg_3502 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_18_load_reg_3507 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1636_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln1118_15_reg_3522 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_14_reg_3527 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_1644_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln1118_16_reg_3532 : STD_LOGIC_VECTOR (37 downto 0);
    signal codebook_V_19_load_reg_3547 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_20_load_reg_3552 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1705_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln1118_17_reg_3567 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_16_reg_3572 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_1713_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln1118_18_reg_3577 : STD_LOGIC_VECTOR (37 downto 0);
    signal codebook_V_21_load_reg_3592 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_22_load_reg_3597 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1774_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln1118_19_reg_3612 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_18_reg_3617 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_1782_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln1118_20_reg_3622 : STD_LOGIC_VECTOR (37 downto 0);
    signal codebook_V_23_load_reg_3637 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_24_load_reg_3642 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1843_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln1118_21_reg_3657 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_20_reg_3662 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_1851_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln1118_22_reg_3667 : STD_LOGIC_VECTOR (37 downto 0);
    signal codebook_V_25_load_reg_3682 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_26_load_reg_3687 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1912_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln1118_23_reg_3702 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_22_reg_3707 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_1920_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln1118_24_reg_3712 : STD_LOGIC_VECTOR (37 downto 0);
    signal codebook_V_27_load_reg_3727 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_28_load_reg_3732 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_1981_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln1118_25_reg_3747 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_24_reg_3752 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_1989_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln1118_26_reg_3757 : STD_LOGIC_VECTOR (37 downto 0);
    signal codebook_V_29_load_reg_3772 : STD_LOGIC_VECTOR (1 downto 0);
    signal codebook_V_30_load_reg_3777 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_2050_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln1118_27_reg_3782 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_26_reg_3787 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_2058_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln1118_28_reg_3792 : STD_LOGIC_VECTOR (37 downto 0);
    signal grp_fu_2119_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln1118_29_reg_3807 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_28_reg_3812 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_2127_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln1118_30_reg_3817 : STD_LOGIC_VECTOR (37 downto 0);
    signal correlators_output_V_addr_2_reg_3822 : STD_LOGIC_VECTOR (5 downto 0);
    signal correlators_output_V_addr_2_reg_3822_pp2_iter18_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1192_29_fu_2222_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal add_ln1192_29_reg_3828 : STD_LOGIC_VECTOR (40 downto 0);
    signal trunc_ln708_1_reg_3833 : STD_LOGIC_VECTOR (35 downto 0);
    signal correlators_output_V_q1 : STD_LOGIC_VECTOR (35 downto 0);
    signal correlators_output_V_load_reg_3842 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_enable_reg_pp2_iter18 : STD_LOGIC := '0';
    signal icmp_ln1494_fu_2238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_reg_3847 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_reg_3847_pp2_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_reg_3847_pp2_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_reg_3847_pp2_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_reg_3847_pp2_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_fu_2242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_3851 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_3851_pp2_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_3851_pp2_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_3851_pp2_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_7_fu_2247_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_7_reg_3856 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_7_reg_3856_pp2_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_7_reg_3856_pp2_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_7_reg_3856_pp2_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_2259_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal p_Val2_s_reg_3861 : STD_LOGIC_VECTOR (35 downto 0);
    signal p_Val2_s_reg_3861_pp2_iter20_reg : STD_LOGIC_VECTOR (35 downto 0);
    signal p_Val2_s_reg_3861_pp2_iter21_reg : STD_LOGIC_VECTOR (35 downto 0);
    signal p_Result_s_fu_2266_p4 : STD_LOGIC_VECTOR (35 downto 0);
    signal p_Result_s_reg_3869 : STD_LOGIC_VECTOR (35 downto 0);
    signal sub_ln944_fu_2295_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_reg_3874 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_reg_3874_pp2_iter21_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln947_fu_2301_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln947_reg_3881 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln943_fu_2305_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_3886 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_3886_pp2_iter21_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_3886_pp2_iter22_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lsb_index_fu_2309_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_reg_3891 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln946_fu_2324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln946_reg_3897 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln949_fu_2366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln949_reg_3902 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln954_fu_2372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln954_reg_3907 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_4_reg_3913 : STD_LOGIC_VECTOR (35 downto 0);
    signal p_Result_5_reg_3918 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln935_fu_2531_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln935_reg_3923 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state36 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter24 : STD_LOGIC := '0';
    signal correlators_output_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal correlators_output_V_ce0 : STD_LOGIC;
    signal correlators_output_V_we0 : STD_LOGIC;
    signal correlators_output_V_d0 : STD_LOGIC_VECTOR (35 downto 0);
    signal correlators_output_V_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal correlators_output_V_ce1 : STD_LOGIC;
    signal temp_input_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_input_V_ce0 : STD_LOGIC;
    signal temp_input_V_we0 : STD_LOGIC;
    signal temp_input_V_d0 : STD_LOGIC_VECTOR (35 downto 0);
    signal temp_input_V_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_input_V_ce1 : STD_LOGIC;
    signal temp_input_V_we1 : STD_LOGIC;
    signal temp_input_V_d1 : STD_LOGIC_VECTOR (35 downto 0);
    signal i_reg_965 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln93_fu_1010_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_976 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln96_fu_1027_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_reg_987 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal i_cast_fu_1022_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_cast_fu_1039_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln101_fu_1056_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal grp_fu_1176_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_1184_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_1192_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_1176_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal grp_fu_1210_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_1218_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln_fu_1223_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal sext_ln703_fu_1230_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal sext_ln1192_fu_1234_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal add_ln1192_1_fu_1237_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal trunc_ln708_s_fu_1243_p4 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_2_fu_1253_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal sext_ln1192_38_fu_1261_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln1192_39_fu_1265_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal add_ln1192_2_fu_1268_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1287_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_1295_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_42_fu_1300_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal sext_ln728_fu_1307_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln1192_10_fu_1311_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal add_ln1192_3_fu_1314_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_3_fu_1320_p4 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln728_1_fu_1330_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln1192_11_fu_1338_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal add_ln1192_4_fu_1341_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal grp_fu_1360_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_1368_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln728_2_fu_1373_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln1192_12_fu_1380_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal add_ln1192_5_fu_1383_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_5_fu_1389_p4 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln728_3_fu_1399_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln1192_13_fu_1407_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal add_ln1192_6_fu_1410_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal grp_fu_1429_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_1437_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln728_4_fu_1442_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln1192_14_fu_1449_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal add_ln1192_7_fu_1452_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_7_fu_1458_p4 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln728_5_fu_1468_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln1192_15_fu_1476_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal add_ln1192_8_fu_1479_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal grp_fu_1498_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_1506_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln728_6_fu_1511_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln1192_16_fu_1518_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal add_ln1192_9_fu_1521_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_9_fu_1527_p4 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln728_7_fu_1537_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln1192_17_fu_1545_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal add_ln1192_10_fu_1548_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal grp_fu_1567_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_1575_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln728_8_fu_1580_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln1192_18_fu_1587_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal add_ln1192_11_fu_1590_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_11_fu_1596_p4 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln728_9_fu_1606_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln1192_19_fu_1614_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal add_ln1192_12_fu_1617_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal grp_fu_1636_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_1644_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln728_s_fu_1649_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln1192_20_fu_1656_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal add_ln1192_13_fu_1659_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_13_fu_1665_p4 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln728_10_fu_1675_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln1192_21_fu_1683_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal add_ln1192_14_fu_1686_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal grp_fu_1705_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_1713_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln728_11_fu_1718_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln1192_22_fu_1725_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal add_ln1192_15_fu_1728_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_15_fu_1734_p4 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln728_12_fu_1744_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln1192_23_fu_1752_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal add_ln1192_16_fu_1755_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal grp_fu_1774_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_1782_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln728_13_fu_1787_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln1192_24_fu_1794_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal add_ln1192_17_fu_1797_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_17_fu_1803_p4 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln728_14_fu_1813_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln1192_25_fu_1821_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal add_ln1192_18_fu_1824_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal grp_fu_1843_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_1851_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln728_15_fu_1856_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln1192_26_fu_1863_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal add_ln1192_19_fu_1866_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_19_fu_1872_p4 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln728_16_fu_1882_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln1192_27_fu_1890_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal add_ln1192_20_fu_1893_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal grp_fu_1912_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_1920_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln728_17_fu_1925_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln1192_28_fu_1932_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal add_ln1192_21_fu_1935_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_21_fu_1941_p4 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln728_18_fu_1951_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln1192_29_fu_1959_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal add_ln1192_22_fu_1962_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal grp_fu_1981_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_1989_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln728_19_fu_1994_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln1192_30_fu_2001_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal add_ln1192_fu_2004_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_23_fu_2010_p4 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln728_20_fu_2020_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln1192_31_fu_2028_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal add_ln1192_23_fu_2031_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal grp_fu_2050_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_2058_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln728_21_fu_2063_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln1192_32_fu_2070_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal add_ln1192_24_fu_2073_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_25_fu_2079_p4 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln728_22_fu_2089_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln1192_33_fu_2097_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal add_ln1192_25_fu_2100_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal grp_fu_2119_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_2127_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln728_23_fu_2132_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln1192_34_fu_2139_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal add_ln1192_26_fu_2142_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_27_fu_2148_p4 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln728_24_fu_2158_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln1192_35_fu_2166_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal add_ln1192_27_fu_2169_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal shl_ln728_25_fu_2185_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln1192_36_fu_2192_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal add_ln1192_28_fu_2195_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal tmp_29_fu_2201_p4 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln728_26_fu_2211_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln1192_37_fu_2219_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal sub_ln939_fu_2254_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal p_Result_3_fu_2276_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_2283_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal l_fu_2291_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_fu_2314_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln947_fu_2330_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln947_fu_2335_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal zext_ln949_fu_2345_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal lshr_ln947_fu_2339_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln949_fu_2349_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal or_ln949_1_fu_2355_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal and_ln949_fu_2361_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_45_fu_2378_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_8_fu_2391_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_fu_2385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln955_fu_2403_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln955_fu_2408_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln954_fu_2423_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln954_fu_2428_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal select_ln946_fu_2417_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_1_fu_2397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln954_fu_2432_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln955_fu_2412_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal m_fu_2444_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal select_ln954_fu_2437_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln951_fu_2451_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal zext_ln961_fu_2455_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal m_1_fu_2459_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal select_ln943_fu_2486_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln964_fu_2493_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_fu_2498_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln951_1_fu_2483_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_2504_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_9_fu_2511_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln743_fu_2523_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln744_fu_2527_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln101_fu_1044_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (36 downto 0);
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;

    component e2e_system_mul_36s_2s_38_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (35 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (37 downto 0) );
    end component;


    component e2e_system_correlator_codebook_V_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component e2e_system_correlator_codebook_V_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component e2e_system_correlator_codebook_V_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component e2e_system_correlator_codebook_V_3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component e2e_system_correlator_codebook_V_4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component e2e_system_correlator_codebook_V_5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component e2e_system_correlator_codebook_V_6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component e2e_system_correlator_codebook_V_7 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component e2e_system_correlator_codebook_V_8 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component e2e_system_correlator_codebook_V_9 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component e2e_system_correlator_codebook_V_10 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component e2e_system_correlator_codebook_V_11 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component e2e_system_correlator_codebook_V_12 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component e2e_system_correlator_codebook_V_13 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component e2e_system_correlator_codebook_V_14 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component e2e_system_correlator_codebook_V_15 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component e2e_system_correlator_codebook_V_16 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component e2e_system_correlator_codebook_V_17 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component e2e_system_correlator_codebook_V_18 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component e2e_system_correlator_codebook_V_19 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component e2e_system_correlator_codebook_V_20 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component e2e_system_correlator_codebook_V_21 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component e2e_system_correlator_codebook_V_22 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component e2e_system_correlator_codebook_V_23 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component e2e_system_correlator_codebook_V_24 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component e2e_system_correlator_codebook_V_25 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component e2e_system_correlator_codebook_V_26 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component e2e_system_correlator_codebook_V_27 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component e2e_system_correlator_codebook_V_28 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component e2e_system_correlator_codebook_V_29 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component e2e_system_correlator_codebook_V_30 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component e2e_system_correlator_correlators_output_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (35 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component e2e_system_correlator_temp_input_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (35 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (35 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (35 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;



begin
    codebook_V_0_U : component e2e_system_correlator_codebook_V_0
    generic map (
        DataWidth => 2,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_0_address0,
        ce0 => codebook_V_0_ce0,
        q0 => codebook_V_0_q0);

    codebook_V_1_U : component e2e_system_correlator_codebook_V_1
    generic map (
        DataWidth => 2,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_1_address0,
        ce0 => codebook_V_1_ce0,
        q0 => codebook_V_1_q0);

    codebook_V_2_U : component e2e_system_correlator_codebook_V_2
    generic map (
        DataWidth => 2,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_2_address0,
        ce0 => codebook_V_2_ce0,
        q0 => codebook_V_2_q0);

    codebook_V_3_U : component e2e_system_correlator_codebook_V_3
    generic map (
        DataWidth => 2,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_3_address0,
        ce0 => codebook_V_3_ce0,
        q0 => codebook_V_3_q0);

    codebook_V_4_U : component e2e_system_correlator_codebook_V_4
    generic map (
        DataWidth => 2,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_4_address0,
        ce0 => codebook_V_4_ce0,
        q0 => codebook_V_4_q0);

    codebook_V_5_U : component e2e_system_correlator_codebook_V_5
    generic map (
        DataWidth => 2,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_5_address0,
        ce0 => codebook_V_5_ce0,
        q0 => codebook_V_5_q0);

    codebook_V_6_U : component e2e_system_correlator_codebook_V_6
    generic map (
        DataWidth => 2,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_6_address0,
        ce0 => codebook_V_6_ce0,
        q0 => codebook_V_6_q0);

    codebook_V_7_U : component e2e_system_correlator_codebook_V_7
    generic map (
        DataWidth => 2,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_7_address0,
        ce0 => codebook_V_7_ce0,
        q0 => codebook_V_7_q0);

    codebook_V_8_U : component e2e_system_correlator_codebook_V_8
    generic map (
        DataWidth => 2,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_8_address0,
        ce0 => codebook_V_8_ce0,
        q0 => codebook_V_8_q0);

    codebook_V_9_U : component e2e_system_correlator_codebook_V_9
    generic map (
        DataWidth => 2,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_9_address0,
        ce0 => codebook_V_9_ce0,
        q0 => codebook_V_9_q0);

    codebook_V_10_U : component e2e_system_correlator_codebook_V_10
    generic map (
        DataWidth => 2,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_10_address0,
        ce0 => codebook_V_10_ce0,
        q0 => codebook_V_10_q0);

    codebook_V_11_U : component e2e_system_correlator_codebook_V_11
    generic map (
        DataWidth => 2,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_11_address0,
        ce0 => codebook_V_11_ce0,
        q0 => codebook_V_11_q0);

    codebook_V_12_U : component e2e_system_correlator_codebook_V_12
    generic map (
        DataWidth => 2,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_12_address0,
        ce0 => codebook_V_12_ce0,
        q0 => codebook_V_12_q0);

    codebook_V_13_U : component e2e_system_correlator_codebook_V_13
    generic map (
        DataWidth => 2,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_13_address0,
        ce0 => codebook_V_13_ce0,
        q0 => codebook_V_13_q0);

    codebook_V_14_U : component e2e_system_correlator_codebook_V_14
    generic map (
        DataWidth => 2,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_14_address0,
        ce0 => codebook_V_14_ce0,
        q0 => codebook_V_14_q0);

    codebook_V_15_U : component e2e_system_correlator_codebook_V_15
    generic map (
        DataWidth => 2,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_15_address0,
        ce0 => codebook_V_15_ce0,
        q0 => codebook_V_15_q0);

    codebook_V_16_U : component e2e_system_correlator_codebook_V_16
    generic map (
        DataWidth => 2,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_16_address0,
        ce0 => codebook_V_16_ce0,
        q0 => codebook_V_16_q0);

    codebook_V_17_U : component e2e_system_correlator_codebook_V_17
    generic map (
        DataWidth => 2,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_17_address0,
        ce0 => codebook_V_17_ce0,
        q0 => codebook_V_17_q0);

    codebook_V_18_U : component e2e_system_correlator_codebook_V_18
    generic map (
        DataWidth => 2,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_18_address0,
        ce0 => codebook_V_18_ce0,
        q0 => codebook_V_18_q0);

    codebook_V_19_U : component e2e_system_correlator_codebook_V_19
    generic map (
        DataWidth => 2,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_19_address0,
        ce0 => codebook_V_19_ce0,
        q0 => codebook_V_19_q0);

    codebook_V_20_U : component e2e_system_correlator_codebook_V_20
    generic map (
        DataWidth => 2,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_20_address0,
        ce0 => codebook_V_20_ce0,
        q0 => codebook_V_20_q0);

    codebook_V_21_U : component e2e_system_correlator_codebook_V_21
    generic map (
        DataWidth => 2,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_21_address0,
        ce0 => codebook_V_21_ce0,
        q0 => codebook_V_21_q0);

    codebook_V_22_U : component e2e_system_correlator_codebook_V_22
    generic map (
        DataWidth => 2,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_22_address0,
        ce0 => codebook_V_22_ce0,
        q0 => codebook_V_22_q0);

    codebook_V_23_U : component e2e_system_correlator_codebook_V_23
    generic map (
        DataWidth => 2,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_23_address0,
        ce0 => codebook_V_23_ce0,
        q0 => codebook_V_23_q0);

    codebook_V_24_U : component e2e_system_correlator_codebook_V_24
    generic map (
        DataWidth => 2,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_24_address0,
        ce0 => codebook_V_24_ce0,
        q0 => codebook_V_24_q0);

    codebook_V_25_U : component e2e_system_correlator_codebook_V_25
    generic map (
        DataWidth => 2,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_25_address0,
        ce0 => codebook_V_25_ce0,
        q0 => codebook_V_25_q0);

    codebook_V_26_U : component e2e_system_correlator_codebook_V_26
    generic map (
        DataWidth => 2,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_26_address0,
        ce0 => codebook_V_26_ce0,
        q0 => codebook_V_26_q0);

    codebook_V_27_U : component e2e_system_correlator_codebook_V_27
    generic map (
        DataWidth => 2,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_27_address0,
        ce0 => codebook_V_27_ce0,
        q0 => codebook_V_27_q0);

    codebook_V_28_U : component e2e_system_correlator_codebook_V_28
    generic map (
        DataWidth => 2,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_28_address0,
        ce0 => codebook_V_28_ce0,
        q0 => codebook_V_28_q0);

    codebook_V_29_U : component e2e_system_correlator_codebook_V_29
    generic map (
        DataWidth => 2,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_29_address0,
        ce0 => codebook_V_29_ce0,
        q0 => codebook_V_29_q0);

    codebook_V_30_U : component e2e_system_correlator_codebook_V_30
    generic map (
        DataWidth => 2,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => codebook_V_30_address0,
        ce0 => codebook_V_30_ce0,
        q0 => codebook_V_30_q0);

    correlators_output_V_U : component e2e_system_correlator_correlators_output_V
    generic map (
        DataWidth => 36,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => correlators_output_V_address0,
        ce0 => correlators_output_V_ce0,
        we0 => correlators_output_V_we0,
        d0 => correlators_output_V_d0,
        address1 => correlators_output_V_address1,
        ce1 => correlators_output_V_ce1,
        q1 => correlators_output_V_q1);

    temp_input_V_U : component e2e_system_correlator_temp_input_V
    generic map (
        DataWidth => 36,
        AddressRange => 31,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_input_V_address0,
        ce0 => temp_input_V_ce0,
        we0 => temp_input_V_we0,
        d0 => temp_input_V_d0,
        q0 => temp_input_V_q0,
        address1 => temp_input_V_address1,
        ce1 => temp_input_V_ce1,
        we1 => temp_input_V_we1,
        d1 => temp_input_V_d1,
        q1 => temp_input_V_q1);

    mul_36s_2s_38_2_1_U38 : component e2e_system_mul_36s_2s_38_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 2,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1176_p0,
        din1 => codebook_V_0_load_reg_3147,
        ce => ap_const_logic_1,
        dout => grp_fu_1176_p2);

    mul_36s_2s_38_2_1_U39 : component e2e_system_mul_36s_2s_38_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 2,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1184_p0,
        din1 => codebook_V_1_load_reg_3152,
        ce => ap_const_logic_1,
        dout => grp_fu_1184_p2);

    mul_36s_2s_38_2_1_U40 : component e2e_system_mul_36s_2s_38_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 2,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1192_p0,
        din1 => codebook_V_2_load_reg_3157,
        ce => ap_const_logic_1,
        dout => grp_fu_1192_p2);

    mul_36s_2s_38_2_1_U41 : component e2e_system_mul_36s_2s_38_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 2,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1210_p0,
        din1 => codebook_V_3_load_reg_3187,
        ce => ap_const_logic_1,
        dout => grp_fu_1210_p2);

    mul_36s_2s_38_2_1_U42 : component e2e_system_mul_36s_2s_38_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 2,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1218_p0,
        din1 => codebook_V_4_load_reg_3192,
        ce => ap_const_logic_1,
        dout => grp_fu_1218_p2);

    mul_36s_2s_38_2_1_U43 : component e2e_system_mul_36s_2s_38_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 2,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1287_p0,
        din1 => codebook_V_5_load_reg_3232,
        ce => ap_const_logic_1,
        dout => grp_fu_1287_p2);

    mul_36s_2s_38_2_1_U44 : component e2e_system_mul_36s_2s_38_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 2,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1295_p0,
        din1 => codebook_V_6_load_reg_3237,
        ce => ap_const_logic_1,
        dout => grp_fu_1295_p2);

    mul_36s_2s_38_2_1_U45 : component e2e_system_mul_36s_2s_38_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 2,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1360_p0,
        din1 => codebook_V_7_load_reg_3277,
        ce => ap_const_logic_1,
        dout => grp_fu_1360_p2);

    mul_36s_2s_38_2_1_U46 : component e2e_system_mul_36s_2s_38_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 2,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1368_p0,
        din1 => codebook_V_8_load_reg_3282,
        ce => ap_const_logic_1,
        dout => grp_fu_1368_p2);

    mul_36s_2s_38_2_1_U47 : component e2e_system_mul_36s_2s_38_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 2,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1429_p0,
        din1 => codebook_V_9_load_reg_3322,
        ce => ap_const_logic_1,
        dout => grp_fu_1429_p2);

    mul_36s_2s_38_2_1_U48 : component e2e_system_mul_36s_2s_38_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 2,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1437_p0,
        din1 => codebook_V_10_load_reg_3327,
        ce => ap_const_logic_1,
        dout => grp_fu_1437_p2);

    mul_36s_2s_38_2_1_U49 : component e2e_system_mul_36s_2s_38_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 2,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1498_p0,
        din1 => codebook_V_11_load_reg_3367,
        ce => ap_const_logic_1,
        dout => grp_fu_1498_p2);

    mul_36s_2s_38_2_1_U50 : component e2e_system_mul_36s_2s_38_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 2,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1506_p0,
        din1 => codebook_V_12_load_reg_3372,
        ce => ap_const_logic_1,
        dout => grp_fu_1506_p2);

    mul_36s_2s_38_2_1_U51 : component e2e_system_mul_36s_2s_38_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 2,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1567_p0,
        din1 => codebook_V_13_load_reg_3412,
        ce => ap_const_logic_1,
        dout => grp_fu_1567_p2);

    mul_36s_2s_38_2_1_U52 : component e2e_system_mul_36s_2s_38_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 2,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1575_p0,
        din1 => codebook_V_14_load_reg_3417,
        ce => ap_const_logic_1,
        dout => grp_fu_1575_p2);

    mul_36s_2s_38_2_1_U53 : component e2e_system_mul_36s_2s_38_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 2,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1636_p0,
        din1 => codebook_V_15_load_reg_3457,
        ce => ap_const_logic_1,
        dout => grp_fu_1636_p2);

    mul_36s_2s_38_2_1_U54 : component e2e_system_mul_36s_2s_38_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 2,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1644_p0,
        din1 => codebook_V_16_load_reg_3462,
        ce => ap_const_logic_1,
        dout => grp_fu_1644_p2);

    mul_36s_2s_38_2_1_U55 : component e2e_system_mul_36s_2s_38_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 2,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1705_p0,
        din1 => codebook_V_17_load_reg_3502,
        ce => ap_const_logic_1,
        dout => grp_fu_1705_p2);

    mul_36s_2s_38_2_1_U56 : component e2e_system_mul_36s_2s_38_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 2,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1713_p0,
        din1 => codebook_V_18_load_reg_3507,
        ce => ap_const_logic_1,
        dout => grp_fu_1713_p2);

    mul_36s_2s_38_2_1_U57 : component e2e_system_mul_36s_2s_38_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 2,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1774_p0,
        din1 => codebook_V_19_load_reg_3547,
        ce => ap_const_logic_1,
        dout => grp_fu_1774_p2);

    mul_36s_2s_38_2_1_U58 : component e2e_system_mul_36s_2s_38_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 2,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1782_p0,
        din1 => codebook_V_20_load_reg_3552,
        ce => ap_const_logic_1,
        dout => grp_fu_1782_p2);

    mul_36s_2s_38_2_1_U59 : component e2e_system_mul_36s_2s_38_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 2,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1843_p0,
        din1 => codebook_V_21_load_reg_3592,
        ce => ap_const_logic_1,
        dout => grp_fu_1843_p2);

    mul_36s_2s_38_2_1_U60 : component e2e_system_mul_36s_2s_38_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 2,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1851_p0,
        din1 => codebook_V_22_load_reg_3597,
        ce => ap_const_logic_1,
        dout => grp_fu_1851_p2);

    mul_36s_2s_38_2_1_U61 : component e2e_system_mul_36s_2s_38_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 2,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1912_p0,
        din1 => codebook_V_23_load_reg_3637,
        ce => ap_const_logic_1,
        dout => grp_fu_1912_p2);

    mul_36s_2s_38_2_1_U62 : component e2e_system_mul_36s_2s_38_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 2,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1920_p0,
        din1 => codebook_V_24_load_reg_3642,
        ce => ap_const_logic_1,
        dout => grp_fu_1920_p2);

    mul_36s_2s_38_2_1_U63 : component e2e_system_mul_36s_2s_38_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 2,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1981_p0,
        din1 => codebook_V_25_load_reg_3682,
        ce => ap_const_logic_1,
        dout => grp_fu_1981_p2);

    mul_36s_2s_38_2_1_U64 : component e2e_system_mul_36s_2s_38_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 2,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1989_p0,
        din1 => codebook_V_26_load_reg_3687,
        ce => ap_const_logic_1,
        dout => grp_fu_1989_p2);

    mul_36s_2s_38_2_1_U65 : component e2e_system_mul_36s_2s_38_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 2,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_2050_p0,
        din1 => codebook_V_27_load_reg_3727,
        ce => ap_const_logic_1,
        dout => grp_fu_2050_p2);

    mul_36s_2s_38_2_1_U66 : component e2e_system_mul_36s_2s_38_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 2,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_2058_p0,
        din1 => codebook_V_28_load_reg_3732,
        ce => ap_const_logic_1,
        dout => grp_fu_2058_p2);

    mul_36s_2s_38_2_1_U67 : component e2e_system_mul_36s_2s_38_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 2,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_2119_p0,
        din1 => codebook_V_29_load_reg_3772,
        ce => ap_const_logic_1,
        dout => grp_fu_2119_p2);

    mul_36s_2s_38_2_1_U68 : component e2e_system_mul_36s_2s_38_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 36,
        din1_WIDTH => 2,
        dout_WIDTH => 38)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_2127_p0,
        din1 => codebook_V_30_load_reg_3777,
        ce => ap_const_logic_1,
        dout => grp_fu_2127_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state36) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state36)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state36);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter12 <= ap_enable_reg_pp2_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter13 <= ap_enable_reg_pp2_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter14 <= ap_enable_reg_pp2_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter15 <= ap_enable_reg_pp2_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter16 <= ap_enable_reg_pp2_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter17 <= ap_enable_reg_pp2_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter18 <= ap_enable_reg_pp2_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter19 <= ap_enable_reg_pp2_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter20 <= ap_enable_reg_pp2_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter21 <= ap_enable_reg_pp2_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter22 <= ap_enable_reg_pp2_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter23 <= ap_enable_reg_pp2_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter24 <= ap_enable_reg_pp2_iter23;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                    ap_enable_reg_pp2_iter24 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_976_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_1_reg_976 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln96_fu_1027_p2 = ap_const_lv1_0))) then 
                i_1_reg_976 <= add_ln96_fu_1033_p2;
            end if; 
        end if;
    end process;

    i_2_reg_999_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln113_fu_1154_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                i_2_reg_999 <= add_ln113_fu_1160_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                i_2_reg_999 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_reg_965_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln93_fu_1010_p2 = ap_const_lv1_0))) then 
                i_reg_965 <= add_ln93_fu_1016_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_965 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_reg_987_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
                j_reg_987 <= add_ln101_reg_2739;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_reg_987 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln101_reg_2739 <= add_ln101_fu_1050_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                add_ln1192_29_reg_3828 <= add_ln1192_29_fu_2222_p2;
                codebook_V_10_load_reg_3327 <= codebook_V_10_q0;
                codebook_V_11_load_reg_3367 <= codebook_V_11_q0;
                codebook_V_12_load_reg_3372 <= codebook_V_12_q0;
                codebook_V_13_load_reg_3412 <= codebook_V_13_q0;
                codebook_V_14_load_reg_3417 <= codebook_V_14_q0;
                codebook_V_15_load_reg_3457 <= codebook_V_15_q0;
                codebook_V_16_load_reg_3462 <= codebook_V_16_q0;
                codebook_V_17_load_reg_3502 <= codebook_V_17_q0;
                codebook_V_18_load_reg_3507 <= codebook_V_18_q0;
                codebook_V_19_load_reg_3547 <= codebook_V_19_q0;
                codebook_V_20_load_reg_3552 <= codebook_V_20_q0;
                codebook_V_21_load_reg_3592 <= codebook_V_21_q0;
                codebook_V_22_load_reg_3597 <= codebook_V_22_q0;
                codebook_V_23_load_reg_3637 <= codebook_V_23_q0;
                codebook_V_24_load_reg_3642 <= codebook_V_24_q0;
                codebook_V_25_load_reg_3682 <= codebook_V_25_q0;
                codebook_V_26_load_reg_3687 <= codebook_V_26_q0;
                codebook_V_27_load_reg_3727 <= codebook_V_27_q0;
                codebook_V_28_load_reg_3732 <= codebook_V_28_q0;
                codebook_V_29_load_reg_3772 <= codebook_V_29_q0;
                codebook_V_30_load_reg_3777 <= codebook_V_30_q0;
                codebook_V_3_load_reg_3187 <= codebook_V_3_q0;
                codebook_V_4_load_reg_3192 <= codebook_V_4_q0;
                codebook_V_5_load_reg_3232 <= codebook_V_5_q0;
                codebook_V_6_load_reg_3237 <= codebook_V_6_q0;
                codebook_V_7_load_reg_3277 <= codebook_V_7_q0;
                codebook_V_8_load_reg_3282 <= codebook_V_8_q0;
                codebook_V_9_load_reg_3322 <= codebook_V_9_q0;
                correlators_output_V_addr_2_reg_3822 <= i_2_cast_reg_3098_pp2_iter16_reg(6 - 1 downto 0);
                correlators_output_V_addr_2_reg_3822_pp2_iter18_reg <= correlators_output_V_addr_2_reg_3822;
                    i_2_cast_reg_3098_pp2_iter10_reg(5 downto 0) <= i_2_cast_reg_3098_pp2_iter9_reg(5 downto 0);
                    i_2_cast_reg_3098_pp2_iter11_reg(5 downto 0) <= i_2_cast_reg_3098_pp2_iter10_reg(5 downto 0);
                    i_2_cast_reg_3098_pp2_iter12_reg(5 downto 0) <= i_2_cast_reg_3098_pp2_iter11_reg(5 downto 0);
                    i_2_cast_reg_3098_pp2_iter13_reg(5 downto 0) <= i_2_cast_reg_3098_pp2_iter12_reg(5 downto 0);
                    i_2_cast_reg_3098_pp2_iter14_reg(5 downto 0) <= i_2_cast_reg_3098_pp2_iter13_reg(5 downto 0);
                    i_2_cast_reg_3098_pp2_iter15_reg(5 downto 0) <= i_2_cast_reg_3098_pp2_iter14_reg(5 downto 0);
                    i_2_cast_reg_3098_pp2_iter16_reg(5 downto 0) <= i_2_cast_reg_3098_pp2_iter15_reg(5 downto 0);
                    i_2_cast_reg_3098_pp2_iter17_reg(5 downto 0) <= i_2_cast_reg_3098_pp2_iter16_reg(5 downto 0);
                    i_2_cast_reg_3098_pp2_iter18_reg(5 downto 0) <= i_2_cast_reg_3098_pp2_iter17_reg(5 downto 0);
                    i_2_cast_reg_3098_pp2_iter19_reg(5 downto 0) <= i_2_cast_reg_3098_pp2_iter18_reg(5 downto 0);
                    i_2_cast_reg_3098_pp2_iter20_reg(5 downto 0) <= i_2_cast_reg_3098_pp2_iter19_reg(5 downto 0);
                    i_2_cast_reg_3098_pp2_iter21_reg(5 downto 0) <= i_2_cast_reg_3098_pp2_iter20_reg(5 downto 0);
                    i_2_cast_reg_3098_pp2_iter22_reg(5 downto 0) <= i_2_cast_reg_3098_pp2_iter21_reg(5 downto 0);
                    i_2_cast_reg_3098_pp2_iter23_reg(5 downto 0) <= i_2_cast_reg_3098_pp2_iter22_reg(5 downto 0);
                    i_2_cast_reg_3098_pp2_iter2_reg(5 downto 0) <= i_2_cast_reg_3098_pp2_iter1_reg(5 downto 0);
                    i_2_cast_reg_3098_pp2_iter3_reg(5 downto 0) <= i_2_cast_reg_3098_pp2_iter2_reg(5 downto 0);
                    i_2_cast_reg_3098_pp2_iter4_reg(5 downto 0) <= i_2_cast_reg_3098_pp2_iter3_reg(5 downto 0);
                    i_2_cast_reg_3098_pp2_iter5_reg(5 downto 0) <= i_2_cast_reg_3098_pp2_iter4_reg(5 downto 0);
                    i_2_cast_reg_3098_pp2_iter6_reg(5 downto 0) <= i_2_cast_reg_3098_pp2_iter5_reg(5 downto 0);
                    i_2_cast_reg_3098_pp2_iter7_reg(5 downto 0) <= i_2_cast_reg_3098_pp2_iter6_reg(5 downto 0);
                    i_2_cast_reg_3098_pp2_iter8_reg(5 downto 0) <= i_2_cast_reg_3098_pp2_iter7_reg(5 downto 0);
                    i_2_cast_reg_3098_pp2_iter9_reg(5 downto 0) <= i_2_cast_reg_3098_pp2_iter8_reg(5 downto 0);
                icmp_ln1494_reg_3847 <= icmp_ln1494_fu_2238_p2;
                icmp_ln1494_reg_3847_pp2_iter20_reg <= icmp_ln1494_reg_3847;
                icmp_ln1494_reg_3847_pp2_iter21_reg <= icmp_ln1494_reg_3847_pp2_iter20_reg;
                icmp_ln1494_reg_3847_pp2_iter22_reg <= icmp_ln1494_reg_3847_pp2_iter21_reg;
                icmp_ln1494_reg_3847_pp2_iter23_reg <= icmp_ln1494_reg_3847_pp2_iter22_reg;
                icmp_ln935_reg_3851_pp2_iter20_reg <= icmp_ln935_reg_3851;
                icmp_ln935_reg_3851_pp2_iter21_reg <= icmp_ln935_reg_3851_pp2_iter20_reg;
                icmp_ln935_reg_3851_pp2_iter22_reg <= icmp_ln935_reg_3851_pp2_iter21_reg;
                mul_ln1118_10_reg_3397 <= grp_fu_1437_p2;
                mul_ln1118_11_reg_3432 <= grp_fu_1498_p2;
                mul_ln1118_12_reg_3442 <= grp_fu_1506_p2;
                mul_ln1118_13_reg_3477 <= grp_fu_1567_p2;
                mul_ln1118_14_reg_3487 <= grp_fu_1575_p2;
                mul_ln1118_15_reg_3522 <= grp_fu_1636_p2;
                mul_ln1118_16_reg_3532 <= grp_fu_1644_p2;
                mul_ln1118_17_reg_3567 <= grp_fu_1705_p2;
                mul_ln1118_18_reg_3577 <= grp_fu_1713_p2;
                mul_ln1118_19_reg_3612 <= grp_fu_1774_p2;
                mul_ln1118_1_reg_3207 <= grp_fu_1184_p2;
                mul_ln1118_20_reg_3622 <= grp_fu_1782_p2;
                mul_ln1118_21_reg_3657 <= grp_fu_1843_p2;
                mul_ln1118_22_reg_3667 <= grp_fu_1851_p2;
                mul_ln1118_23_reg_3702 <= grp_fu_1912_p2;
                mul_ln1118_24_reg_3712 <= grp_fu_1920_p2;
                mul_ln1118_25_reg_3747 <= grp_fu_1981_p2;
                mul_ln1118_26_reg_3757 <= grp_fu_1989_p2;
                mul_ln1118_27_reg_3782 <= grp_fu_2050_p2;
                mul_ln1118_28_reg_3792 <= grp_fu_2058_p2;
                mul_ln1118_29_reg_3807 <= grp_fu_2119_p2;
                mul_ln1118_2_reg_3217 <= grp_fu_1192_p2;
                mul_ln1118_30_reg_3817 <= grp_fu_2127_p2;
                mul_ln1118_3_reg_3252 <= grp_fu_1210_p2;
                mul_ln1118_4_reg_3262 <= grp_fu_1218_p2;
                mul_ln1118_5_reg_3297 <= grp_fu_1287_p2;
                mul_ln1118_6_reg_3307 <= grp_fu_1295_p2;
                mul_ln1118_7_reg_3342 <= grp_fu_1360_p2;
                mul_ln1118_8_reg_3352 <= grp_fu_1368_p2;
                mul_ln1118_9_reg_3387 <= grp_fu_1429_p2;
                p_Result_7_reg_3856_pp2_iter20_reg <= p_Result_7_reg_3856;
                p_Result_7_reg_3856_pp2_iter21_reg <= p_Result_7_reg_3856_pp2_iter20_reg;
                p_Result_7_reg_3856_pp2_iter22_reg <= p_Result_7_reg_3856_pp2_iter21_reg;
                p_Val2_s_reg_3861_pp2_iter20_reg <= p_Val2_s_reg_3861;
                p_Val2_s_reg_3861_pp2_iter21_reg <= p_Val2_s_reg_3861_pp2_iter20_reg;
                sub_ln944_reg_3874_pp2_iter21_reg <= sub_ln944_reg_3874;
                tmp_10_reg_3437 <= add_ln1192_10_fu_1548_p2(40 downto 5);
                tmp_12_reg_3482 <= add_ln1192_12_fu_1617_p2(40 downto 5);
                tmp_14_reg_3527 <= add_ln1192_14_fu_1686_p2(40 downto 5);
                tmp_16_reg_3572 <= add_ln1192_16_fu_1755_p2(40 downto 5);
                tmp_18_reg_3617 <= add_ln1192_18_fu_1824_p2(40 downto 5);
                tmp_20_reg_3662 <= add_ln1192_20_fu_1893_p2(40 downto 5);
                tmp_22_reg_3707 <= add_ln1192_22_fu_1962_p2(40 downto 5);
                tmp_24_reg_3752 <= add_ln1192_23_fu_2031_p2(40 downto 5);
                tmp_26_reg_3787 <= add_ln1192_25_fu_2100_p2(40 downto 5);
                tmp_28_reg_3812 <= add_ln1192_27_fu_2169_p2(40 downto 5);
                tmp_41_reg_3257 <= add_ln1192_2_fu_1268_p2(39 downto 5);
                tmp_4_reg_3302 <= add_ln1192_4_fu_1341_p2(40 downto 5);
                tmp_6_reg_3347 <= add_ln1192_6_fu_1410_p2(40 downto 5);
                tmp_8_reg_3392 <= add_ln1192_8_fu_1479_p2(40 downto 5);
                tmp_s_reg_3212 <= grp_fu_1176_p2(37 downto 5);
                trunc_ln708_1_reg_3833 <= add_ln1192_29_fu_2222_p2(40 downto 5);
                trunc_ln943_reg_3886_pp2_iter21_reg <= trunc_ln943_reg_3886;
                trunc_ln943_reg_3886_pp2_iter22_reg <= trunc_ln943_reg_3886_pp2_iter21_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                codebook_V_0_load_reg_3147 <= codebook_V_0_q0;
                codebook_V_1_load_reg_3152 <= codebook_V_1_q0;
                codebook_V_2_load_reg_3157 <= codebook_V_2_q0;
                    i_2_cast_reg_3098_pp2_iter1_reg(5 downto 0) <= i_2_cast_reg_3098(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                correlators_output_V_load_reg_3842 <= correlators_output_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln113_fu_1154_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                    i_2_cast_reg_3098(5 downto 0) <= i_2_cast_fu_1166_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1494_fu_2238_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln935_reg_3851 <= icmp_ln935_fu_2242_p2;
                p_Result_7_reg_3856 <= add_ln1192_29_reg_3828(40 downto 40);
                p_Result_s_reg_3869 <= p_Result_s_fu_2266_p4;
                p_Val2_s_reg_3861 <= p_Val2_s_fu_2259_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln935_reg_3851_pp2_iter20_reg = ap_const_lv1_0) and (icmp_ln1494_reg_3847_pp2_iter20_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln946_reg_3897 <= icmp_ln946_fu_2324_p2;
                icmp_ln949_reg_3902 <= icmp_ln949_fu_2366_p2;
                icmp_ln954_reg_3907 <= icmp_ln954_fu_2372_p2;
                lsb_index_reg_3891 <= lsb_index_fu_2309_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                input_V_load_reg_2917 <= input_V_q0;
                temp_input_V_load_26_reg_2905 <= temp_input_V_q0;
                temp_input_V_load_27_reg_2911 <= temp_input_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln935_reg_3851_pp2_iter21_reg = ap_const_lv1_0) and (icmp_ln1494_reg_3847_pp2_iter21_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                m_4_reg_3913 <= m_1_fu_2459_p2(36 downto 1);
                p_Result_5_reg_3918 <= m_1_fu_2459_p2(25 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1494_reg_3847_pp2_iter22_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                select_ln935_reg_3923 <= select_ln935_fu_2531_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                sext_ln1116_10_reg_2984 <= sext_ln1116_10_fu_1091_p1;
                sext_ln1116_11_reg_2989 <= sext_ln1116_11_fu_1094_p1;
                sext_ln1116_12_reg_2994 <= sext_ln1116_12_fu_1097_p1;
                sext_ln1116_13_reg_2999 <= sext_ln1116_13_fu_1100_p1;
                sext_ln1116_14_reg_3004 <= sext_ln1116_14_fu_1103_p1;
                sext_ln1116_15_reg_3009 <= sext_ln1116_15_fu_1106_p1;
                sext_ln1116_16_reg_3014 <= sext_ln1116_16_fu_1109_p1;
                sext_ln1116_17_reg_3019 <= sext_ln1116_17_fu_1112_p1;
                sext_ln1116_18_reg_3024 <= sext_ln1116_18_fu_1115_p1;
                sext_ln1116_19_reg_3029 <= sext_ln1116_19_fu_1118_p1;
                sext_ln1116_1_reg_2939 <= sext_ln1116_1_fu_1064_p1;
                sext_ln1116_20_reg_3034 <= sext_ln1116_20_fu_1121_p1;
                sext_ln1116_21_reg_3039 <= sext_ln1116_21_fu_1124_p1;
                sext_ln1116_22_reg_3044 <= sext_ln1116_22_fu_1127_p1;
                sext_ln1116_23_reg_3049 <= sext_ln1116_23_fu_1130_p1;
                sext_ln1116_24_reg_3054 <= sext_ln1116_24_fu_1133_p1;
                sext_ln1116_25_reg_3059 <= sext_ln1116_25_fu_1136_p1;
                sext_ln1116_26_reg_3064 <= sext_ln1116_26_fu_1139_p1;
                sext_ln1116_27_reg_3069 <= sext_ln1116_27_fu_1142_p1;
                sext_ln1116_28_reg_3074 <= sext_ln1116_28_fu_1145_p1;
                sext_ln1116_29_reg_3079 <= sext_ln1116_29_fu_1148_p1;
                sext_ln1116_2_reg_2944 <= sext_ln1116_2_fu_1067_p1;
                sext_ln1116_30_reg_3084 <= sext_ln1116_30_fu_1151_p1;
                sext_ln1116_3_reg_2949 <= sext_ln1116_3_fu_1070_p1;
                sext_ln1116_4_reg_2954 <= sext_ln1116_4_fu_1073_p1;
                sext_ln1116_5_reg_2959 <= sext_ln1116_5_fu_1076_p1;
                sext_ln1116_6_reg_2964 <= sext_ln1116_6_fu_1079_p1;
                sext_ln1116_7_reg_2969 <= sext_ln1116_7_fu_1082_p1;
                sext_ln1116_8_reg_2974 <= sext_ln1116_8_fu_1085_p1;
                sext_ln1116_9_reg_2979 <= sext_ln1116_9_fu_1088_p1;
                sext_ln1116_reg_2934 <= sext_ln1116_fu_1061_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln935_reg_3851 = ap_const_lv1_0) and (icmp_ln1494_reg_3847 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                sub_ln944_reg_3874 <= sub_ln944_fu_2295_p2;
                trunc_ln943_reg_3886 <= trunc_ln943_fu_2305_p1;
                trunc_ln947_reg_3881 <= trunc_ln947_fu_2301_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                temp_input_V_load_10_reg_2804 <= temp_input_V_q0;
                temp_input_V_load_11_reg_2810 <= temp_input_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                temp_input_V_load_12_reg_2816 <= temp_input_V_q0;
                temp_input_V_load_13_reg_2822 <= temp_input_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                temp_input_V_load_14_reg_2828 <= temp_input_V_q0;
                temp_input_V_load_15_reg_2834 <= temp_input_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                temp_input_V_load_16_reg_2840 <= temp_input_V_q0;
                temp_input_V_load_17_reg_2846 <= temp_input_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                temp_input_V_load_18_reg_2852 <= temp_input_V_q0;
                temp_input_V_load_19_reg_2858 <= temp_input_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                temp_input_V_load_1_reg_2750 <= temp_input_V_q0;
                temp_input_V_load_reg_2744 <= temp_input_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                temp_input_V_load_20_reg_2864 <= temp_input_V_q0;
                temp_input_V_load_21_reg_2870 <= temp_input_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                temp_input_V_load_22_reg_2876 <= temp_input_V_q0;
                temp_input_V_load_23_reg_2882 <= temp_input_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                temp_input_V_load_24_reg_2888 <= temp_input_V_q0;
                temp_input_V_load_25_reg_2894 <= temp_input_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                temp_input_V_load_28_reg_2922 <= temp_input_V_q0;
                temp_input_V_load_29_reg_2928 <= temp_input_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                temp_input_V_load_2_reg_2756 <= temp_input_V_q0;
                temp_input_V_load_3_reg_2762 <= temp_input_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                temp_input_V_load_4_reg_2768 <= temp_input_V_q0;
                temp_input_V_load_5_reg_2774 <= temp_input_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                temp_input_V_load_6_reg_2780 <= temp_input_V_q0;
                temp_input_V_load_7_reg_2786 <= temp_input_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                temp_input_V_load_8_reg_2792 <= temp_input_V_q0;
                temp_input_V_load_9_reg_2798 <= temp_input_V_q1;
            end if;
        end if;
    end process;
    i_2_cast_reg_3098(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    i_2_cast_reg_3098_pp2_iter1_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    i_2_cast_reg_3098_pp2_iter2_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    i_2_cast_reg_3098_pp2_iter3_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    i_2_cast_reg_3098_pp2_iter4_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    i_2_cast_reg_3098_pp2_iter5_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    i_2_cast_reg_3098_pp2_iter6_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    i_2_cast_reg_3098_pp2_iter7_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    i_2_cast_reg_3098_pp2_iter8_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    i_2_cast_reg_3098_pp2_iter9_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    i_2_cast_reg_3098_pp2_iter10_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    i_2_cast_reg_3098_pp2_iter11_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    i_2_cast_reg_3098_pp2_iter12_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    i_2_cast_reg_3098_pp2_iter13_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    i_2_cast_reg_3098_pp2_iter14_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    i_2_cast_reg_3098_pp2_iter15_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    i_2_cast_reg_3098_pp2_iter16_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    i_2_cast_reg_3098_pp2_iter17_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    i_2_cast_reg_3098_pp2_iter18_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    i_2_cast_reg_3098_pp2_iter19_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    i_2_cast_reg_3098_pp2_iter20_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    i_2_cast_reg_3098_pp2_iter21_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    i_2_cast_reg_3098_pp2_iter22_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    i_2_cast_reg_3098_pp2_iter23_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, icmp_ln113_fu_1154_p2, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter23, ap_enable_reg_pp2_iter24, icmp_ln93_fu_1010_p2, icmp_ln96_fu_1027_p2, icmp_ln101_fu_1044_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln93_fu_1010_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln96_fu_1027_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln101_fu_1044_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln113_fu_1154_p2 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter24 = ap_const_logic_1) and (ap_enable_reg_pp2_iter23 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln113_fu_1154_p2 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter24 = ap_const_logic_1) and (ap_enable_reg_pp2_iter23 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln101_fu_1050_p2 <= std_logic_vector(unsigned(j_reg_987) + unsigned(ap_const_lv8_1));
    add_ln113_fu_1160_p2 <= std_logic_vector(unsigned(i_2_reg_999) + unsigned(ap_const_lv6_1));
    add_ln1192_10_fu_1548_p2 <= std_logic_vector(unsigned(shl_ln728_7_fu_1537_p3) + unsigned(sext_ln1192_17_fu_1545_p1));
    add_ln1192_11_fu_1590_p2 <= std_logic_vector(unsigned(shl_ln728_8_fu_1580_p3) + unsigned(sext_ln1192_18_fu_1587_p1));
    add_ln1192_12_fu_1617_p2 <= std_logic_vector(unsigned(shl_ln728_9_fu_1606_p3) + unsigned(sext_ln1192_19_fu_1614_p1));
    add_ln1192_13_fu_1659_p2 <= std_logic_vector(unsigned(shl_ln728_s_fu_1649_p3) + unsigned(sext_ln1192_20_fu_1656_p1));
    add_ln1192_14_fu_1686_p2 <= std_logic_vector(unsigned(shl_ln728_10_fu_1675_p3) + unsigned(sext_ln1192_21_fu_1683_p1));
    add_ln1192_15_fu_1728_p2 <= std_logic_vector(unsigned(shl_ln728_11_fu_1718_p3) + unsigned(sext_ln1192_22_fu_1725_p1));
    add_ln1192_16_fu_1755_p2 <= std_logic_vector(unsigned(shl_ln728_12_fu_1744_p3) + unsigned(sext_ln1192_23_fu_1752_p1));
    add_ln1192_17_fu_1797_p2 <= std_logic_vector(unsigned(shl_ln728_13_fu_1787_p3) + unsigned(sext_ln1192_24_fu_1794_p1));
    add_ln1192_18_fu_1824_p2 <= std_logic_vector(unsigned(shl_ln728_14_fu_1813_p3) + unsigned(sext_ln1192_25_fu_1821_p1));
    add_ln1192_19_fu_1866_p2 <= std_logic_vector(unsigned(shl_ln728_15_fu_1856_p3) + unsigned(sext_ln1192_26_fu_1863_p1));
    add_ln1192_1_fu_1237_p2 <= std_logic_vector(signed(sext_ln703_fu_1230_p1) + signed(sext_ln1192_fu_1234_p1));
    add_ln1192_20_fu_1893_p2 <= std_logic_vector(unsigned(shl_ln728_16_fu_1882_p3) + unsigned(sext_ln1192_27_fu_1890_p1));
    add_ln1192_21_fu_1935_p2 <= std_logic_vector(unsigned(shl_ln728_17_fu_1925_p3) + unsigned(sext_ln1192_28_fu_1932_p1));
    add_ln1192_22_fu_1962_p2 <= std_logic_vector(unsigned(shl_ln728_18_fu_1951_p3) + unsigned(sext_ln1192_29_fu_1959_p1));
    add_ln1192_23_fu_2031_p2 <= std_logic_vector(unsigned(shl_ln728_20_fu_2020_p3) + unsigned(sext_ln1192_31_fu_2028_p1));
    add_ln1192_24_fu_2073_p2 <= std_logic_vector(unsigned(shl_ln728_21_fu_2063_p3) + unsigned(sext_ln1192_32_fu_2070_p1));
    add_ln1192_25_fu_2100_p2 <= std_logic_vector(unsigned(shl_ln728_22_fu_2089_p3) + unsigned(sext_ln1192_33_fu_2097_p1));
    add_ln1192_26_fu_2142_p2 <= std_logic_vector(unsigned(shl_ln728_23_fu_2132_p3) + unsigned(sext_ln1192_34_fu_2139_p1));
    add_ln1192_27_fu_2169_p2 <= std_logic_vector(unsigned(shl_ln728_24_fu_2158_p3) + unsigned(sext_ln1192_35_fu_2166_p1));
    add_ln1192_28_fu_2195_p2 <= std_logic_vector(unsigned(shl_ln728_25_fu_2185_p3) + unsigned(sext_ln1192_36_fu_2192_p1));
    add_ln1192_29_fu_2222_p2 <= std_logic_vector(unsigned(shl_ln728_26_fu_2211_p3) + unsigned(sext_ln1192_37_fu_2219_p1));
    add_ln1192_2_fu_1268_p2 <= std_logic_vector(signed(sext_ln1192_38_fu_1261_p1) + signed(sext_ln1192_39_fu_1265_p1));
    add_ln1192_3_fu_1314_p2 <= std_logic_vector(signed(sext_ln728_fu_1307_p1) + signed(sext_ln1192_10_fu_1311_p1));
    add_ln1192_4_fu_1341_p2 <= std_logic_vector(unsigned(shl_ln728_1_fu_1330_p3) + unsigned(sext_ln1192_11_fu_1338_p1));
    add_ln1192_5_fu_1383_p2 <= std_logic_vector(unsigned(shl_ln728_2_fu_1373_p3) + unsigned(sext_ln1192_12_fu_1380_p1));
    add_ln1192_6_fu_1410_p2 <= std_logic_vector(unsigned(shl_ln728_3_fu_1399_p3) + unsigned(sext_ln1192_13_fu_1407_p1));
    add_ln1192_7_fu_1452_p2 <= std_logic_vector(unsigned(shl_ln728_4_fu_1442_p3) + unsigned(sext_ln1192_14_fu_1449_p1));
    add_ln1192_8_fu_1479_p2 <= std_logic_vector(unsigned(shl_ln728_5_fu_1468_p3) + unsigned(sext_ln1192_15_fu_1476_p1));
    add_ln1192_9_fu_1521_p2 <= std_logic_vector(unsigned(shl_ln728_6_fu_1511_p3) + unsigned(sext_ln1192_16_fu_1518_p1));
    add_ln1192_fu_2004_p2 <= std_logic_vector(unsigned(shl_ln728_19_fu_1994_p3) + unsigned(sext_ln1192_30_fu_2001_p1));
    add_ln93_fu_1016_p2 <= std_logic_vector(unsigned(i_reg_965) + unsigned(ap_const_lv6_1));
    add_ln954_fu_2423_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE7) + signed(sub_ln944_reg_3874_pp2_iter21_reg));
    add_ln964_fu_2498_p2 <= std_logic_vector(unsigned(select_ln943_fu_2486_p3) + unsigned(sub_ln964_fu_2493_p2));
    add_ln96_fu_1033_p2 <= std_logic_vector(unsigned(i_1_reg_976) + unsigned(ap_const_lv5_1));
    and_ln949_1_fu_2397_p2 <= (xor_ln949_fu_2385_p2 and p_Result_8_fu_2391_p3);
    and_ln949_fu_2361_p2 <= (p_Val2_s_reg_3861_pp2_iter20_reg and or_ln949_1_fu_2355_p2);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(35);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state61 <= ap_CS_fsm(36);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp2_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp2_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp2_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp2_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp2_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp2_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp2_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp2_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp2_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp2_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp2_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp2_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp2_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp2_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp2_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp2_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp2_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp2_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp2_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp2_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp2_exit_iter0_state36_assign_proc : process(icmp_ln113_fu_1154_p2)
    begin
        if ((icmp_ln113_fu_1154_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state36 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state36 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6, icmp_ln101_fu_1044_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln101_fu_1044_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter18, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter5, ap_enable_reg_pp2_iter6, ap_enable_reg_pp2_iter7, ap_enable_reg_pp2_iter8, ap_enable_reg_pp2_iter9, ap_enable_reg_pp2_iter10, ap_enable_reg_pp2_iter11, ap_enable_reg_pp2_iter12, ap_enable_reg_pp2_iter13, ap_enable_reg_pp2_iter14, ap_enable_reg_pp2_iter15, ap_enable_reg_pp2_iter16, ap_enable_reg_pp2_iter17, ap_enable_reg_pp2_iter19, ap_enable_reg_pp2_iter20, ap_enable_reg_pp2_iter21, ap_enable_reg_pp2_iter22, ap_enable_reg_pp2_iter23, ap_enable_reg_pp2_iter24)
    begin
        if (((ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter18 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter24 = ap_const_logic_0) and (ap_enable_reg_pp2_iter23 = ap_const_logic_0) and (ap_enable_reg_pp2_iter22 = ap_const_logic_0) and (ap_enable_reg_pp2_iter21 = ap_const_logic_0) and (ap_enable_reg_pp2_iter20 = ap_const_logic_0) and (ap_enable_reg_pp2_iter19 = ap_const_logic_0) and (ap_enable_reg_pp2_iter17 = ap_const_logic_0) and (ap_enable_reg_pp2_iter16 = ap_const_logic_0) and (ap_enable_reg_pp2_iter15 = ap_const_logic_0) and (ap_enable_reg_pp2_iter14 = ap_const_logic_0) and (ap_enable_reg_pp2_iter13 = ap_const_logic_0) and (ap_enable_reg_pp2_iter12 = ap_const_logic_0) and (ap_enable_reg_pp2_iter11 = ap_const_logic_0) and (ap_enable_reg_pp2_iter10 = ap_const_logic_0) and (ap_enable_reg_pp2_iter9 = ap_const_logic_0) and (ap_enable_reg_pp2_iter8 = ap_const_logic_0) and (ap_enable_reg_pp2_iter7 = ap_const_logic_0) and (ap_enable_reg_pp2_iter6 = ap_const_logic_0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, icmp_ln101_fu_1044_p2)
    begin
        if (((icmp_ln101_fu_1044_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln744_fu_2527_p1 <= trunc_ln743_fu_2523_p1;
    codebook_V_0_address0 <= i_2_cast_fu_1166_p1(6 - 1 downto 0);

    codebook_V_0_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            codebook_V_0_ce0 <= ap_const_logic_1;
        else 
            codebook_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_10_address0 <= i_2_cast_reg_3098_pp2_iter3_reg(6 - 1 downto 0);

    codebook_V_10_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            codebook_V_10_ce0 <= ap_const_logic_1;
        else 
            codebook_V_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_11_address0 <= i_2_cast_reg_3098_pp2_iter4_reg(6 - 1 downto 0);

    codebook_V_11_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter5 = ap_const_logic_1))) then 
            codebook_V_11_ce0 <= ap_const_logic_1;
        else 
            codebook_V_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_12_address0 <= i_2_cast_reg_3098_pp2_iter4_reg(6 - 1 downto 0);

    codebook_V_12_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter5 = ap_const_logic_1))) then 
            codebook_V_12_ce0 <= ap_const_logic_1;
        else 
            codebook_V_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_13_address0 <= i_2_cast_reg_3098_pp2_iter5_reg(6 - 1 downto 0);

    codebook_V_13_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter6 = ap_const_logic_1))) then 
            codebook_V_13_ce0 <= ap_const_logic_1;
        else 
            codebook_V_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_14_address0 <= i_2_cast_reg_3098_pp2_iter5_reg(6 - 1 downto 0);

    codebook_V_14_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter6 = ap_const_logic_1))) then 
            codebook_V_14_ce0 <= ap_const_logic_1;
        else 
            codebook_V_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_15_address0 <= i_2_cast_reg_3098_pp2_iter6_reg(6 - 1 downto 0);

    codebook_V_15_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter7 = ap_const_logic_1))) then 
            codebook_V_15_ce0 <= ap_const_logic_1;
        else 
            codebook_V_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_16_address0 <= i_2_cast_reg_3098_pp2_iter6_reg(6 - 1 downto 0);

    codebook_V_16_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter7 = ap_const_logic_1))) then 
            codebook_V_16_ce0 <= ap_const_logic_1;
        else 
            codebook_V_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_17_address0 <= i_2_cast_reg_3098_pp2_iter7_reg(6 - 1 downto 0);

    codebook_V_17_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter8)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter8 = ap_const_logic_1))) then 
            codebook_V_17_ce0 <= ap_const_logic_1;
        else 
            codebook_V_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_18_address0 <= i_2_cast_reg_3098_pp2_iter7_reg(6 - 1 downto 0);

    codebook_V_18_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter8)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter8 = ap_const_logic_1))) then 
            codebook_V_18_ce0 <= ap_const_logic_1;
        else 
            codebook_V_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_19_address0 <= i_2_cast_reg_3098_pp2_iter8_reg(6 - 1 downto 0);

    codebook_V_19_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter9)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter9 = ap_const_logic_1))) then 
            codebook_V_19_ce0 <= ap_const_logic_1;
        else 
            codebook_V_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_1_address0 <= i_2_cast_fu_1166_p1(6 - 1 downto 0);

    codebook_V_1_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            codebook_V_1_ce0 <= ap_const_logic_1;
        else 
            codebook_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_20_address0 <= i_2_cast_reg_3098_pp2_iter8_reg(6 - 1 downto 0);

    codebook_V_20_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter9)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter9 = ap_const_logic_1))) then 
            codebook_V_20_ce0 <= ap_const_logic_1;
        else 
            codebook_V_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_21_address0 <= i_2_cast_reg_3098_pp2_iter9_reg(6 - 1 downto 0);

    codebook_V_21_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter10)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter10 = ap_const_logic_1))) then 
            codebook_V_21_ce0 <= ap_const_logic_1;
        else 
            codebook_V_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_22_address0 <= i_2_cast_reg_3098_pp2_iter9_reg(6 - 1 downto 0);

    codebook_V_22_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter10)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter10 = ap_const_logic_1))) then 
            codebook_V_22_ce0 <= ap_const_logic_1;
        else 
            codebook_V_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_23_address0 <= i_2_cast_reg_3098_pp2_iter10_reg(6 - 1 downto 0);

    codebook_V_23_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter11)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter11 = ap_const_logic_1))) then 
            codebook_V_23_ce0 <= ap_const_logic_1;
        else 
            codebook_V_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_24_address0 <= i_2_cast_reg_3098_pp2_iter10_reg(6 - 1 downto 0);

    codebook_V_24_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter11)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter11 = ap_const_logic_1))) then 
            codebook_V_24_ce0 <= ap_const_logic_1;
        else 
            codebook_V_24_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_25_address0 <= i_2_cast_reg_3098_pp2_iter11_reg(6 - 1 downto 0);

    codebook_V_25_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter12)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter12 = ap_const_logic_1))) then 
            codebook_V_25_ce0 <= ap_const_logic_1;
        else 
            codebook_V_25_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_26_address0 <= i_2_cast_reg_3098_pp2_iter11_reg(6 - 1 downto 0);

    codebook_V_26_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter12)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter12 = ap_const_logic_1))) then 
            codebook_V_26_ce0 <= ap_const_logic_1;
        else 
            codebook_V_26_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_27_address0 <= i_2_cast_reg_3098_pp2_iter12_reg(6 - 1 downto 0);

    codebook_V_27_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter13)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter13 = ap_const_logic_1))) then 
            codebook_V_27_ce0 <= ap_const_logic_1;
        else 
            codebook_V_27_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_28_address0 <= i_2_cast_reg_3098_pp2_iter12_reg(6 - 1 downto 0);

    codebook_V_28_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter13)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter13 = ap_const_logic_1))) then 
            codebook_V_28_ce0 <= ap_const_logic_1;
        else 
            codebook_V_28_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_29_address0 <= i_2_cast_reg_3098_pp2_iter13_reg(6 - 1 downto 0);

    codebook_V_29_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter14)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter14 = ap_const_logic_1))) then 
            codebook_V_29_ce0 <= ap_const_logic_1;
        else 
            codebook_V_29_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_2_address0 <= i_2_cast_fu_1166_p1(6 - 1 downto 0);

    codebook_V_2_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            codebook_V_2_ce0 <= ap_const_logic_1;
        else 
            codebook_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_30_address0 <= i_2_cast_reg_3098_pp2_iter13_reg(6 - 1 downto 0);

    codebook_V_30_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter14)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter14 = ap_const_logic_1))) then 
            codebook_V_30_ce0 <= ap_const_logic_1;
        else 
            codebook_V_30_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_3_address0 <= i_2_cast_reg_3098(6 - 1 downto 0);

    codebook_V_3_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            codebook_V_3_ce0 <= ap_const_logic_1;
        else 
            codebook_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_4_address0 <= i_2_cast_reg_3098(6 - 1 downto 0);

    codebook_V_4_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            codebook_V_4_ce0 <= ap_const_logic_1;
        else 
            codebook_V_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_5_address0 <= i_2_cast_reg_3098_pp2_iter1_reg(6 - 1 downto 0);

    codebook_V_5_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            codebook_V_5_ce0 <= ap_const_logic_1;
        else 
            codebook_V_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_6_address0 <= i_2_cast_reg_3098_pp2_iter1_reg(6 - 1 downto 0);

    codebook_V_6_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            codebook_V_6_ce0 <= ap_const_logic_1;
        else 
            codebook_V_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_7_address0 <= i_2_cast_reg_3098_pp2_iter2_reg(6 - 1 downto 0);

    codebook_V_7_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter3)
    begin
        if (((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            codebook_V_7_ce0 <= ap_const_logic_1;
        else 
            codebook_V_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_8_address0 <= i_2_cast_reg_3098_pp2_iter2_reg(6 - 1 downto 0);

    codebook_V_8_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter3)
    begin
        if (((ap_enable_reg_pp2_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            codebook_V_8_ce0 <= ap_const_logic_1;
        else 
            codebook_V_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    codebook_V_9_address0 <= i_2_cast_reg_3098_pp2_iter3_reg(6 - 1 downto 0);

    codebook_V_9_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter4)
    begin
        if (((ap_enable_reg_pp2_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            codebook_V_9_ce0 <= ap_const_logic_1;
        else 
            codebook_V_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    correlators_output_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, correlators_output_V_addr_2_reg_3822_pp2_iter18_reg, ap_enable_reg_pp2_iter19, i_cast_fu_1022_p1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter19 = ap_const_logic_1))) then 
            correlators_output_V_address0 <= correlators_output_V_addr_2_reg_3822_pp2_iter18_reg;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            correlators_output_V_address0 <= i_cast_fu_1022_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            correlators_output_V_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        else 
            correlators_output_V_address0 <= "XXXXXX";
        end if; 
    end process;

    correlators_output_V_address1 <= i_2_cast_reg_3098_pp2_iter16_reg(6 - 1 downto 0);

    correlators_output_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter19 = ap_const_logic_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            correlators_output_V_ce0 <= ap_const_logic_1;
        else 
            correlators_output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    correlators_output_V_ce1_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter17)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter17 = ap_const_logic_1))) then 
            correlators_output_V_ce1 <= ap_const_logic_1;
        else 
            correlators_output_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    correlators_output_V_d0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, trunc_ln708_1_reg_3833, ap_enable_reg_pp2_iter19, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter19 = ap_const_logic_1))) then 
            correlators_output_V_d0 <= trunc_ln708_1_reg_3833;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            correlators_output_V_d0 <= ap_const_lv36_0;
        else 
            correlators_output_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    correlators_output_V_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_block_pp2_stage0_11001, icmp_ln1494_fu_2238_p2, ap_enable_reg_pp2_iter19, icmp_ln93_fu_1010_p2)
    begin
        if ((((icmp_ln1494_fu_2238_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter19 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln93_fu_1010_p2 = ap_const_lv1_0)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            correlators_output_V_we0 <= ap_const_logic_1;
        else 
            correlators_output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1176_p0 <= sext_ln1116_reg_2934(36 - 1 downto 0);
    grp_fu_1184_p0 <= sext_ln1116_1_reg_2939(36 - 1 downto 0);
    grp_fu_1192_p0 <= sext_ln1116_2_reg_2944(36 - 1 downto 0);
    grp_fu_1210_p0 <= sext_ln1116_3_reg_2949(36 - 1 downto 0);
    grp_fu_1218_p0 <= sext_ln1116_4_reg_2954(36 - 1 downto 0);
    grp_fu_1287_p0 <= sext_ln1116_5_reg_2959(36 - 1 downto 0);
    grp_fu_1295_p0 <= sext_ln1116_6_reg_2964(36 - 1 downto 0);
    grp_fu_1360_p0 <= sext_ln1116_7_reg_2969(36 - 1 downto 0);
    grp_fu_1368_p0 <= sext_ln1116_8_reg_2974(36 - 1 downto 0);
    grp_fu_1429_p0 <= sext_ln1116_9_reg_2979(36 - 1 downto 0);
    grp_fu_1437_p0 <= sext_ln1116_10_reg_2984(36 - 1 downto 0);
    grp_fu_1498_p0 <= sext_ln1116_11_reg_2989(36 - 1 downto 0);
    grp_fu_1506_p0 <= sext_ln1116_12_reg_2994(36 - 1 downto 0);
    grp_fu_1567_p0 <= sext_ln1116_13_reg_2999(36 - 1 downto 0);
    grp_fu_1575_p0 <= sext_ln1116_14_reg_3004(36 - 1 downto 0);
    grp_fu_1636_p0 <= sext_ln1116_15_reg_3009(36 - 1 downto 0);
    grp_fu_1644_p0 <= sext_ln1116_16_reg_3014(36 - 1 downto 0);
    grp_fu_1705_p0 <= sext_ln1116_17_reg_3019(36 - 1 downto 0);
    grp_fu_1713_p0 <= sext_ln1116_18_reg_3024(36 - 1 downto 0);
    grp_fu_1774_p0 <= sext_ln1116_19_reg_3029(36 - 1 downto 0);
    grp_fu_1782_p0 <= sext_ln1116_20_reg_3034(36 - 1 downto 0);
    grp_fu_1843_p0 <= sext_ln1116_21_reg_3039(36 - 1 downto 0);
    grp_fu_1851_p0 <= sext_ln1116_22_reg_3044(36 - 1 downto 0);
    grp_fu_1912_p0 <= sext_ln1116_23_reg_3049(36 - 1 downto 0);
    grp_fu_1920_p0 <= sext_ln1116_24_reg_3054(36 - 1 downto 0);
    grp_fu_1981_p0 <= sext_ln1116_25_reg_3059(36 - 1 downto 0);
    grp_fu_1989_p0 <= sext_ln1116_26_reg_3064(36 - 1 downto 0);
    grp_fu_2050_p0 <= sext_ln1116_27_reg_3069(36 - 1 downto 0);
    grp_fu_2058_p0 <= sext_ln1116_28_reg_3074(36 - 1 downto 0);
    grp_fu_2119_p0 <= sext_ln1116_29_reg_3079(36 - 1 downto 0);
    grp_fu_2127_p0 <= sext_ln1116_30_reg_3084(36 - 1 downto 0);
    i_1_cast_fu_1039_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_976),64));
    i_2_cast_fu_1166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_999),64));
    i_cast_fu_1022_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_965),64));
    icmp_ln101_fu_1044_p2 <= "1" when (j_reg_987 = ap_const_lv8_AA) else "0";
    icmp_ln113_fu_1154_p2 <= "1" when (i_2_reg_999 = ap_const_lv6_21) else "0";
    icmp_ln1494_fu_2238_p2 <= "1" when (signed(trunc_ln708_1_reg_3833) > signed(correlators_output_V_load_reg_3842)) else "0";
    icmp_ln935_fu_2242_p2 <= "1" when (trunc_ln708_1_reg_3833 = ap_const_lv36_0) else "0";
    icmp_ln93_fu_1010_p2 <= "1" when (i_reg_965 = ap_const_lv6_21) else "0";
    icmp_ln946_fu_2324_p2 <= "1" when (signed(tmp_44_fu_2314_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln949_fu_2366_p2 <= "0" when (and_ln949_fu_2361_p2 = ap_const_lv36_0) else "1";
    icmp_ln954_fu_2372_p2 <= "1" when (signed(lsb_index_fu_2309_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln96_fu_1027_p2 <= "1" when (i_1_reg_976 = ap_const_lv5_1F) else "0";
    input_V_address0 <= zext_ln101_fu_1056_p1(8 - 1 downto 0);

    input_V_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            input_V_ce0 <= ap_const_logic_1;
        else 
            input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    l_fu_2291_p1 <= tmp_fu_2283_p3(32 - 1 downto 0);
    lsb_index_fu_2309_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE8) + signed(sub_ln944_reg_3874));
    lshr_ln947_fu_2339_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv36_FFFFFFFFF),to_integer(unsigned('0' & zext_ln947_fu_2335_p1(31-1 downto 0)))));
    lshr_ln954_fu_2432_p2 <= std_logic_vector(shift_right(unsigned(p_Val2_s_reg_3861_pp2_iter21_reg),to_integer(unsigned('0' & zext_ln954_fu_2428_p1(31-1 downto 0)))));
    m_1_fu_2459_p2 <= std_logic_vector(unsigned(zext_ln951_fu_2451_p1) + unsigned(zext_ln961_fu_2455_p1));
    m_fu_2444_p3 <= 
        lshr_ln954_fu_2432_p2 when (icmp_ln954_reg_3907(0) = '1') else 
        shl_ln955_fu_2412_p2;
    or_ln949_1_fu_2355_p2 <= (shl_ln949_fu_2349_p2 or lshr_ln947_fu_2339_p2);
    output_r_address0 <= i_2_cast_reg_3098_pp2_iter23_reg(6 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter24)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter24 = ap_const_logic_1))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= select_ln935_reg_3923;

    output_r_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln1494_reg_3847_pp2_iter23_reg, ap_enable_reg_pp2_iter24)
    begin
        if (((icmp_ln1494_reg_3847_pp2_iter23_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter24 = ap_const_logic_1))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_3_fu_2276_p3 <= (ap_const_lv28_FFFFFFF & p_Result_s_reg_3869);
    p_Result_7_fu_2247_p3 <= add_ln1192_29_reg_3828(40 downto 40);
    p_Result_8_fu_2391_p3 <= p_Val2_s_reg_3861_pp2_iter21_reg(to_integer(unsigned(lsb_index_reg_3891)) downto to_integer(unsigned(lsb_index_reg_3891))) when (to_integer(unsigned(lsb_index_reg_3891))>= 0 and to_integer(unsigned(lsb_index_reg_3891))<=35) else "-";
    p_Result_9_fu_2511_p5 <= (zext_ln951_1_fu_2483_p1(63 downto 32) & tmp_1_fu_2504_p3 & zext_ln951_1_fu_2483_p1(22 downto 0));
    
    p_Result_s_fu_2266_p4_proc : process(p_Val2_s_fu_2259_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(36+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(36+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(36 - 1 downto 0);
    variable p_Result_s_fu_2266_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(36 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(36 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(36 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_23(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := p_Val2_s_fu_2259_p3;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(36-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(36-1-unsigned(ap_const_lv32_23(6-1 downto 0)));
            for p_Result_s_fu_2266_p4_i in 0 to 36-1 loop
                v0_cpy(p_Result_s_fu_2266_p4_i) := p_Val2_s_fu_2259_p3(36-1-p_Result_s_fu_2266_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(36-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_2266_p4 <= resvalue(36-1 downto 0);
    end process;

    p_Val2_s_fu_2259_p3 <= 
        sub_ln939_fu_2254_p2 when (p_Result_7_fu_2247_p3(0) = '1') else 
        trunc_ln708_1_reg_3833;
    select_ln935_fu_2531_p3 <= 
        ap_const_lv32_0 when (icmp_ln935_reg_3851_pp2_iter22_reg(0) = '1') else 
        bitcast_ln744_fu_2527_p1;
    select_ln943_fu_2486_p3 <= 
        ap_const_lv8_7F when (p_Result_5_reg_3918(0) = '1') else 
        ap_const_lv8_7E;
    select_ln946_fu_2417_p3 <= 
        icmp_ln949_reg_3902 when (icmp_ln946_reg_3897(0) = '1') else 
        p_Result_8_fu_2391_p3;
    select_ln954_fu_2437_p3 <= 
        select_ln946_fu_2417_p3 when (icmp_ln954_reg_3907(0) = '1') else 
        and_ln949_1_fu_2397_p2;
        sext_ln1116_10_fu_1091_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_input_V_load_10_reg_2804),38));

        sext_ln1116_11_fu_1094_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_input_V_load_11_reg_2810),38));

        sext_ln1116_12_fu_1097_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_input_V_load_12_reg_2816),38));

        sext_ln1116_13_fu_1100_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_input_V_load_13_reg_2822),38));

        sext_ln1116_14_fu_1103_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_input_V_load_14_reg_2828),38));

        sext_ln1116_15_fu_1106_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_input_V_load_15_reg_2834),38));

        sext_ln1116_16_fu_1109_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_input_V_load_16_reg_2840),38));

        sext_ln1116_17_fu_1112_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_input_V_load_17_reg_2846),38));

        sext_ln1116_18_fu_1115_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_input_V_load_18_reg_2852),38));

        sext_ln1116_19_fu_1118_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_input_V_load_19_reg_2858),38));

        sext_ln1116_1_fu_1064_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_input_V_load_1_reg_2750),38));

        sext_ln1116_20_fu_1121_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_input_V_load_20_reg_2864),38));

        sext_ln1116_21_fu_1124_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_input_V_load_21_reg_2870),38));

        sext_ln1116_22_fu_1127_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_input_V_load_22_reg_2876),38));

        sext_ln1116_23_fu_1130_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_input_V_load_23_reg_2882),38));

        sext_ln1116_24_fu_1133_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_input_V_load_24_reg_2888),38));

        sext_ln1116_25_fu_1136_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_input_V_load_25_reg_2894),38));

        sext_ln1116_26_fu_1139_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_input_V_load_26_reg_2905),38));

        sext_ln1116_27_fu_1142_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_input_V_load_27_reg_2911),38));

        sext_ln1116_28_fu_1145_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_input_V_load_28_reg_2922),38));

        sext_ln1116_29_fu_1148_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_input_V_load_29_reg_2928),38));

        sext_ln1116_2_fu_1067_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_input_V_load_2_reg_2756),38));

        sext_ln1116_30_fu_1151_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_V_load_reg_2917),38));

        sext_ln1116_3_fu_1070_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_input_V_load_3_reg_2762),38));

        sext_ln1116_4_fu_1073_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_input_V_load_4_reg_2768),38));

        sext_ln1116_5_fu_1076_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_input_V_load_5_reg_2774),38));

        sext_ln1116_6_fu_1079_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_input_V_load_6_reg_2780),38));

        sext_ln1116_7_fu_1082_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_input_V_load_7_reg_2786),38));

        sext_ln1116_8_fu_1085_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_input_V_load_8_reg_2792),38));

        sext_ln1116_9_fu_1088_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_input_V_load_9_reg_2798),38));

        sext_ln1116_fu_1061_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(temp_input_V_load_reg_2744),38));

        sext_ln1192_10_fu_1311_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_3_reg_3252),41));

        sext_ln1192_11_fu_1338_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_4_reg_3262),41));

        sext_ln1192_12_fu_1380_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_5_reg_3297),41));

        sext_ln1192_13_fu_1407_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_6_reg_3307),41));

        sext_ln1192_14_fu_1449_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_7_reg_3342),41));

        sext_ln1192_15_fu_1476_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_8_reg_3352),41));

        sext_ln1192_16_fu_1518_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_9_reg_3387),41));

        sext_ln1192_17_fu_1545_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_10_reg_3397),41));

        sext_ln1192_18_fu_1587_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_11_reg_3432),41));

        sext_ln1192_19_fu_1614_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_12_reg_3442),41));

        sext_ln1192_20_fu_1656_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_13_reg_3477),41));

        sext_ln1192_21_fu_1683_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_14_reg_3487),41));

        sext_ln1192_22_fu_1725_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_15_reg_3522),41));

        sext_ln1192_23_fu_1752_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_16_reg_3532),41));

        sext_ln1192_24_fu_1794_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_17_reg_3567),41));

        sext_ln1192_25_fu_1821_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_18_reg_3577),41));

        sext_ln1192_26_fu_1863_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_19_reg_3612),41));

        sext_ln1192_27_fu_1890_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_20_reg_3622),41));

        sext_ln1192_28_fu_1932_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_21_reg_3657),41));

        sext_ln1192_29_fu_1959_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_22_reg_3667),41));

        sext_ln1192_30_fu_2001_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_23_reg_3702),41));

        sext_ln1192_31_fu_2028_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_24_reg_3712),41));

        sext_ln1192_32_fu_2070_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_25_reg_3747),41));

        sext_ln1192_33_fu_2097_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_26_reg_3757),41));

        sext_ln1192_34_fu_2139_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_27_reg_3782),41));

        sext_ln1192_35_fu_2166_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_28_reg_3792),41));

        sext_ln1192_36_fu_2192_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_29_reg_3807),41));

        sext_ln1192_37_fu_2219_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_30_reg_3817),41));

        sext_ln1192_38_fu_1261_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_1253_p3),40));

        sext_ln1192_39_fu_1265_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_2_reg_3217),40));

        sext_ln1192_fu_1234_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln1118_1_reg_3207),39));

        sext_ln703_fu_1230_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_1223_p3),39));

        sext_ln728_fu_1307_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_42_fu_1300_p3),41));

    shl_ln728_10_fu_1675_p3 <= (tmp_13_fu_1665_p4 & ap_const_lv5_0);
    shl_ln728_11_fu_1718_p3 <= (tmp_14_reg_3527 & ap_const_lv5_0);
    shl_ln728_12_fu_1744_p3 <= (tmp_15_fu_1734_p4 & ap_const_lv5_0);
    shl_ln728_13_fu_1787_p3 <= (tmp_16_reg_3572 & ap_const_lv5_0);
    shl_ln728_14_fu_1813_p3 <= (tmp_17_fu_1803_p4 & ap_const_lv5_0);
    shl_ln728_15_fu_1856_p3 <= (tmp_18_reg_3617 & ap_const_lv5_0);
    shl_ln728_16_fu_1882_p3 <= (tmp_19_fu_1872_p4 & ap_const_lv5_0);
    shl_ln728_17_fu_1925_p3 <= (tmp_20_reg_3662 & ap_const_lv5_0);
    shl_ln728_18_fu_1951_p3 <= (tmp_21_fu_1941_p4 & ap_const_lv5_0);
    shl_ln728_19_fu_1994_p3 <= (tmp_22_reg_3707 & ap_const_lv5_0);
    shl_ln728_1_fu_1330_p3 <= (tmp_3_fu_1320_p4 & ap_const_lv5_0);
    shl_ln728_20_fu_2020_p3 <= (tmp_23_fu_2010_p4 & ap_const_lv5_0);
    shl_ln728_21_fu_2063_p3 <= (tmp_24_reg_3752 & ap_const_lv5_0);
    shl_ln728_22_fu_2089_p3 <= (tmp_25_fu_2079_p4 & ap_const_lv5_0);
    shl_ln728_23_fu_2132_p3 <= (tmp_26_reg_3787 & ap_const_lv5_0);
    shl_ln728_24_fu_2158_p3 <= (tmp_27_fu_2148_p4 & ap_const_lv5_0);
    shl_ln728_25_fu_2185_p3 <= (tmp_28_reg_3812 & ap_const_lv5_0);
    shl_ln728_26_fu_2211_p3 <= (tmp_29_fu_2201_p4 & ap_const_lv5_0);
    shl_ln728_2_fu_1373_p3 <= (tmp_4_reg_3302 & ap_const_lv5_0);
    shl_ln728_3_fu_1399_p3 <= (tmp_5_fu_1389_p4 & ap_const_lv5_0);
    shl_ln728_4_fu_1442_p3 <= (tmp_6_reg_3347 & ap_const_lv5_0);
    shl_ln728_5_fu_1468_p3 <= (tmp_7_fu_1458_p4 & ap_const_lv5_0);
    shl_ln728_6_fu_1511_p3 <= (tmp_8_reg_3392 & ap_const_lv5_0);
    shl_ln728_7_fu_1537_p3 <= (tmp_9_fu_1527_p4 & ap_const_lv5_0);
    shl_ln728_8_fu_1580_p3 <= (tmp_10_reg_3437 & ap_const_lv5_0);
    shl_ln728_9_fu_1606_p3 <= (tmp_11_fu_1596_p4 & ap_const_lv5_0);
    shl_ln728_s_fu_1649_p3 <= (tmp_12_reg_3482 & ap_const_lv5_0);
    shl_ln949_fu_2349_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv36_1),to_integer(unsigned('0' & zext_ln949_fu_2345_p1(31-1 downto 0)))));
    shl_ln955_fu_2412_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_s_reg_3861_pp2_iter21_reg),to_integer(unsigned('0' & zext_ln955_fu_2408_p1(31-1 downto 0)))));
    shl_ln_fu_1223_p3 <= (tmp_s_reg_3212 & ap_const_lv5_0);
    sub_ln939_fu_2254_p2 <= std_logic_vector(unsigned(ap_const_lv36_0) - unsigned(trunc_ln708_1_reg_3833));
    sub_ln944_fu_2295_p2 <= std_logic_vector(unsigned(ap_const_lv32_24) - unsigned(l_fu_2291_p1));
    sub_ln947_fu_2330_p2 <= std_logic_vector(signed(ap_const_lv6_3D) - signed(trunc_ln947_reg_3881));
    sub_ln955_fu_2403_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_reg_3874_pp2_iter21_reg));
    sub_ln964_fu_2493_p2 <= std_logic_vector(unsigned(ap_const_lv8_8) - unsigned(trunc_ln943_reg_3886_pp2_iter22_reg));

    temp_input_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state35, i_1_cast_fu_1039_p1, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            temp_input_V_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            temp_input_V_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            temp_input_V_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            temp_input_V_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            temp_input_V_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            temp_input_V_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            temp_input_V_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            temp_input_V_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            temp_input_V_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            temp_input_V_address0 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            temp_input_V_address0 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            temp_input_V_address0 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            temp_input_V_address0 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            temp_input_V_address0 <= ap_const_lv64_1E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            temp_input_V_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            temp_input_V_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            temp_input_V_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            temp_input_V_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            temp_input_V_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            temp_input_V_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            temp_input_V_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            temp_input_V_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            temp_input_V_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            temp_input_V_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_input_V_address0 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            temp_input_V_address0 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_input_V_address0 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp_input_V_address0 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            temp_input_V_address0 <= ap_const_lv64_1C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            temp_input_V_address0 <= i_1_cast_fu_1039_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            temp_input_V_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            temp_input_V_address0 <= "XXXXX";
        end if; 
    end process;


    temp_input_V_address1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state35, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            temp_input_V_address1 <= ap_const_lv64_1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            temp_input_V_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            temp_input_V_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            temp_input_V_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            temp_input_V_address1 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            temp_input_V_address1 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            temp_input_V_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            temp_input_V_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            temp_input_V_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            temp_input_V_address1 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            temp_input_V_address1 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            temp_input_V_address1 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            temp_input_V_address1 <= ap_const_lv64_19(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            temp_input_V_address1 <= ap_const_lv64_1B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            temp_input_V_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            temp_input_V_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            temp_input_V_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            temp_input_V_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            temp_input_V_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            temp_input_V_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            temp_input_V_address1 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            temp_input_V_address1 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            temp_input_V_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            temp_input_V_address1 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            temp_input_V_address1 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            temp_input_V_address1 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            temp_input_V_address1 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            temp_input_V_address1 <= ap_const_lv64_1A(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            temp_input_V_address1 <= ap_const_lv64_1D(5 - 1 downto 0);
        else 
            temp_input_V_address1 <= "XXXXX";
        end if; 
    end process;


    temp_input_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state35, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            temp_input_V_ce0 <= ap_const_logic_1;
        else 
            temp_input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_input_V_ce1_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state35, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            temp_input_V_ce1 <= ap_const_logic_1;
        else 
            temp_input_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    temp_input_V_d0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, temp_input_V_load_reg_2744, temp_input_V_load_2_reg_2756, temp_input_V_load_4_reg_2768, temp_input_V_load_6_reg_2780, temp_input_V_load_8_reg_2792, temp_input_V_load_10_reg_2804, temp_input_V_load_12_reg_2816, temp_input_V_load_14_reg_2828, temp_input_V_load_16_reg_2840, temp_input_V_load_18_reg_2852, temp_input_V_load_20_reg_2864, temp_input_V_load_22_reg_2876, temp_input_V_load_24_reg_2888, temp_input_V_load_26_reg_2905, temp_input_V_load_28_reg_2922, ap_CS_fsm_state21, ap_CS_fsm_state35, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            temp_input_V_d0 <= temp_input_V_load_28_reg_2922;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            temp_input_V_d0 <= temp_input_V_load_26_reg_2905;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            temp_input_V_d0 <= temp_input_V_load_24_reg_2888;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            temp_input_V_d0 <= temp_input_V_load_22_reg_2876;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            temp_input_V_d0 <= temp_input_V_load_20_reg_2864;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            temp_input_V_d0 <= temp_input_V_load_18_reg_2852;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            temp_input_V_d0 <= temp_input_V_load_16_reg_2840;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            temp_input_V_d0 <= temp_input_V_load_14_reg_2828;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            temp_input_V_d0 <= temp_input_V_load_12_reg_2816;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            temp_input_V_d0 <= temp_input_V_load_10_reg_2804;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            temp_input_V_d0 <= temp_input_V_load_8_reg_2792;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            temp_input_V_d0 <= temp_input_V_load_6_reg_2780;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            temp_input_V_d0 <= temp_input_V_load_4_reg_2768;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            temp_input_V_d0 <= temp_input_V_load_2_reg_2756;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            temp_input_V_d0 <= temp_input_V_load_reg_2744;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            temp_input_V_d0 <= ap_const_lv36_0;
        else 
            temp_input_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp_input_V_d1_assign_proc : process(input_V_q0, temp_input_V_load_1_reg_2750, temp_input_V_load_3_reg_2762, temp_input_V_load_5_reg_2774, temp_input_V_load_7_reg_2786, temp_input_V_load_9_reg_2798, temp_input_V_load_11_reg_2810, temp_input_V_load_13_reg_2822, temp_input_V_load_15_reg_2834, temp_input_V_load_17_reg_2846, temp_input_V_load_19_reg_2858, temp_input_V_load_21_reg_2870, temp_input_V_load_23_reg_2882, temp_input_V_load_25_reg_2894, ap_CS_fsm_state20, temp_input_V_load_27_reg_2911, ap_CS_fsm_state21, temp_input_V_load_29_reg_2928, ap_CS_fsm_state35, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            temp_input_V_d1 <= temp_input_V_load_29_reg_2928;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            temp_input_V_d1 <= temp_input_V_load_27_reg_2911;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            temp_input_V_d1 <= temp_input_V_load_25_reg_2894;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            temp_input_V_d1 <= temp_input_V_load_23_reg_2882;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            temp_input_V_d1 <= temp_input_V_load_21_reg_2870;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            temp_input_V_d1 <= temp_input_V_load_19_reg_2858;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            temp_input_V_d1 <= temp_input_V_load_17_reg_2846;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            temp_input_V_d1 <= temp_input_V_load_15_reg_2834;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            temp_input_V_d1 <= temp_input_V_load_13_reg_2822;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            temp_input_V_d1 <= temp_input_V_load_11_reg_2810;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            temp_input_V_d1 <= temp_input_V_load_9_reg_2798;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            temp_input_V_d1 <= temp_input_V_load_7_reg_2786;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            temp_input_V_d1 <= temp_input_V_load_5_reg_2774;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            temp_input_V_d1 <= temp_input_V_load_3_reg_2762;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            temp_input_V_d1 <= temp_input_V_load_1_reg_2750;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            temp_input_V_d1 <= input_V_q0;
        else 
            temp_input_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp_input_V_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, ap_CS_fsm_state21, ap_CS_fsm_state35, icmp_ln96_fu_1027_p2, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln96_fu_1027_p2 = ap_const_lv1_0)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            temp_input_V_we0 <= ap_const_logic_1;
        else 
            temp_input_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_input_V_we1_assign_proc : process(ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state35, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            temp_input_V_we1 <= ap_const_logic_1;
        else 
            temp_input_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_11_fu_1596_p4 <= add_ln1192_11_fu_1590_p2(40 downto 5);
    tmp_13_fu_1665_p4 <= add_ln1192_13_fu_1659_p2(40 downto 5);
    tmp_15_fu_1734_p4 <= add_ln1192_15_fu_1728_p2(40 downto 5);
    tmp_17_fu_1803_p4 <= add_ln1192_17_fu_1797_p2(40 downto 5);
    tmp_19_fu_1872_p4 <= add_ln1192_19_fu_1866_p2(40 downto 5);
    tmp_1_fu_2504_p3 <= (p_Result_7_reg_3856_pp2_iter22_reg & add_ln964_fu_2498_p2);
    tmp_21_fu_1941_p4 <= add_ln1192_21_fu_1935_p2(40 downto 5);
    tmp_23_fu_2010_p4 <= add_ln1192_fu_2004_p2(40 downto 5);
    tmp_25_fu_2079_p4 <= add_ln1192_24_fu_2073_p2(40 downto 5);
    tmp_27_fu_2148_p4 <= add_ln1192_26_fu_2142_p2(40 downto 5);
    tmp_29_fu_2201_p4 <= add_ln1192_28_fu_2195_p2(40 downto 5);
    tmp_2_fu_1253_p3 <= (trunc_ln708_s_fu_1243_p4 & ap_const_lv5_0);
    tmp_3_fu_1320_p4 <= add_ln1192_3_fu_1314_p2(40 downto 5);
    tmp_42_fu_1300_p3 <= (tmp_41_reg_3257 & ap_const_lv5_0);
    tmp_44_fu_2314_p4 <= lsb_index_fu_2309_p2(31 downto 1);
    tmp_45_fu_2378_p3 <= lsb_index_reg_3891(31 downto 31);
    tmp_5_fu_1389_p4 <= add_ln1192_5_fu_1383_p2(40 downto 5);
    tmp_7_fu_1458_p4 <= add_ln1192_7_fu_1452_p2(40 downto 5);
    tmp_9_fu_1527_p4 <= add_ln1192_9_fu_1521_p2(40 downto 5);
    
    tmp_fu_2283_p3_proc : process(p_Result_3_fu_2276_p3)
    begin
        tmp_fu_2283_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_3_fu_2276_p3(i) = '1' then
                tmp_fu_2283_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    trunc_ln708_s_fu_1243_p4 <= add_ln1192_1_fu_1237_p2(38 downto 5);
    trunc_ln743_fu_2523_p1 <= p_Result_9_fu_2511_p5(32 - 1 downto 0);
    trunc_ln943_fu_2305_p1 <= tmp_fu_2283_p3(8 - 1 downto 0);
    trunc_ln947_fu_2301_p1 <= sub_ln944_fu_2295_p2(6 - 1 downto 0);
    xor_ln949_fu_2385_p2 <= (tmp_45_fu_2378_p3 xor ap_const_lv1_1);
    zext_ln101_fu_1056_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_987),64));
    zext_ln947_fu_2335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_fu_2330_p2),36));
    zext_ln949_fu_2345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lsb_index_fu_2309_p2),36));
    zext_ln951_1_fu_2483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_4_reg_3913),64));
    zext_ln951_fu_2451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_fu_2444_p3),37));
    zext_ln954_fu_2428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln954_fu_2423_p2),36));
    zext_ln955_fu_2408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln955_fu_2403_p2),36));
    zext_ln961_fu_2455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln954_fu_2437_p3),37));
end behav;
