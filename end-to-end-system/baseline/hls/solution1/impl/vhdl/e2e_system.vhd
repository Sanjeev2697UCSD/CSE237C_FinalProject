-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity e2e_system is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_signal : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_signal_ap_vld : OUT STD_LOGIC;
    input_signal : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of e2e_system is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "e2e_system_e2e_system,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.299083,HLS_SYN_LAT=15256,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=0,HLS_SYN_FF=20348,HLS_SYN_LUT=11388,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv36_0 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000000";
    constant ap_const_lv6_21 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal correlators_output_final_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal correlators_output_final_ce0 : STD_LOGIC;
    signal correlators_output_final_we0 : STD_LOGIC;
    signal correlators_output_final_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_163 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln29_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_reg_277 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state6_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln29_fu_256_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_correlator_fu_174_ap_ready : STD_LOGIC;
    signal grp_correlator_fu_174_ap_done : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal temp_output_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_output_V_ce0 : STD_LOGIC;
    signal temp_output_V_we0 : STD_LOGIC;
    signal temp_output_V_d0 : STD_LOGIC_VECTOR (35 downto 0);
    signal temp_output_V_q0 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_correlator_fu_174_ap_start : STD_LOGIC;
    signal grp_correlator_fu_174_ap_idle : STD_LOGIC;
    signal grp_correlator_fu_174_output_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_correlator_fu_174_output_r_ce0 : STD_LOGIC;
    signal grp_correlator_fu_174_output_r_we0 : STD_LOGIC;
    signal grp_correlator_fu_174_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_correlator_fu_174_input_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_correlator_fu_174_input_V_ce0 : STD_LOGIC;
    signal grp_filter_fu_243_ap_start : STD_LOGIC;
    signal grp_filter_fu_243_ap_done : STD_LOGIC;
    signal grp_filter_fu_243_ap_idle : STD_LOGIC;
    signal grp_filter_fu_243_ap_ready : STD_LOGIC;
    signal grp_filter_fu_243_output_signal_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_filter_fu_243_output_signal_V_ce0 : STD_LOGIC;
    signal grp_filter_fu_243_output_signal_V_we0 : STD_LOGIC;
    signal grp_filter_fu_243_output_signal_V_d0 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_correlator_fu_174_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_filter_fu_243_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_cast_fu_262_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component e2e_system_correlator IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_V_ce0 : OUT STD_LOGIC;
        input_V_q0 : IN STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component e2e_system_filter IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_read : IN STD_LOGIC_VECTOR (31 downto 0);
        output_signal_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_signal_V_ce0 : OUT STD_LOGIC;
        output_signal_V_we0 : OUT STD_LOGIC;
        output_signal_V_d0 : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component e2e_system_correlators_output_final IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component e2e_system_temp_output_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (35 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;



begin
    correlators_output_final_U : component e2e_system_correlators_output_final
    generic map (
        DataWidth => 32,
        AddressRange => 33,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => correlators_output_final_address0,
        ce0 => correlators_output_final_ce0,
        we0 => correlators_output_final_we0,
        d0 => grp_correlator_fu_174_output_r_d0,
        q0 => correlators_output_final_q0);

    temp_output_V_U : component e2e_system_temp_output_V
    generic map (
        DataWidth => 36,
        AddressRange => 170,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => temp_output_V_address0,
        ce0 => temp_output_V_ce0,
        we0 => temp_output_V_we0,
        d0 => temp_output_V_d0,
        q0 => temp_output_V_q0);

    grp_correlator_fu_174 : component e2e_system_correlator
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_correlator_fu_174_ap_start,
        ap_done => grp_correlator_fu_174_ap_done,
        ap_idle => grp_correlator_fu_174_ap_idle,
        ap_ready => grp_correlator_fu_174_ap_ready,
        output_r_address0 => grp_correlator_fu_174_output_r_address0,
        output_r_ce0 => grp_correlator_fu_174_output_r_ce0,
        output_r_we0 => grp_correlator_fu_174_output_r_we0,
        output_r_d0 => grp_correlator_fu_174_output_r_d0,
        input_V_address0 => grp_correlator_fu_174_input_V_address0,
        input_V_ce0 => grp_correlator_fu_174_input_V_ce0,
        input_V_q0 => temp_output_V_q0);

    grp_filter_fu_243 : component e2e_system_filter
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_filter_fu_243_ap_start,
        ap_done => grp_filter_fu_243_ap_done,
        ap_idle => grp_filter_fu_243_ap_idle,
        ap_ready => grp_filter_fu_243_ap_ready,
        input_read => input_signal,
        output_signal_V_address0 => grp_filter_fu_243_output_signal_V_address0,
        output_signal_V_ce0 => grp_filter_fu_243_output_signal_V_ce0,
        output_signal_V_we0 => grp_filter_fu_243_output_signal_V_we0,
        output_signal_V_d0 => grp_filter_fu_243_output_signal_V_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((grp_correlator_fu_174_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state6);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((grp_correlator_fu_174_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_correlator_fu_174_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_correlator_fu_174_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_correlator_fu_174_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_correlator_fu_174_ap_ready = ap_const_logic_1)) then 
                    grp_correlator_fu_174_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_filter_fu_243_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_filter_fu_243_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_filter_fu_243_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_filter_fu_243_ap_ready = ap_const_logic_1)) then 
                    grp_filter_fu_243_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_correlator_fu_174_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_reg_163 <= ap_const_lv6_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln29_fu_250_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_163 <= add_ln29_fu_256_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln29_reg_277 <= icmp_ln29_fu_250_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln29_fu_250_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state5, grp_correlator_fu_174_ap_done, ap_block_pp0_stage0_subdone, grp_filter_fu_243_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_filter_fu_243_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((grp_correlator_fu_174_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln29_fu_250_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln29_fu_250_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln29_fu_256_p2 <= std_logic_vector(unsigned(i_reg_163) + unsigned(ap_const_lv6_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state6_assign_proc : process(icmp_ln29_fu_250_p2)
    begin
        if ((icmp_ln29_fu_250_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    correlators_output_final_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state5, grp_correlator_fu_174_output_r_address0, i_cast_fu_262_p1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            correlators_output_final_address0 <= i_cast_fu_262_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            correlators_output_final_address0 <= grp_correlator_fu_174_output_r_address0;
        else 
            correlators_output_final_address0 <= "XXXXXX";
        end if; 
    end process;


    correlators_output_final_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state5, grp_correlator_fu_174_output_r_ce0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            correlators_output_final_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            correlators_output_final_ce0 <= grp_correlator_fu_174_output_r_ce0;
        else 
            correlators_output_final_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    correlators_output_final_we0_assign_proc : process(ap_CS_fsm_state5, grp_correlator_fu_174_output_r_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            correlators_output_final_we0 <= grp_correlator_fu_174_output_r_we0;
        else 
            correlators_output_final_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_correlator_fu_174_ap_start <= grp_correlator_fu_174_ap_start_reg;
    grp_filter_fu_243_ap_start <= grp_filter_fu_243_ap_start_reg;
    i_cast_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_163),64));
    icmp_ln29_fu_250_p2 <= "1" when (i_reg_163 = ap_const_lv6_21) else "0";
    output_signal <= correlators_output_final_q0;

    output_signal_ap_vld_assign_proc : process(icmp_ln29_reg_277, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln29_reg_277 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_signal_ap_vld <= ap_const_logic_1;
        else 
            output_signal_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    temp_output_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state5, grp_correlator_fu_174_input_V_address0, grp_filter_fu_243_output_signal_V_address0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            temp_output_V_address0 <= ap_const_lv64_0(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            temp_output_V_address0 <= grp_filter_fu_243_output_signal_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            temp_output_V_address0 <= grp_correlator_fu_174_input_V_address0;
        else 
            temp_output_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    temp_output_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, grp_correlator_fu_174_input_V_ce0, grp_filter_fu_243_output_signal_V_ce0, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            temp_output_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            temp_output_V_ce0 <= grp_filter_fu_243_output_signal_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            temp_output_V_ce0 <= grp_correlator_fu_174_input_V_ce0;
        else 
            temp_output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_output_V_d0_assign_proc : process(ap_CS_fsm_state1, grp_filter_fu_243_output_signal_V_d0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            temp_output_V_d0 <= ap_const_lv36_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            temp_output_V_d0 <= grp_filter_fu_243_output_signal_V_d0;
        else 
            temp_output_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp_output_V_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_filter_fu_243_output_signal_V_we0, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            temp_output_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            temp_output_V_we0 <= grp_filter_fu_243_output_signal_V_we0;
        else 
            temp_output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
