// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module e2e_system_filter (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        input_signal_dout,
        input_signal_empty_n,
        input_signal_read,
        output_signal_out_din,
        output_signal_out_full_n,
        output_signal_out_write
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_state13 = 18'd4096;
parameter    ap_ST_fsm_state14 = 18'd8192;
parameter    ap_ST_fsm_state15 = 18'd16384;
parameter    ap_ST_fsm_state16 = 18'd32768;
parameter    ap_ST_fsm_state17 = 18'd65536;
parameter    ap_ST_fsm_state18 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] input_signal_dout;
input   input_signal_empty_n;
output   input_signal_read;
output  [35:0] output_signal_out_din;
input   output_signal_out_full_n;
output   output_signal_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_signal_read;
reg output_signal_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [35:0] shift_signal_even_V_10;
reg  signed [35:0] shift_signal_even_V_9;
reg   [35:0] shift_signal_even_V_8;
reg  signed [35:0] shift_signal_even_V_7;
reg   [35:0] shift_signal_even_V_6;
reg   [35:0] shift_signal_even_V_5;
reg   [35:0] shift_signal_even_V_4;
reg  signed [35:0] shift_signal_even_V_3;
reg  signed [35:0] shift_signal_even_V_2;
reg  signed [35:0] shift_signal_even_V_1;
reg  signed [35:0] shift_signal_even_V_0;
reg    input_signal_blk_n;
reg    output_signal_out_blk_n;
wire    ap_CS_fsm_state18;
reg   [31:0] input_signal_read_reg_912;
reg    ap_block_state1;
wire    ap_CS_fsm_state2;
reg   [0:0] p_Result_s_reg_923;
wire    ap_CS_fsm_state3;
reg   [10:0] exp_tmp_V_reg_928;
wire   [51:0] trunc_ln565_fu_170_p1;
reg   [51:0] trunc_ln565_reg_933;
wire   [0:0] icmp_ln571_fu_174_p2;
reg   [0:0] icmp_ln571_reg_938;
wire   [53:0] select_ln570_fu_200_p3;
reg   [53:0] select_ln570_reg_945;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln581_fu_213_p2;
reg   [0:0] icmp_ln581_reg_950;
wire   [0:0] icmp_ln582_fu_239_p2;
reg   [0:0] icmp_ln582_reg_956;
wire   [35:0] trunc_ln583_fu_245_p1;
reg   [35:0] trunc_ln583_reg_961;
wire   [0:0] icmp_ln585_fu_249_p2;
reg   [0:0] icmp_ln585_reg_967;
wire   [0:0] icmp_ln603_fu_255_p2;
reg   [0:0] icmp_ln603_reg_973;
wire   [5:0] trunc_ln586_fu_261_p1;
reg   [5:0] trunc_ln586_reg_978;
wire   [0:0] or_ln582_fu_265_p2;
reg   [0:0] or_ln582_reg_984;
wire   [35:0] select_ln585_1_fu_348_p3;
reg   [35:0] select_ln585_1_reg_990;
wire    ap_CS_fsm_state5;
wire  signed [35:0] select_ln571_fu_386_p3;
reg  signed [35:0] select_ln571_reg_995;
wire    ap_CS_fsm_state6;
reg  signed [35:0] shift_signal_even_V_0_load_reg_1001;
wire    ap_CS_fsm_state7;
reg  signed [35:0] shift_signal_even_V_2_load_reg_1016;
wire    ap_CS_fsm_state8;
reg   [26:0] trunc_ln4_reg_1021;
wire   [62:0] grp_fu_415_p2;
reg   [62:0] mul_ln1118_1_reg_1026;
reg  signed [35:0] shift_signal_even_V_4_load_reg_1041;
wire    ap_CS_fsm_state9;
reg   [29:0] tmp_12_reg_1047;
wire   [61:0] grp_fu_454_p2;
reg   [61:0] mul_ln1118_2_reg_1052;
wire   [63:0] grp_fu_464_p2;
reg   [63:0] mul_ln1118_3_reg_1057;
reg  signed [35:0] shift_signal_even_V_5_load_reg_1067;
wire    ap_CS_fsm_state10;
reg   [35:0] tmp_3_reg_1073;
wire   [65:0] grp_fu_519_p2;
reg   [65:0] mul_ln1118_4_reg_1078;
reg  signed [35:0] shift_signal_even_V_6_load_reg_1088;
wire    ap_CS_fsm_state11;
reg   [35:0] tmp_4_reg_1094;
wire   [66:0] grp_fu_594_p2;
reg   [66:0] mul_ln1118_5_reg_1099;
reg   [35:0] tmp_5_reg_1109;
wire    ap_CS_fsm_state12;
wire   [67:0] grp_fu_638_p2;
reg   [67:0] mul_ln1118_6_reg_1114;
reg  signed [35:0] shift_signal_even_V_8_load_reg_1124;
wire    ap_CS_fsm_state13;
reg   [35:0] tmp_6_reg_1130;
wire   [65:0] grp_fu_673_p2;
reg   [65:0] mul_ln1118_7_reg_1135;
reg   [35:0] tmp_7_reg_1145;
wire    ap_CS_fsm_state14;
wire   [64:0] grp_fu_728_p2;
reg   [64:0] mul_ln1118_8_reg_1150;
reg  signed [35:0] shift_signal_even_V_10_load_reg_1160;
wire    ap_CS_fsm_state15;
reg   [35:0] tmp_8_reg_1165;
wire   [61:0] grp_fu_763_p2;
reg   [61:0] mul_ln1118_9_reg_1170;
reg   [35:0] tmp_9_reg_1180;
wire    ap_CS_fsm_state16;
wire   [62:0] grp_fu_818_p2;
reg   [62:0] mul_ln1118_10_reg_1185;
reg   [35:0] tmp_s_reg_1195;
wire    ap_CS_fsm_state17;
wire   [61:0] grp_fu_853_p2;
reg   [61:0] mul_ln1118_11_reg_1200;
wire   [31:0] grp_fu_137_p0;
wire   [63:0] grp_fu_137_p1;
wire   [63:0] ireg_fu_144_p1;
wire   [62:0] trunc_ln555_fu_148_p1;
wire   [52:0] p_Result_1_fu_183_p3;
wire   [53:0] zext_ln569_fu_190_p1;
wire   [53:0] man_V_1_fu_194_p2;
wire   [11:0] zext_ln455_fu_180_p1;
wire   [11:0] F2_fu_207_p2;
wire   [11:0] add_ln581_fu_219_p2;
wire   [11:0] sub_ln581_fu_225_p2;
wire   [11:0] sh_amt_fu_231_p3;
wire   [53:0] zext_ln586_fu_270_p1;
wire   [53:0] ashr_ln586_fu_273_p2;
wire   [0:0] tmp_11_fu_282_p3;
wire   [0:0] xor_ln571_fu_297_p2;
wire   [0:0] and_ln582_fu_302_p2;
wire   [0:0] xor_ln582_fu_314_p2;
wire   [0:0] and_ln581_fu_319_p2;
wire   [0:0] and_ln585_fu_324_p2;
wire   [35:0] trunc_ln586_1_fu_278_p1;
wire   [35:0] select_ln582_fu_307_p3;
wire   [0:0] xor_ln585_fu_337_p2;
wire   [0:0] and_ln585_1_fu_342_p2;
wire   [35:0] select_ln588_fu_289_p3;
wire   [35:0] select_ln585_fu_329_p3;
wire   [35:0] zext_ln604_fu_356_p1;
wire   [0:0] or_ln581_fu_364_p2;
wire   [0:0] xor_ln581_fu_368_p2;
wire   [0:0] and_ln603_fu_374_p2;
wire   [35:0] shl_ln604_fu_359_p2;
wire   [35:0] select_ln603_fu_379_p3;
wire   [24:0] grp_fu_405_p0;
wire  signed [27:0] grp_fu_415_p0;
wire   [59:0] grp_fu_405_p2;
wire   [26:0] grp_fu_454_p0;
wire   [28:0] grp_fu_464_p0;
wire   [59:0] tmp_fu_489_p3;
wire  signed [62:0] sext_ln703_fu_496_p1;
wire   [62:0] add_ln1192_fu_500_p2;
wire  signed [30:0] grp_fu_519_p0;
wire   [62:0] tmp_13_fu_534_p3;
wire  signed [68:0] sext_ln703_1_fu_545_p1;
wire  signed [68:0] sext_ln728_fu_541_p1;
wire   [68:0] add_ln1192_1_fu_548_p2;
wire   [35:0] tmp_2_fu_554_p4;
wire  signed [68:0] sext_ln703_2_fu_572_p1;
wire   [68:0] and_ln728_1_fu_564_p3;
wire   [68:0] add_ln1192_2_fu_575_p2;
wire   [31:0] grp_fu_594_p0;
wire  signed [68:0] sext_ln703_3_fu_616_p1;
wire   [68:0] and_ln728_2_fu_609_p3;
wire   [68:0] add_ln1192_3_fu_619_p2;
wire   [32:0] grp_fu_638_p0;
wire  signed [68:0] sext_ln703_4_fu_651_p1;
wire   [68:0] and_ln728_3_fu_644_p3;
wire   [68:0] add_ln1192_4_fu_654_p2;
wire  signed [30:0] grp_fu_673_p0;
wire  signed [68:0] sext_ln703_5_fu_705_p1;
wire   [68:0] and_ln728_4_fu_698_p3;
wire   [68:0] add_ln1192_5_fu_708_p2;
wire   [29:0] grp_fu_728_p0;
wire  signed [68:0] sext_ln703_6_fu_741_p1;
wire   [68:0] and_ln728_5_fu_734_p3;
wire   [68:0] add_ln1192_6_fu_744_p2;
wire  signed [26:0] grp_fu_763_p0;
wire  signed [68:0] sext_ln703_7_fu_795_p1;
wire   [68:0] and_ln728_6_fu_788_p3;
wire   [68:0] add_ln1192_7_fu_798_p2;
wire  signed [27:0] grp_fu_818_p0;
wire  signed [68:0] sext_ln703_8_fu_831_p1;
wire   [68:0] and_ln728_7_fu_824_p3;
wire   [68:0] add_ln1192_8_fu_834_p2;
wire   [26:0] grp_fu_853_p0;
wire  signed [68:0] sext_ln703_9_fu_866_p1;
wire   [68:0] and_ln728_8_fu_859_p3;
wire   [68:0] add_ln1192_9_fu_869_p2;
wire  signed [68:0] sext_ln703_10_fu_892_p1;
wire   [68:0] and_ln728_9_fu_885_p3;
wire   [68:0] add_ln1192_10_fu_895_p2;
reg   [17:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 18'd1;
#0 shift_signal_even_V_10 = 36'd0;
#0 shift_signal_even_V_9 = 36'd0;
#0 shift_signal_even_V_8 = 36'd0;
#0 shift_signal_even_V_7 = 36'd0;
#0 shift_signal_even_V_6 = 36'd0;
#0 shift_signal_even_V_5 = 36'd0;
#0 shift_signal_even_V_4 = 36'd0;
#0 shift_signal_even_V_3 = 36'd0;
#0 shift_signal_even_V_2 = 36'd0;
#0 shift_signal_even_V_1 = 36'd0;
#0 shift_signal_even_V_0 = 36'd0;
end

e2e_system_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_137_p0),
    .ce(1'b1),
    .dout(grp_fu_137_p1)
);

e2e_system_mul_25ns_36s_60_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 36 ),
    .dout_WIDTH( 60 ))
mul_25ns_36s_60_2_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_405_p0),
    .din1(select_ln571_reg_995),
    .ce(1'b1),
    .dout(grp_fu_405_p2)
);

e2e_system_mul_28s_36s_63_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 28 ),
    .din1_WIDTH( 36 ),
    .dout_WIDTH( 63 ))
mul_28s_36s_63_2_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_415_p0),
    .din1(shift_signal_even_V_0),
    .ce(1'b1),
    .dout(grp_fu_415_p2)
);

e2e_system_mul_27ns_36s_62_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 27 ),
    .din1_WIDTH( 36 ),
    .dout_WIDTH( 62 ))
mul_27ns_36s_62_2_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_454_p0),
    .din1(shift_signal_even_V_1),
    .ce(1'b1),
    .dout(grp_fu_454_p2)
);

e2e_system_mul_29ns_36s_64_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 29 ),
    .din1_WIDTH( 36 ),
    .dout_WIDTH( 64 ))
mul_29ns_36s_64_2_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_464_p0),
    .din1(shift_signal_even_V_2),
    .ce(1'b1),
    .dout(grp_fu_464_p2)
);

e2e_system_mul_31s_36s_66_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 36 ),
    .dout_WIDTH( 66 ))
mul_31s_36s_66_2_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_519_p0),
    .din1(shift_signal_even_V_3),
    .ce(1'b1),
    .dout(grp_fu_519_p2)
);

e2e_system_mul_32ns_36s_67_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 36 ),
    .dout_WIDTH( 67 ))
mul_32ns_36s_67_2_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_594_p0),
    .din1(shift_signal_even_V_4_load_reg_1041),
    .ce(1'b1),
    .dout(grp_fu_594_p2)
);

e2e_system_mul_33ns_36s_68_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 33 ),
    .din1_WIDTH( 36 ),
    .dout_WIDTH( 68 ))
mul_33ns_36s_68_2_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_638_p0),
    .din1(shift_signal_even_V_5_load_reg_1067),
    .ce(1'b1),
    .dout(grp_fu_638_p2)
);

e2e_system_mul_31s_36s_66_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 36 ),
    .dout_WIDTH( 66 ))
mul_31s_36s_66_2_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_673_p0),
    .din1(shift_signal_even_V_6_load_reg_1088),
    .ce(1'b1),
    .dout(grp_fu_673_p2)
);

e2e_system_mul_30ns_36s_65_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 30 ),
    .din1_WIDTH( 36 ),
    .dout_WIDTH( 65 ))
mul_30ns_36s_65_2_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_728_p0),
    .din1(shift_signal_even_V_7),
    .ce(1'b1),
    .dout(grp_fu_728_p2)
);

e2e_system_mul_27s_36s_62_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 27 ),
    .din1_WIDTH( 36 ),
    .dout_WIDTH( 62 ))
mul_27s_36s_62_2_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_763_p0),
    .din1(shift_signal_even_V_8_load_reg_1124),
    .ce(1'b1),
    .dout(grp_fu_763_p2)
);

e2e_system_mul_28s_36s_63_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 28 ),
    .din1_WIDTH( 36 ),
    .dout_WIDTH( 63 ))
mul_28s_36s_63_2_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_818_p0),
    .din1(shift_signal_even_V_9),
    .ce(1'b1),
    .dout(grp_fu_818_p2)
);

e2e_system_mul_27ns_36s_62_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 27 ),
    .din1_WIDTH( 36 ),
    .dout_WIDTH( 62 ))
mul_27ns_36s_62_2_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_853_p0),
    .din1(shift_signal_even_V_10_load_reg_1160),
    .ce(1'b1),
    .dout(grp_fu_853_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((output_signal_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        exp_tmp_V_reg_928 <= {{ireg_fu_144_p1[62:52]}};
        icmp_ln571_reg_938 <= icmp_ln571_fu_174_p2;
        p_Result_s_reg_923 <= ireg_fu_144_p1[32'd63];
        trunc_ln565_reg_933 <= trunc_ln565_fu_170_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln571_reg_938 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        icmp_ln581_reg_950 <= icmp_ln581_fu_213_p2;
        icmp_ln582_reg_956 <= icmp_ln582_fu_239_p2;
        icmp_ln585_reg_967 <= icmp_ln585_fu_249_p2;
        icmp_ln603_reg_973 <= icmp_ln603_fu_255_p2;
        or_ln582_reg_984 <= or_ln582_fu_265_p2;
        select_ln570_reg_945 <= select_ln570_fu_200_p3;
        trunc_ln583_reg_961 <= trunc_ln583_fu_245_p1;
        trunc_ln586_reg_978 <= trunc_ln586_fu_261_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((input_signal_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_signal_read_reg_912 <= input_signal_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        mul_ln1118_10_reg_1185 <= grp_fu_818_p2;
        tmp_9_reg_1180 <= {{add_ln1192_8_fu_834_p2[68:33]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        mul_ln1118_11_reg_1200 <= grp_fu_853_p2;
        tmp_s_reg_1195 <= {{add_ln1192_9_fu_869_p2[68:33]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        mul_ln1118_1_reg_1026 <= grp_fu_415_p2;
        shift_signal_even_V_1 <= shift_signal_even_V_0_load_reg_1001;
        shift_signal_even_V_2 <= shift_signal_even_V_1;
        shift_signal_even_V_2_load_reg_1016 <= shift_signal_even_V_2;
        trunc_ln4_reg_1021 <= {{grp_fu_405_p2[59:33]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        mul_ln1118_2_reg_1052 <= grp_fu_454_p2;
        mul_ln1118_3_reg_1057 <= grp_fu_464_p2;
        shift_signal_even_V_3 <= shift_signal_even_V_2_load_reg_1016;
        shift_signal_even_V_4 <= shift_signal_even_V_3;
        shift_signal_even_V_4_load_reg_1041 <= shift_signal_even_V_4;
        tmp_12_reg_1047 <= {{add_ln1192_fu_500_p2[62:33]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        mul_ln1118_4_reg_1078 <= grp_fu_519_p2;
        shift_signal_even_V_5 <= shift_signal_even_V_4_load_reg_1041;
        shift_signal_even_V_5_load_reg_1067 <= shift_signal_even_V_5;
        tmp_3_reg_1073 <= {{add_ln1192_2_fu_575_p2[68:33]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        mul_ln1118_5_reg_1099 <= grp_fu_594_p2;
        shift_signal_even_V_6 <= shift_signal_even_V_5_load_reg_1067;
        shift_signal_even_V_6_load_reg_1088 <= shift_signal_even_V_6;
        tmp_4_reg_1094 <= {{add_ln1192_3_fu_619_p2[68:33]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        mul_ln1118_6_reg_1114 <= grp_fu_638_p2;
        tmp_5_reg_1109 <= {{add_ln1192_4_fu_654_p2[68:33]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        mul_ln1118_7_reg_1135 <= grp_fu_673_p2;
        shift_signal_even_V_7 <= shift_signal_even_V_6_load_reg_1088;
        shift_signal_even_V_8 <= shift_signal_even_V_7;
        shift_signal_even_V_8_load_reg_1124 <= shift_signal_even_V_8;
        tmp_6_reg_1130 <= {{add_ln1192_5_fu_708_p2[68:33]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        mul_ln1118_8_reg_1150 <= grp_fu_728_p2;
        tmp_7_reg_1145 <= {{add_ln1192_6_fu_744_p2[68:33]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        mul_ln1118_9_reg_1170 <= grp_fu_763_p2;
        shift_signal_even_V_10 <= shift_signal_even_V_9;
        shift_signal_even_V_10_load_reg_1160 <= shift_signal_even_V_10;
        shift_signal_even_V_9 <= shift_signal_even_V_8_load_reg_1124;
        tmp_8_reg_1165 <= {{add_ln1192_7_fu_798_p2[68:33]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        select_ln571_reg_995 <= select_ln571_fu_386_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln571_reg_938 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        select_ln585_1_reg_990 <= select_ln585_1_fu_348_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        shift_signal_even_V_0 <= select_ln571_reg_995;
        shift_signal_even_V_0_load_reg_1001 <= shift_signal_even_V_0;
    end
end

always @ (*) begin
    if (((output_signal_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((output_signal_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_signal_blk_n = input_signal_empty_n;
    end else begin
        input_signal_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((input_signal_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_signal_read = 1'b1;
    end else begin
        input_signal_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        output_signal_out_blk_n = output_signal_out_full_n;
    end else begin
        output_signal_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((output_signal_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
        output_signal_out_write = 1'b1;
    end else begin
        output_signal_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((input_signal_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((output_signal_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_fu_207_p2 = (12'd1075 - zext_ln455_fu_180_p1);

assign add_ln1192_10_fu_895_p2 = ($signed(sext_ln703_10_fu_892_p1) + $signed(and_ln728_9_fu_885_p3));

assign add_ln1192_1_fu_548_p2 = ($signed(sext_ln703_1_fu_545_p1) + $signed(sext_ln728_fu_541_p1));

assign add_ln1192_2_fu_575_p2 = ($signed(sext_ln703_2_fu_572_p1) + $signed(and_ln728_1_fu_564_p3));

assign add_ln1192_3_fu_619_p2 = ($signed(sext_ln703_3_fu_616_p1) + $signed(and_ln728_2_fu_609_p3));

assign add_ln1192_4_fu_654_p2 = ($signed(sext_ln703_4_fu_651_p1) + $signed(and_ln728_3_fu_644_p3));

assign add_ln1192_5_fu_708_p2 = ($signed(sext_ln703_5_fu_705_p1) + $signed(and_ln728_4_fu_698_p3));

assign add_ln1192_6_fu_744_p2 = ($signed(sext_ln703_6_fu_741_p1) + $signed(and_ln728_5_fu_734_p3));

assign add_ln1192_7_fu_798_p2 = ($signed(sext_ln703_7_fu_795_p1) + $signed(and_ln728_6_fu_788_p3));

assign add_ln1192_8_fu_834_p2 = ($signed(sext_ln703_8_fu_831_p1) + $signed(and_ln728_7_fu_824_p3));

assign add_ln1192_9_fu_869_p2 = ($signed(sext_ln703_9_fu_866_p1) + $signed(and_ln728_8_fu_859_p3));

assign add_ln1192_fu_500_p2 = ($signed(mul_ln1118_1_reg_1026) + $signed(sext_ln703_fu_496_p1));

assign add_ln581_fu_219_p2 = ($signed(12'd4063) + $signed(F2_fu_207_p2));

assign and_ln581_fu_319_p2 = (xor_ln582_fu_314_p2 & icmp_ln581_reg_950);

assign and_ln582_fu_302_p2 = (xor_ln571_fu_297_p2 & icmp_ln582_reg_956);

assign and_ln585_1_fu_342_p2 = (xor_ln585_fu_337_p2 & and_ln581_fu_319_p2);

assign and_ln585_fu_324_p2 = (icmp_ln585_reg_967 & and_ln581_fu_319_p2);

assign and_ln603_fu_374_p2 = (xor_ln581_fu_368_p2 & icmp_ln603_reg_973);

assign and_ln728_1_fu_564_p3 = {{tmp_2_fu_554_p4}, {33'd0}};

assign and_ln728_2_fu_609_p3 = {{tmp_3_reg_1073}, {33'd0}};

assign and_ln728_3_fu_644_p3 = {{tmp_4_reg_1094}, {33'd0}};

assign and_ln728_4_fu_698_p3 = {{tmp_5_reg_1109}, {33'd0}};

assign and_ln728_5_fu_734_p3 = {{tmp_6_reg_1130}, {33'd0}};

assign and_ln728_6_fu_788_p3 = {{tmp_7_reg_1145}, {33'd0}};

assign and_ln728_7_fu_824_p3 = {{tmp_8_reg_1165}, {33'd0}};

assign and_ln728_8_fu_859_p3 = {{tmp_9_reg_1180}, {33'd0}};

assign and_ln728_9_fu_885_p3 = {{tmp_s_reg_1195}, {33'd0}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((input_signal_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ashr_ln586_fu_273_p2 = $signed(select_ln570_reg_945) >>> zext_ln586_fu_270_p1;

assign grp_fu_137_p0 = input_signal_read_reg_912;

assign grp_fu_405_p0 = 60'd12467180;

assign grp_fu_415_p0 = 63'd9223372036781645340;

assign grp_fu_454_p0 = 62'd48005295;

assign grp_fu_464_p0 = 64'd198583255;

assign grp_fu_519_p0 = 66'd73786976294206683996;

assign grp_fu_594_p0 = 67'd1410816331;

assign grp_fu_638_p0 = 68'd3913428328;

assign grp_fu_673_p0 = 66'd73786976293928978757;

assign grp_fu_728_p0 = 65'd402315114;

assign grp_fu_763_p0 = 62'd4611686018381583867;

assign grp_fu_818_p0 = 63'd9223372036770541683;

assign grp_fu_853_p0 = 62'd42125834;

assign icmp_ln571_fu_174_p2 = ((trunc_ln555_fu_148_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_213_p2 = (($signed(F2_fu_207_p2) > $signed(12'd33)) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_239_p2 = ((F2_fu_207_p2 == 12'd33) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_249_p2 = ((sh_amt_fu_231_p3 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_255_p2 = ((sh_amt_fu_231_p3 < 12'd36) ? 1'b1 : 1'b0);

assign ireg_fu_144_p1 = grp_fu_137_p1;

assign man_V_1_fu_194_p2 = (54'd0 - zext_ln569_fu_190_p1);

assign or_ln581_fu_364_p2 = (or_ln582_reg_984 | icmp_ln581_reg_950);

assign or_ln582_fu_265_p2 = (icmp_ln582_fu_239_p2 | icmp_ln571_reg_938);

assign output_signal_out_din = {{add_ln1192_10_fu_895_p2[68:33]}};

assign p_Result_1_fu_183_p3 = {{1'd1}, {trunc_ln565_reg_933}};

assign select_ln570_fu_200_p3 = ((p_Result_s_reg_923[0:0] === 1'b1) ? man_V_1_fu_194_p2 : zext_ln569_fu_190_p1);

assign select_ln571_fu_386_p3 = ((icmp_ln571_reg_938[0:0] === 1'b1) ? 36'd0 : select_ln603_fu_379_p3);

assign select_ln582_fu_307_p3 = ((and_ln582_fu_302_p2[0:0] === 1'b1) ? trunc_ln583_reg_961 : 36'd0);

assign select_ln585_1_fu_348_p3 = ((and_ln585_1_fu_342_p2[0:0] === 1'b1) ? select_ln588_fu_289_p3 : select_ln585_fu_329_p3);

assign select_ln585_fu_329_p3 = ((and_ln585_fu_324_p2[0:0] === 1'b1) ? trunc_ln586_1_fu_278_p1 : select_ln582_fu_307_p3);

assign select_ln588_fu_289_p3 = ((tmp_11_fu_282_p3[0:0] === 1'b1) ? 36'd68719476735 : 36'd0);

assign select_ln603_fu_379_p3 = ((and_ln603_fu_374_p2[0:0] === 1'b1) ? shl_ln604_fu_359_p2 : select_ln585_1_reg_990);

assign sext_ln703_10_fu_892_p1 = $signed(mul_ln1118_11_reg_1200);

assign sext_ln703_1_fu_545_p1 = $signed(mul_ln1118_2_reg_1052);

assign sext_ln703_2_fu_572_p1 = $signed(mul_ln1118_3_reg_1057);

assign sext_ln703_3_fu_616_p1 = $signed(mul_ln1118_4_reg_1078);

assign sext_ln703_4_fu_651_p1 = $signed(mul_ln1118_5_reg_1099);

assign sext_ln703_5_fu_705_p1 = $signed(mul_ln1118_6_reg_1114);

assign sext_ln703_6_fu_741_p1 = $signed(mul_ln1118_7_reg_1135);

assign sext_ln703_7_fu_795_p1 = $signed(mul_ln1118_8_reg_1150);

assign sext_ln703_8_fu_831_p1 = $signed(mul_ln1118_9_reg_1170);

assign sext_ln703_9_fu_866_p1 = $signed(mul_ln1118_10_reg_1185);

assign sext_ln703_fu_496_p1 = $signed(tmp_fu_489_p3);

assign sext_ln728_fu_541_p1 = $signed(tmp_13_fu_534_p3);

assign sh_amt_fu_231_p3 = ((icmp_ln581_fu_213_p2[0:0] === 1'b1) ? add_ln581_fu_219_p2 : sub_ln581_fu_225_p2);

assign shl_ln604_fu_359_p2 = trunc_ln583_reg_961 << zext_ln604_fu_356_p1;

assign sub_ln581_fu_225_p2 = (12'd33 - F2_fu_207_p2);

assign tmp_11_fu_282_p3 = input_signal_read_reg_912[32'd31];

assign tmp_13_fu_534_p3 = {{tmp_12_reg_1047}, {33'd0}};

assign tmp_2_fu_554_p4 = {{add_ln1192_1_fu_548_p2[68:33]}};

assign tmp_fu_489_p3 = {{trunc_ln4_reg_1021}, {33'd0}};

assign trunc_ln555_fu_148_p1 = ireg_fu_144_p1[62:0];

assign trunc_ln565_fu_170_p1 = ireg_fu_144_p1[51:0];

assign trunc_ln583_fu_245_p1 = select_ln570_fu_200_p3[35:0];

assign trunc_ln586_1_fu_278_p1 = ashr_ln586_fu_273_p2[35:0];

assign trunc_ln586_fu_261_p1 = sh_amt_fu_231_p3[5:0];

assign xor_ln571_fu_297_p2 = (icmp_ln571_reg_938 ^ 1'd1);

assign xor_ln581_fu_368_p2 = (or_ln581_fu_364_p2 ^ 1'd1);

assign xor_ln582_fu_314_p2 = (or_ln582_reg_984 ^ 1'd1);

assign xor_ln585_fu_337_p2 = (icmp_ln585_reg_967 ^ 1'd1);

assign zext_ln455_fu_180_p1 = exp_tmp_V_reg_928;

assign zext_ln569_fu_190_p1 = p_Result_1_fu_183_p3;

assign zext_ln586_fu_270_p1 = trunc_ln586_reg_978;

assign zext_ln604_fu_356_p1 = trunc_ln586_reg_978;

endmodule //e2e_system_filter
